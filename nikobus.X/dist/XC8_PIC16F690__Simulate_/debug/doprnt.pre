
# 1 "C:\Program Files (x86)\Microchip\xc8\v1.12\sources\doprnt.c"

# 8 "C:\Program Files (x86)\Microchip\xc8\v1.12\include\stdio.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.12\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 23 "C:\Program Files (x86)\Microchip\xc8\v1.12\include\stdio.h"
extern int errno;

# 54
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "C:\Program Files (x86)\Microchip\xc8\v1.12\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 99 "C:\Program Files (x86)\Microchip\xc8\v1.12\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 191
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...);
extern int sscanf(const char *, const char *, ...);
extern int vprintf(const char *, va_list);
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap);
extern int vsscanf(const char *, const char *, va_list);

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.12\include\ctype.h"
extern __bit isalpha(char);
extern __bit isupper(char);
extern __bit islower(char);
extern __bit isdigit(char);
extern __bit isxdigit(char);
extern __bit isspace(char);
extern __bit ispunct(char);
extern __bit isalnum(char);
extern __bit isprint(char);
extern __bit isgraph(char);
extern __bit iscntrl(char);


extern char toupper(char);
extern char tolower(char);

# 27 "C:\Program Files (x86)\Microchip\xc8\v1.12\include\stdlib.h"
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 65
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);




extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);

extern void abort(void);
extern void exit(int);
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);


extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);




extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

extern char * ftoa(float f, int * status);

# 22 "C:\Program Files (x86)\Microchip\xc8\v1.12\include\string.h"
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 35
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 17 "C:\Program Files (x86)\Microchip\xc8\v1.12\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 17 "C:\Program Files (x86)\Microchip\xc8\v1.12\include\sys.h"
extern int errno;

# 30
extern int execl(char *, char *, ...);
extern int execv(char *, char **);
extern int execve(char *, char **, char **);
extern int execle(char *, char *, ...);
extern int execvp(char *, char **);
extern int execlp(char *, char *, ...);
extern int getpid(void);
extern char * mktemp(char *);

# 51
extern int spawnl(char *, char *, ...);
extern int spawnv(char *, char **);
extern int spawnle(char *, char *, ...);
extern int spawnve(char *, char **, char **);
extern int spawnlp(char *, char *, ...);
extern int spawnvp(char *, char **);

extern int chdir(char *);
extern int chdrv(char *);
extern int mkdir(char *);
extern int rmdir(char *);
extern char * getcwd(char *);
extern void persist_validate(void);
extern int persist_check(int);
extern char * getdrv(void);
extern char ** _getargs(char *, char *);
extern int _argc_;

# 78
extern void * sbrk(size_t);
extern void brk(void *);

# 85
extern int _pnum(unsigned long, signed char, signed char, unsigned char, unsigned char, struct __prbuf *, unsigned char);
extern int _fnum(double, short, short, short, struct __prbuf *, short);

# 3 "C:\Program Files (x86)\Microchip\xc8\v1.12\include\math.h"
extern double fabs(double);
extern double floor(double);
extern double ceil(double);
extern double modf(double, double *);
extern double sqrt(double);
extern double atof(const char *);
extern double sin(double);
extern double cos(double);
extern double tan(double);
extern double asin(double);
extern double acos(double);
extern double atan(double);
extern double atan2(double, double);
extern double log(double);
extern double log10(double);
extern double pow(double, double);
extern double exp(double);
extern double sinh(double);
extern double cosh(double);
extern double tanh(double);
extern double eval_poly(double, const double *, int);
extern double frexp(double, int *);
extern double ldexp(double, int);
extern double fmod(double, double);
extern double trunc(double);
extern double round(double);


# 13 "C:\Program Files (x86)\Microchip\xc8\v1.12\sources\doprnt.c"
#pragma warning disable 350

# 354
const static unsigned int dpowers[] = {1, 10, 100, 1000, 10000,

# 359
};


const static unsigned int hexpowers[] = {1, 0x10, 0x100, 0x1000,

# 366
};


const static unsigned int octpowers[] = {1, 010, 0100, 01000, 010000, 0100000,

# 375
};

# 455
int

# 492
sprintf(char * sp, const char * f, ...)
{
va_list ap;




signed char c;

int width;




signed char prec;

unsigned short flag;

# 527
union {
unsigned int _val;
struct {
const char * _cp;
unsigned _len;
} _str;
} _val;

# 542
*ap = __va_start();


while(c = *f++) {

if(c != '%')

{
((*sp++ = (c)));
continue;
}


width = 0;

flag = 0;

for(;;) {
switch(*f) {

case '-':
flag |= 0x08;
f++;
continue;



case ' ':
flag |= 0x01;
f++;
continue;

# 582
case '#':
flag |= 0x800;
f++;
continue;


case '0':
flag |= 0x04;
f++;
continue;

}
break;
}

# 602
if(flag & 0x08)
flag &= ~0x04;


if(isdigit((unsigned)*f)) {
width = 0;
do {
width *= 10;
width += *f++ - '0';
} while(isdigit((unsigned)*f));

} else if(*f == '*') {
width = (*(int *)__va_arg((*(int **)ap), (int)0));
f++;

}


if(*f == '.') {
flag |= 0x4000;
f++;

if(*f == '*') {
prec = (*(int *)__va_arg((*(int **)ap), (int)0));
f++;
} else

{
prec = 0;
while(isdigit((unsigned)*f))
prec = prec*10 + *f++ - '0';
}
} else {
prec = 0;

# 639
}

# 644
switch(c = *f++) {

case 0:
goto alldone;

# 698
case 'o':

flag |= 0x40;

break;



case 'd':
case 'i':
break;

# 721
case 'X':

flag |= 0x20;



case 'x':


flag |= 0x80;

break;

# 759
dostring:


if(prec && prec < _val._str._len)
_val._str._len = prec;


if(width > _val._str._len)
width -= _val._str._len;
else
width = 0;

if(!(flag & 0x08))

while(width--)
((*sp++ = (' ')));

while(_val._str._len--)
((*sp++ = (*_val._str._cp++)));

if(flag & 0x08)
while(width--)
((*sp++ = (' ')));

continue;

# 793
case 'c':

# 808
c = (*(int *)__va_arg((*(int **)ap), (int)0));


default:


_val._str._cp = (char *)&c;
_val._str._len = 1;
goto dostring;

# 826
case 'u':
flag |= 0xC0;
break;


}

# 1258
if((flag & (0xC0)) == 0x00)

{

# 1266
_val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));

if((int)_val._val < 0) {
flag |= 0x03;
_val._val = -_val._val;
}

}

else




{

# 1293
_val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
}


if(prec == 0 && _val._val == 0)
prec++;


switch((unsigned char)(flag & (0xC0))) {




case 0x00:


case 0xC0:


for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
if(_val._val < dpowers[c])
break;

break;




case 0x80:

for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
if(_val._val < hexpowers[c])
break;

break;

# 1333
case 0x40:

for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
if(_val._val < octpowers[c])
break;

break;



}


if(c < prec)
c = prec;
else if(prec < c)
prec = c;


if(width && flag & 0x03)
width--;

if(flag & 0x4000) {
if(width > prec)
width -= prec;
else
width = 0;
}



if((flag & (

0x04|

(0xC0)|0x800)) == (0x40|0x800)) {
if(width)
width--;
} else



if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {

# 1379
if(width > 2)
width -= 2;
else
width = 0;
}




if(width > c)
width -= c;
else
width = 0;


if(flag & 0x04) {




if(flag & 0x03)
((*sp++ = ('-')));


else


if(flag & 0x01)
((*sp++ = (' ')));


else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
((*sp++ = ('0')));

((*sp++ = (flag & 0x20 ? 'X' : 'x')));

# 1419
}


if(width)
do
((*sp++ = ('0')));
while(--width);

} else

{

if(width

&& !(flag & 0x08)

)
do
((*sp++ = (' ')));
while(--width);

# 1445
if(flag & 0x03)
((*sp++ = ('-')));



else if(flag & 0x01)
((*sp++ = (' ')));



if((flag & ((0xC0)|0x800)) == (0x40|0x800))
((*sp++ = ('0')));
else



if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {

# 1465
((*sp++ = ('0')));

((*sp++ = (flag & 0x20 ? 'X' : 'x')));

# 1473
}


}

# 1481
while(prec--) {

switch((unsigned char)(flag & (0xC0)))

{




case 0x00:


case 0xC0:


c = (_val._val / dpowers[prec]) % 10 + '0';

break;

# 1504
case 0x80:

{
unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;

c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];

# 1515
}

break;

# 1523
case 0x40:

c = ((_val._val / octpowers[prec]) & 07) + '0';

break;


}
((*sp++ = (c)));
}


if((flag & 0x08) && width > 0)
do
((*sp++ = (' ')));
while(--width);

}

alldone:


*sp = 0;

return 0;
}

