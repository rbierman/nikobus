

Microchip Technology PIC PRO Macro Assembler V1.12 build 49521 
                                                                                               Tue Apr 23 02:08:48 2013

HI-TECH Software Omniscient Code Generator (PRO mode) build 49521
     1                           	processor	16F690
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text739,local,class=CODE,merge=1,delta=2
    14                           	psect	text741,local,class=CODE,merge=1,delta=2
    15                           	psect	text742,local,class=CODE,merge=1,delta=2
    16                           	psect	swtext1,local,class=CONST,delta=2
    17                           	psect	swtext2,local,class=CONST,delta=2
    18                           	psect	text769,local,class=CODE,merge=1,delta=2
    19                           	psect	text770,local,class=CODE,merge=1,delta=2
    20                           	psect	text772,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	text775,local,class=CODE,merge=1,delta=2
    23                           	psect	pa_nodes,global,class=CODE,delta=2
    24                           	dabs	1,0x7E,2
    25  0000                     	;# 
    26  0001                     	;# 
    27  0002                     	;# 
    28  0003                     	;# 
    29  0004                     	;# 
    30  0005                     	;# 
    31  0006                     	;# 
    32  0007                     	;# 
    33  000A                     	;# 
    34  000B                     	;# 
    35  000C                     	;# 
    36  000D                     	;# 
    37  000E                     	;# 
    38  000E                     	;# 
    39  000F                     	;# 
    40  0010                     	;# 
    41  0011                     	;# 
    42  0012                     	;# 
    43  0013                     	;# 
    44  0014                     	;# 
    45  0015                     	;# 
    46  0015                     	;# 
    47  0016                     	;# 
    48  0017                     	;# 
    49  0018                     	;# 
    50  0019                     	;# 
    51  001A                     	;# 
    52  001C                     	;# 
    53  001D                     	;# 
    54  001E                     	;# 
    55  001F                     	;# 
    56  0081                     	;# 
    57  0085                     	;# 
    58  0086                     	;# 
    59  0087                     	;# 
    60  008C                     	;# 
    61  008D                     	;# 
    62  008E                     	;# 
    63  008F                     	;# 
    64  0090                     	;# 
    65  0092                     	;# 
    66  0093                     	;# 
    67  0093                     	;# 
    68  0093                     	;# 
    69  0094                     	;# 
    70  0095                     	;# 
    71  0095                     	;# 
    72  0096                     	;# 
    73  0096                     	;# 
    74  0097                     	;# 
    75  0098                     	;# 
    76  0099                     	;# 
    77  009A                     	;# 
    78  009B                     	;# 
    79  009E                     	;# 
    80  009F                     	;# 
    81  010C                     	;# 
    82  010C                     	;# 
    83  010D                     	;# 
    84  010E                     	;# 
    85  010F                     	;# 
    86  0115                     	;# 
    87  0116                     	;# 
    88  0118                     	;# 
    89  0119                     	;# 
    90  011A                     	;# 
    91  011B                     	;# 
    92  011E                     	;# 
    93  011F                     	;# 
    94  018C                     	;# 
    95  018D                     	;# 
    96  019D                     	;# 
    97  019E                     	;# 
    98  0000                     	;# 
    99  0001                     	;# 
   100  0002                     	;# 
   101  0003                     	;# 
   102  0004                     	;# 
   103  0005                     	;# 
   104  0006                     	;# 
   105  0007                     	;# 
   106  000A                     	;# 
   107  000B                     	;# 
   108  000C                     	;# 
   109  000D                     	;# 
   110  000E                     	;# 
   111  000E                     	;# 
   112  000F                     	;# 
   113  0010                     	;# 
   114  0011                     	;# 
   115  0012                     	;# 
   116  0013                     	;# 
   117  0014                     	;# 
   118  0015                     	;# 
   119  0015                     	;# 
   120  0016                     	;# 
   121  0017                     	;# 
   122  0018                     	;# 
   123  0019                     	;# 
   124  001A                     	;# 
   125  001C                     	;# 
   126  001D                     	;# 
   127  001E                     	;# 
   128  001F                     	;# 
   129  0081                     	;# 
   130  0085                     	;# 
   131  0086                     	;# 
   132  0087                     	;# 
   133  008C                     	;# 
   134  008D                     	;# 
   135  008E                     	;# 
   136  008F                     	;# 
   137  0090                     	;# 
   138  0092                     	;# 
   139  0093                     	;# 
   140  0093                     	;# 
   141  0093                     	;# 
   142  0094                     	;# 
   143  0095                     	;# 
   144  0095                     	;# 
   145  0096                     	;# 
   146  0096                     	;# 
   147  0097                     	;# 
   148  0098                     	;# 
   149  0099                     	;# 
   150  009A                     	;# 
   151  009B                     	;# 
   152  009E                     	;# 
   153  009F                     	;# 
   154  010C                     	;# 
   155  010C                     	;# 
   156  010D                     	;# 
   157  010E                     	;# 
   158  010F                     	;# 
   159  0115                     	;# 
   160  0116                     	;# 
   161  0118                     	;# 
   162  0119                     	;# 
   163  011A                     	;# 
   164  011B                     	;# 
   165  011E                     	;# 
   166  011F                     	;# 
   167  018C                     	;# 
   168  018D                     	;# 
   169  019D                     	;# 
   170  019E                     	;# 
   171  0000                     	;# 
   172  0001                     	;# 
   173  0002                     	;# 
   174  0003                     	;# 
   175  0004                     	;# 
   176  0005                     	;# 
   177  0006                     	;# 
   178  0007                     	;# 
   179  000A                     	;# 
   180  000B                     	;# 
   181  000C                     	;# 
   182  000D                     	;# 
   183  000E                     	;# 
   184  000E                     	;# 
   185  000F                     	;# 
   186  0010                     	;# 
   187  0011                     	;# 
   188  0012                     	;# 
   189  0013                     	;# 
   190  0014                     	;# 
   191  0015                     	;# 
   192  0015                     	;# 
   193  0016                     	;# 
   194  0017                     	;# 
   195  0018                     	;# 
   196  0019                     	;# 
   197  001A                     	;# 
   198  001C                     	;# 
   199  001D                     	;# 
   200  001E                     	;# 
   201  001F                     	;# 
   202  0081                     	;# 
   203  0085                     	;# 
   204  0086                     	;# 
   205  0087                     	;# 
   206  008C                     	;# 
   207  008D                     	;# 
   208  008E                     	;# 
   209  008F                     	;# 
   210  0090                     	;# 
   211  0092                     	;# 
   212  0093                     	;# 
   213  0093                     	;# 
   214  0093                     	;# 
   215  0094                     	;# 
   216  0095                     	;# 
   217  0095                     	;# 
   218  0096                     	;# 
   219  0096                     	;# 
   220  0097                     	;# 
   221  0098                     	;# 
   222  0099                     	;# 
   223  009A                     	;# 
   224  009B                     	;# 
   225  009E                     	;# 
   226  009F                     	;# 
   227  010C                     	;# 
   228  010C                     	;# 
   229  010D                     	;# 
   230  010E                     	;# 
   231  010F                     	;# 
   232  0115                     	;# 
   233  0116                     	;# 
   234  0118                     	;# 
   235  0119                     	;# 
   236  011A                     	;# 
   237  011B                     	;# 
   238  011E                     	;# 
   239  011F                     	;# 
   240  018C                     	;# 
   241  018D                     	;# 
   242  019D                     	;# 
   243  019E                     	;# 
   244  0000                     	;# 
   245  0001                     	;# 
   246  0002                     	;# 
   247  0003                     	;# 
   248  0004                     	;# 
   249  0005                     	;# 
   250  0006                     	;# 
   251  0007                     	;# 
   252  000A                     	;# 
   253  000B                     	;# 
   254  000C                     	;# 
   255  000D                     	;# 
   256  000E                     	;# 
   257  000E                     	;# 
   258  000F                     	;# 
   259  0010                     	;# 
   260  0011                     	;# 
   261  0012                     	;# 
   262  0013                     	;# 
   263  0014                     	;# 
   264  0015                     	;# 
   265  0015                     	;# 
   266  0016                     	;# 
   267  0017                     	;# 
   268  0018                     	;# 
   269  0019                     	;# 
   270  001A                     	;# 
   271  001C                     	;# 
   272  001D                     	;# 
   273  001E                     	;# 
   274  001F                     	;# 
   275  0081                     	;# 
   276  0085                     	;# 
   277  0086                     	;# 
   278  0087                     	;# 
   279  008C                     	;# 
   280  008D                     	;# 
   281  008E                     	;# 
   282  008F                     	;# 
   283  0090                     	;# 
   284  0092                     	;# 
   285  0093                     	;# 
   286  0093                     	;# 
   287  0093                     	;# 
   288  0094                     	;# 
   289  0095                     	;# 
   290  0095                     	;# 
   291  0096                     	;# 
   292  0096                     	;# 
   293  0097                     	;# 
   294  0098                     	;# 
   295  0099                     	;# 
   296  009A                     	;# 
   297  009B                     	;# 
   298  009E                     	;# 
   299  009F                     	;# 
   300  010C                     	;# 
   301  010C                     	;# 
   302  010D                     	;# 
   303  010E                     	;# 
   304  010F                     	;# 
   305  0115                     	;# 
   306  0116                     	;# 
   307  0118                     	;# 
   308  0119                     	;# 
   309  011A                     	;# 
   310  011B                     	;# 
   311  011E                     	;# 
   312  011F                     	;# 
   313  018C                     	;# 
   314  018D                     	;# 
   315  019D                     	;# 
   316  019E                     	;# 
   317  0000                     	;# 
   318  0001                     	;# 
   319  0002                     	;# 
   320  0003                     	;# 
   321  0004                     	;# 
   322  0005                     	;# 
   323  0006                     	;# 
   324  0007                     	;# 
   325  000A                     	;# 
   326  000B                     	;# 
   327  000C                     	;# 
   328  000D                     	;# 
   329  000E                     	;# 
   330  000E                     	;# 
   331  000F                     	;# 
   332  0010                     	;# 
   333  0011                     	;# 
   334  0012                     	;# 
   335  0013                     	;# 
   336  0014                     	;# 
   337  0015                     	;# 
   338  0015                     	;# 
   339  0016                     	;# 
   340  0017                     	;# 
   341  0018                     	;# 
   342  0019                     	;# 
   343  001A                     	;# 
   344  001C                     	;# 
   345  001D                     	;# 
   346  001E                     	;# 
   347  001F                     	;# 
   348  0081                     	;# 
   349  0085                     	;# 
   350  0086                     	;# 
   351  0087                     	;# 
   352  008C                     	;# 
   353  008D                     	;# 
   354  008E                     	;# 
   355  008F                     	;# 
   356  0090                     	;# 
   357  0092                     	;# 
   358  0093                     	;# 
   359  0093                     	;# 
   360  0093                     	;# 
   361  0094                     	;# 
   362  0095                     	;# 
   363  0095                     	;# 
   364  0096                     	;# 
   365  0096                     	;# 
   366  0097                     	;# 
   367  0098                     	;# 
   368  0099                     	;# 
   369  009A                     	;# 
   370  009B                     	;# 
   371  009E                     	;# 
   372  009F                     	;# 
   373  010C                     	;# 
   374  010C                     	;# 
   375  010D                     	;# 
   376  010E                     	;# 
   377  010F                     	;# 
   378  0115                     	;# 
   379  0116                     	;# 
   380  0118                     	;# 
   381  0119                     	;# 
   382  011A                     	;# 
   383  011B                     	;# 
   384  011E                     	;# 
   385  011F                     	;# 
   386  018C                     	;# 
   387  018D                     	;# 
   388  019D                     	;# 
   389  019E                     	;# 
   390                           
   391                           	psect	strings
   392  0900                     __pstrings:	
   393  0900                     stringtab:	
   394                           ;	global	stringdir,stringtab,__stringbase
   395                           
   396  0900                     __stringtab:	
   397  0900                     stringcode:	
   398                           ;	String table - string pointers are 1 byte each
   399                           
   400  0900                     stringdir:	
   401  0900  3009               	movlw	high stringdir
   402  0901  008A               	movwf	10
   403  0902  0804               	movf	4,w
   404  0903  0A84               	incf	4,f
   405  0904  0782               	addwf	2,f
   406  0905                     __stringbase:	
   407  0905  3400               	retlw	0
   408  0906                     __end_of__stringtab:	
   409  0906                     _octpowers:	
   410  0906  3401               	retlw	1
   411  0907  3400               	retlw	0
   412  0908  3408               	retlw	8
   413  0909  3400               	retlw	0
   414  090A  3440               	retlw	64
   415  090B  3400               	retlw	0
   416  090C  3400               	retlw	0
   417  090D  3402               	retlw	2
   418  090E  3400               	retlw	0
   419  090F  3410               	retlw	16
   420  0910  3400               	retlw	0
   421  0911  3480               	retlw	128
   422  0912                     __end_of_octpowers:	
   423  0912                     _dpowers:	
   424  0912  3401               	retlw	1
   425  0913  3400               	retlw	0
   426  0914  340A               	retlw	10
   427  0915  3400               	retlw	0
   428  0916  3464               	retlw	100
   429  0917  3400               	retlw	0
   430  0918  34E8               	retlw	232
   431  0919  3403               	retlw	3
   432  091A  3410               	retlw	16
   433  091B  3427               	retlw	39
   434  091C                     __end_of_dpowers:	
   435  091C                     _hexpowers:	
   436  091C  3401               	retlw	1
   437  091D  3400               	retlw	0
   438  091E  3410               	retlw	16
   439  091F  3400               	retlw	0
   440  0920  3400               	retlw	0
   441  0921  3401               	retlw	1
   442  0922  3400               	retlw	0
   443  0923  3410               	retlw	16
   444  0924                     __end_of_hexpowers:	
   445  0924                     _menuString:	
   446  0924  3400               	retlw	0
   447  0925  3441               	retlw	65
   448  0926  3477               	retlw	119
   449  0927  346E               	retlw	110
   450  0928  3469               	retlw	105
   451  0929  346E               	retlw	110
   452  092A  3467               	retlw	103
   453  092B  3400               	retlw	0
   454  092C  3457               	retlw	87
   455  092D  3469               	retlw	105
   456  092E  346E               	retlw	110
   457  092F  3474               	retlw	116
   458  0930  3465               	retlw	101
   459  0931  3472               	retlw	114
   460  0932  3400               	retlw	0
   461  0933  3441               	retlw	65
   462  0934  346C               	retlw	108
   463  0935  3461               	retlw	97
   464  0936  3472               	retlw	114
   465  0937  346D               	retlw	109
   466  0938  3400               	retlw	0
   467  0939  3444               	retlw	68
   468  093A  3461               	retlw	97
   469  093B  3479               	retlw	121
   470  093C  3420               	retlw	32
   471  093D  3461               	retlw	97
   472  093E  346E               	retlw	110
   473  093F  3464               	retlw	100
   474  0940  3420               	retlw	32
   475  0941  344E               	retlw	78
   476  0942  3469               	retlw	105
   477  0943  3467               	retlw	103
   478  0944  3468               	retlw	104
   479  0945  3474               	retlw	116
   480  0946  3400               	retlw	0
   481  0947  3442               	retlw	66
   482  0948  3461               	retlw	97
   483  0949  3463               	retlw	99
   484  094A  346B               	retlw	107
   485  094B  346C               	retlw	108
   486  094C  3469               	retlw	105
   487  094D  3467               	retlw	103
   488  094E  3468               	retlw	104
   489  094F  3474               	retlw	116
   490  0950  3400               	retlw	0
   491  0951  3445               	retlw	69
   492  0952  3478               	retlw	120
   493  0953  3469               	retlw	105
   494  0954  3474               	retlw	116
   495  0955  3400               	retlw	0
   496  0956  3400               	retlw	0
   497  0957                     __end_of_menuString:	
   498  0957                     _statusString2:	
   499  0957  345A               	retlw	90
   500  0958  346F               	retlw	111
   501  0959  346E               	retlw	110
   502  095A  3420               	retlw	32
   503  095B  343A               	retlw	58
   504  095C  3425               	retlw	37
   505  095D  3434               	retlw	52
   506  095E  3464               	retlw	100
   507  095F  3420               	retlw	32
   508  0960  3425               	retlw	37
   509  0961  3463               	retlw	99
   510  0962  3425               	retlw	37
   511  0963  3463               	retlw	99
   512  0964  3425               	retlw	37
   513  0965  3463               	retlw	99
   514  0966  3425               	retlw	37
   515  0967  3463               	retlw	99
   516  0968  3425               	retlw	37
   517  0969  3463               	retlw	99
   518  096A  3400               	retlw	0
   519  096B                     __end_of_statusString2:	
   520  096B                     _statusString1:	
   521  096B  3457               	retlw	87
   522  096C  3469               	retlw	105
   523  096D  346E               	retlw	110
   524  096E  3464               	retlw	100
   525  096F  343A               	retlw	58
   526  0970  3425               	retlw	37
   527  0971  3434               	retlw	52
   528  0972  3464               	retlw	100
   529  0973  3420               	retlw	32
   530  0974  3420               	retlw	32
   531  0975  3420               	retlw	32
   532  0976  3461               	retlw	97
   533  0977  3465               	retlw	101
   534  0978  3473               	retlw	115
   535  0979  3477               	retlw	119
   536  097A  3400               	retlw	0
   537  097B                     __end_of_statusString1:	
   538  001F                     _ADCON0bits	set	31
   539  001E                     _ADRESH	set	30
   540  000B                     _INTCONbits	set	11
   541  000C                     _PIR1bits	set	12
   542  0005                     _PORTA	set	5
   543  0005                     _PORTAbits	set	5
   544  0006                     _PORTB	set	6
   545  0006                     _PORTBbits	set	6
   546  0007                     _PORTC	set	7
   547  0007                     _PORTCbits	set	7
   548  0010                     _T1CONbits	set	16
   549  0012                     _T2CON	set	18
   550  0001                     _TMR0	set	1
   551  000F                     _TMR1H	set	15
   552  000E                     _TMR1L	set	14
   553  0019                     _TXREG	set	25
   554  00C7                     _SPEN	set	199
   555  009E                     _ADRESL	set	158
   556  0096                     _IOCAbits	set	150
   557  0081                     _OPTION_REGbits	set	129
   558  008F                     _OSCCONbits	set	143
   559  008C                     _PIE1bits	set	140
   560  0092                     _PR2	set	146
   561  0099                     _SPBRG	set	153
   562  009A                     _SPBRGH	set	154
   563  0085                     _TRISA	set	133
   564  0086                     _TRISB	set	134
   565  0086                     _TRISBbits	set	134
   566  0087                     _TRISC	set	135
   567  0087                     _TRISCbits	set	135
   568  0095                     _WPUAbits	set	149
   569  04DB                     _BRG16	set	1243
   570  04C2                     _BRGH	set	1218
   571  04C4                     _SYNC	set	1220
   572  04C1                     _TRMT	set	1217
   573  04C5                     _TXEN	set	1221
   574  011E                     _ANSEL	set	286
   575  011F                     _ANSELH	set	287
   576  0119                     _CM1CON0	set	281
   577  011A                     _CM2CON0	set	282
   578  097B                     __stringdata:	
   579  097B                     STR_4:	
   580  097B  3430               	retlw	48	;'0'
   581  097C  3431               	retlw	49	;'1'
   582  097D  3432               	retlw	50	;'2'
   583  097E  3433               	retlw	51	;'3'
   584  097F  3434               	retlw	52	;'4'
   585  0980  3435               	retlw	53	;'5'
   586  0981  3436               	retlw	54	;'6'
   587  0982  3437               	retlw	55	;'7'
   588  0983  3438               	retlw	56	;'8'
   589  0984  3439               	retlw	57	;'9'
   590  0985  3441               	retlw	65	;'A'
   591  0986  3442               	retlw	66	;'B'
   592  0987  3443               	retlw	67	;'C'
   593  0988  3444               	retlw	68	;'D'
   594  0989  3445               	retlw	69	;'E'
   595  098A  3446               	retlw	70	;'F'
   596  098B  3400               	retlw	0
   597  098C                     STR_5:	
   598  098C  3430               	retlw	48	;'0'
   599  098D  3431               	retlw	49	;'1'
   600  098E  3432               	retlw	50	;'2'
   601  098F  3433               	retlw	51	;'3'
   602  0990  3434               	retlw	52	;'4'
   603  0991  3435               	retlw	53	;'5'
   604  0992  3436               	retlw	54	;'6'
   605  0993  3437               	retlw	55	;'7'
   606  0994  3438               	retlw	56	;'8'
   607  0995  3439               	retlw	57	;'9'
   608  0996  3461               	retlw	97	;'a'
   609  0997  3462               	retlw	98	;'b'
   610  0998  3463               	retlw	99	;'c'
   611  0999  3464               	retlw	100	;'d'
   612  099A  3465               	retlw	101	;'e'
   613  099B  3466               	retlw	102	;'f'
   614  099C  3400               	retlw	0
   615  099D                     STR_1:	
   616  099D  3425               	retlw	37	;'%'
   617  099E  3434               	retlw	52	;'4'
   618  099F  3464               	retlw	100	;'d'
   619  09A0  343B               	retlw	59	;';'
   620  09A1  3425               	retlw	37	;'%'
   621  09A2  3434               	retlw	52	;'4'
   622  09A3  3464               	retlw	100	;'d'
   623  09A4  343B               	retlw	59	;';'
   624  09A5  3425               	retlw	37	;'%'
   625  09A6  3434               	retlw	52	;'4'
   626  09A7  3464               	retlw	100	;'d'
   627  09A8  340D               	retlw	13
   628  09A9  340A               	retlw	10
   629  09AA  3400               	retlw	0
   630  09AB                     STR_3:	
   631  09AB  3443               	retlw	67	;'C'
   632  09AC  346F               	retlw	111	;'o'
   633  09AD  346E               	retlw	110	;'n'
   634  09AE  3466               	retlw	102	;'f'
   635  09AF  3469               	retlw	105	;'i'
   636  09B0  3467               	retlw	103	;'g'
   637  09B1  3475               	retlw	117	;'u'
   638  09B2  3472               	retlw	114	;'r'
   639  09B3  3465               	retlw	101	;'e'
   640  09B4  3400               	retlw	0
   641  09B5                     STR_2:	
   642  09B5  3458               	retlw	88	;'X'
   643  09B6  3400               	retlw	0
   644  09B7                     __end_of__stringdata:	
   645                           
   646                           ; #config settings
   647  0000                     
   648                           	psect	cinit
   649  07E0                     start_initialization:	
   650  07E0                     __initialization:	
   651                           
   652                           ; Clear objects allocated to COMMON
   653  07E0  01FB               	clrf	__pbssCOMMON& (0+127)
   654  07E1  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   655  07E2  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
   656                           
   657                           ; Clear objects allocated to BANK0
   658  07E3  1383               	bcf	3,7	;select IRP bank0
   659  07E4  3066               	movlw	low __pbssBANK0
   660  07E5  0084               	movwf	4
   661  07E6  306F               	movlw	low (__pbssBANK0+9)
   662  07E7  158A  225D  118A   	fcall	clear_ram
   663                           
   664                           ; Clear objects allocated to BANK1
   665  07EA  30A0               	movlw	low __pbssBANK1
   666  07EB  0084               	movwf	4
   667  07EC  30BE               	movlw	low (__pbssBANK1+30)
   668  07ED  158A  225D         	fcall	clear_ram
   669  07EF                     end_of_initialization:	
   670                           ;End of C runtime variable initialization code
   671                           
   672  07EF                     __end_of__initialization:	
   673  07EF  0183               	clrf	3
   674  07F0  118A  2F4C         	ljmp	_main	;jump to C main() function
   675                           
   676                           	psect	bssCOMMON
   677  007B                     __pbssCOMMON:	
   678  007B                     _bitsReceived:	
   679  007B                     	ds	1
   680  007C                     _dataBlock:	
   681  007C                     	ds	1
   682  007D                     _encoder_A_prev:	
   683  007D                     	ds	1
   684                           
   685                           	psect	bssBANK0
   686  0066                     __pbssBANK0:	
   687  0066                     _lastWindPulse:	
   688  0066                     	ds	1
   689  0067                     _timer1Overload:	
   690  0067                     	ds	1
   691  0068                     _windCounter:	
   692  0068                     	ds	1
   693  0069                     _busBuffer:	
   694  0069                     	ds	3
   695  006C                     _busMessage:	
   696  006C                     	ds	3
   697                           
   698                           	psect	bssBANK1
   699  00A0                     __pbssBANK1:	
   700  00A0                     _systemStatus:	
   701  00A0                     	ds	23
   702  00B7                     _menuStatus:	
   703  00B7                     	ds	7
   704                           
   705                           	psect	clrtext
   706  0A5D                     clear_ram:	
   707                           ;	Called with FSR containing the base address, and
   708                           ;	W with the last address+1
   709                           
   710  0A5D  0064               	clrwdt	;clear the watchdog before getting into this loop
   711  0A5E                     clrloop:	
   712  0A5E  0180               	clrf	0	;clear RAM location pointed to by FSR
   713  0A5F  0A84               	incf	4,f	;increment pointer
   714  0A60  0604               	xorwf	4,w	;XOR with final address
   715  0A61  1903               	btfsc	3,2	;have we reached the end yet?
   716  0A62  3400               	retlw	0	;all done for this memory range, return
   717  0A63  0604               	xorwf	4,w	;XOR again to restore value
   718  0A64  2A5E               	goto	clrloop	;do the next byte
   719                           
   720                           	psect	cstackCOMMON
   721  0070                     __pcstackCOMMON:	
   722  0070                     ?_ConfigureOscillator:	
   723  0070                     ?_InitApp:	
   724                           ; 0 bytes @ 0x0
   725                           
   726  0070                     ?_init_lcd:	
   727                           ; 0 bytes @ 0x0
   728                           
   729  0070                     ?_writeCmdXLCD:	
   730                           ; 0 bytes @ 0x0
   731                           
   732  0070                     ?_clearLCD:	
   733                           ; 0 bytes @ 0x0
   734                           
   735  0070                     ?_setDDRamAddr:	
   736                           ; 0 bytes @ 0x0
   737                           
   738  0070                     ?_writeDataXLCD:	
   739                           ; 0 bytes @ 0x0
   740                           
   741  0070                     ?_isdigit:	
   742                           ; 0 bytes @ 0x0
   743                           
   744  0070                     ?_sendSerial:	
   745                           ; 1 bit 
   746                           
   747  0070                     ?_sendSeriotData:	
   748                           ; 0 bytes @ 0x0
   749                           
   750  0070                     ?_main:	
   751                           ; 0 bytes @ 0x0
   752                           
   753  0070                     ?_resetBuffer:	
   754                           ; 0 bytes @ 0x0
   755                           
   756  0070                     ??_resetBuffer:	
   757                           ; 0 bytes @ 0x0
   758                           
   759  0070                     ?_isr:	
   760                           ; 0 bytes @ 0x0
   761                           
   762  0070                     ?_putsXLCD:	
   763                           ; 0 bytes @ 0x0
   764                           
   765  0070                     ?_putrsXLCD:	
   766                           ; 0 bytes @ 0x0
   767                           
   768  0070                     ?_showMainMenu:	
   769                           ; 0 bytes @ 0x0
   770                           
   771  0070                     ?_controlBacklight:	
   772                           ; 0 bytes @ 0x0
   773                           
   774  0070                     ?_busyXLCD:	
   775                           ; 0 bytes @ 0x0
   776                           
   777  0070                     ?i1___wmul:	
   778                           ; 1 bytes @ 0x0
   779                           
   780  0070                     i1___wmul@multiplier:	
   781                           ; 2 bytes @ 0x0
   782                           
   783                           
   784                           ; 2 bytes @ 0x0
   785  0070                     	ds	2
   786  0072                     i1___wmul@multiplicand:	
   787                           
   788                           ; 2 bytes @ 0x2
   789  0072                     	ds	2
   790  0074                     ??i1___wmul:	
   791  0074                     i1___wmul@product:	
   792                           ; 0 bytes @ 0x4
   793                           
   794                           
   795                           ; 2 bytes @ 0x4
   796  0074                     	ds	2
   797  0076                     ??_isr:	
   798                           
   799                           ; 0 bytes @ 0x6
   800  0076                     	ds	4
   801  007A                     isr@timer:	
   802                           
   803                           ; 1 bytes @ 0xA
   804  007A                     	ds	1
   805                           
   806                           	psect	cstackBANK0
   807  0020                     __pcstackBANK0:	
   808  0020                     ??_ConfigureOscillator:	
   809  0020                     ??_InitApp:	
   810                           ; 0 bytes @ 0x0
   811                           
   812  0020                     ??_writeCmdXLCD:	
   813                           ; 0 bytes @ 0x0
   814                           
   815  0020                     ??_busyXLCD:	
   816                           ; 0 bytes @ 0x0
   817                           
   818  0020                     ??_setDDRamAddr:	
   819                           ; 0 bytes @ 0x0
   820                           
   821  0020                     ??_writeDataXLCD:	
   822                           ; 0 bytes @ 0x0
   823                           
   824  0020                     ??_isdigit:	
   825                           ; 0 bytes @ 0x0
   826                           
   827  0020                     ??_sendSerial:	
   828                           ; 0 bytes @ 0x0
   829                           
   830  0020                     ??_controlBacklight:	
   831                           ; 0 bytes @ 0x0
   832                           
   833  0020                     ?___bmul:	
   834                           ; 0 bytes @ 0x0
   835                           
   836  0020                     ?___wmul:	
   837                           ; 1 bytes @ 0x0
   838                           
   839  0020                     ?___lwdiv:	
   840                           ; 2 bytes @ 0x0
   841                           
   842  0020                     ?___ftpack:	
   843                           ; 2 bytes @ 0x0
   844                           
   845  0020                     sendSerial@text:	
   846                           ; 3 bytes @ 0x0
   847                           
   848  0020                     controlBacklight@systemStatus:	
   849                           ; 1 bytes @ 0x0
   850                           
   851  0020                     _isdigit$1192:	
   852                           ; 1 bytes @ 0x0
   853                           
   854  0020                     ___bmul@multiplicand:	
   855                           ; 1 bytes @ 0x0
   856                           
   857  0020                     ___wmul@multiplier:	
   858                           ; 1 bytes @ 0x0
   859                           
   860  0020                     ___lwdiv@divisor:	
   861                           ; 2 bytes @ 0x0
   862                           
   863  0020                     ___ftpack@arg:	
   864                           ; 2 bytes @ 0x0
   865                           
   866                           
   867                           ; 3 bytes @ 0x0
   868  0020                     	ds	1
   869  0021                     ??___bmul:	
   870  0021                     writeCmdXLCD@cmd:	
   871                           ; 0 bytes @ 0x1
   872                           
   873  0021                     writeDataXLCD@data:	
   874                           ; 1 bytes @ 0x1
   875                           
   876  0021                     setDDRamAddr@DDaddr:	
   877                           ; 1 bytes @ 0x1
   878                           
   879  0021                     isdigit@c:	
   880                           ; 1 bytes @ 0x1
   881                           
   882  0021                     ___bmul@product:	
   883                           ; 1 bytes @ 0x1
   884                           
   885                           
   886                           ; 1 bytes @ 0x1
   887  0021                     	ds	1
   888  0022                     ??_init_lcd:	
   889  0022                     ??_clearLCD:	
   890                           ; 0 bytes @ 0x2
   891                           
   892  0022                     ??_putsXLCD:	
   893                           ; 0 bytes @ 0x2
   894                           
   895  0022                     ??_putrsXLCD:	
   896                           ; 0 bytes @ 0x2
   897                           
   898  0022                     putsXLCD@data:	
   899                           ; 0 bytes @ 0x2
   900                           
   901  0022                     putrsXLCD@data:	
   902                           ; 1 bytes @ 0x2
   903                           
   904  0022                     ___bmul@multiplier:	
   905                           ; 1 bytes @ 0x2
   906                           
   907  0022                     ___wmul@multiplicand:	
   908                           ; 1 bytes @ 0x2
   909                           
   910  0022                     ___lwdiv@dividend:	
   911                           ; 2 bytes @ 0x2
   912                           
   913                           
   914                           ; 2 bytes @ 0x2
   915  0022                     	ds	1
   916  0023                     ?_putrsXLCDElement:	
   917  0023                     putrsXLCDElement@element:	
   918                           ; 0 bytes @ 0x3
   919                           
   920  0023                     ___ftpack@exp:	
   921                           ; 1 bytes @ 0x3
   922                           
   923                           
   924                           ; 1 bytes @ 0x3
   925  0023                     	ds	1
   926  0024                     ??_putrsXLCDElement:	
   927  0024                     ??___wmul:	
   928                           ; 0 bytes @ 0x4
   929                           
   930  0024                     ??___lwdiv:	
   931                           ; 0 bytes @ 0x4
   932                           
   933  0024                     putrsXLCDElement@currentElement:	
   934                           ; 0 bytes @ 0x4
   935                           
   936  0024                     ___ftpack@sign:	
   937                           ; 1 bytes @ 0x4
   938                           
   939  0024                     ___wmul@product:	
   940                           ; 1 bytes @ 0x4
   941                           
   942  0024                     ___lwdiv@quotient:	
   943                           ; 2 bytes @ 0x4
   944                           
   945                           
   946                           ; 2 bytes @ 0x4
   947  0024                     	ds	1
   948  0025                     ??___ftpack:	
   949  0025                     putrsXLCDElement@data:	
   950                           ; 0 bytes @ 0x5
   951                           
   952                           
   953                           ; 1 bytes @ 0x5
   954  0025                     	ds	1
   955  0026                     ?_showConfigureBacklight:	
   956  0026                     ??_showMainMenu:	
   957                           ; 0 bytes @ 0x6
   958                           
   959  0026                     showConfigureBacklight@menuStatus:	
   960                           ; 0 bytes @ 0x6
   961                           
   962  0026                     showMainMenu@menuStatus:	
   963                           ; 1 bytes @ 0x6
   964                           
   965  0026                     ___lwdiv@counter:	
   966                           ; 1 bytes @ 0x6
   967                           
   968                           
   969                           ; 1 bytes @ 0x6
   970  0026                     	ds	1
   971  0027                     ??_showConfigureBacklight:	
   972  0027                     ?___lwmod:	
   973                           ; 0 bytes @ 0x7
   974                           
   975  0027                     showConfigureBacklight@systemStatus:	
   976                           ; 2 bytes @ 0x7
   977                           
   978  0027                     ___lwmod@divisor:	
   979                           ; 1 bytes @ 0x7
   980                           
   981                           
   982                           ; 2 bytes @ 0x7
   983  0027                     	ds	1
   984  0028                     ?___lwtoft:	
   985  0028                     showConfigureBacklight@i:	
   986                           ; 3 bytes @ 0x8
   987                           
   988  0028                     ___lwtoft@c:	
   989                           ; 1 bytes @ 0x8
   990                           
   991                           
   992                           ; 2 bytes @ 0x8
   993  0028                     	ds	1
   994  0029                     ___lwmod@dividend:	
   995                           
   996                           ; 2 bytes @ 0x9
   997  0029                     	ds	2
   998  002B                     ??___lwmod:	
   999  002B                     ??___lwtoft:	
  1000                           ; 0 bytes @ 0xB
  1001                           
  1002  002B                     ?___ftmul:	
  1003                           ; 0 bytes @ 0xB
  1004                           
  1005  002B                     ___lwmod@counter:	
  1006                           ; 3 bytes @ 0xB
  1007                           
  1008  002B                     ___ftmul@f1:	
  1009                           ; 1 bytes @ 0xB
  1010                           
  1011                           
  1012                           ; 3 bytes @ 0xB
  1013  002B                     	ds	1
  1014  002C                     ?_sprintf:	
  1015  002C                     sprintf@f:	
  1016                           ; 2 bytes @ 0xC
  1017                           
  1018                           
  1019                           ; 1 bytes @ 0xC
  1020  002C                     	ds	2
  1021  002E                     ___ftmul@f2:	
  1022                           
  1023                           ; 3 bytes @ 0xE
  1024  002E                     	ds	3
  1025  0031                     ??___ftmul:	
  1026                           
  1027                           ; 0 bytes @ 0x11
  1028  0031                     	ds	3
  1029  0034                     ___ftmul@exp:	
  1030                           
  1031                           ; 1 bytes @ 0x14
  1032  0034                     	ds	1
  1033  0035                     ___ftmul@f3_as_product:	
  1034                           
  1035                           ; 3 bytes @ 0x15
  1036  0035                     	ds	3
  1037  0038                     ___ftmul@cntr:	
  1038                           
  1039                           ; 1 bytes @ 0x18
  1040  0038                     	ds	1
  1041  0039                     ??_sprintf:	
  1042  0039                     ___ftmul@sign:	
  1043                           ; 0 bytes @ 0x19
  1044                           
  1045                           
  1046                           ; 1 bytes @ 0x19
  1047  0039                     	ds	1
  1048  003A                     ?___ftadd:	
  1049  003A                     ___ftadd@f1:	
  1050                           ; 3 bytes @ 0x1A
  1051                           
  1052                           
  1053                           ; 3 bytes @ 0x1A
  1054  003A                     	ds	2
  1055  003C                     _sprintf$1127:	
  1056                           
  1057                           ; 2 bytes @ 0x1C
  1058  003C                     	ds	1
  1059  003D                     ___ftadd@f2:	
  1060                           
  1061                           ; 3 bytes @ 0x1D
  1062  003D                     	ds	1
  1063  003E                     _sprintf$1128:	
  1064                           
  1065                           ; 2 bytes @ 0x1E
  1066  003E                     	ds	2
  1067  0040                     ??___ftadd:	
  1068  0040                     sprintf@idx:	
  1069                           ; 0 bytes @ 0x20
  1070                           
  1071                           
  1072                           ; 1 bytes @ 0x20
  1073  0040                     	ds	1
  1074  0041                     _sprintf$1134:	
  1075                           
  1076                           ; 1 bytes @ 0x21
  1077  0041                     	ds	1
  1078  0042                     sprintf@ap:	
  1079                           
  1080                           ; 1 bytes @ 0x22
  1081  0042                     	ds	1
  1082  0043                     sprintf@prec:	
  1083  0043                     ___ftadd@sign:	
  1084                           ; 1 bytes @ 0x23
  1085                           
  1086                           
  1087                           ; 1 bytes @ 0x23
  1088  0043                     	ds	1
  1089  0044                     ___ftadd@exp2:	
  1090  0044                     sprintf@width:	
  1091                           ; 1 bytes @ 0x24
  1092                           
  1093                           
  1094                           ; 2 bytes @ 0x24
  1095  0044                     	ds	1
  1096  0045                     ___ftadd@exp1:	
  1097                           
  1098                           ; 1 bytes @ 0x25
  1099  0045                     	ds	1
  1100  0046                     ?___fttol:	
  1101  0046                     sprintf@_val:	
  1102                           ; 4 bytes @ 0x26
  1103                           
  1104  0046                     ___fttol@f1:	
  1105                           ; 3 bytes @ 0x26
  1106                           
  1107                           
  1108                           ; 3 bytes @ 0x26
  1109  0046                     	ds	3
  1110  0049                     sprintf@c:	
  1111                           
  1112                           ; 1 bytes @ 0x29
  1113  0049                     	ds	1
  1114  004A                     ??___fttol:	
  1115  004A                     sprintf@sp:	
  1116                           ; 0 bytes @ 0x2A
  1117                           
  1118                           
  1119                           ; 1 bytes @ 0x2A
  1120  004A                     	ds	1
  1121  004B                     sprintf@flag:	
  1122                           
  1123                           ; 2 bytes @ 0x2B
  1124  004B                     	ds	2
  1125  004D                     ?_updateStatus:	
  1126  004D                     ??_sendSeriotData:	
  1127                           ; 0 bytes @ 0x2D
  1128                           
  1129  004D                     updateStatus@menuStatus:	
  1130                           ; 0 bytes @ 0x2D
  1131                           
  1132  004D                     ___fttol@sign1:	
  1133                           ; 1 bytes @ 0x2D
  1134                           
  1135  004D                     sendSeriotData@text:	
  1136                           ; 1 bytes @ 0x2D
  1137                           
  1138                           
  1139                           ; 18 bytes @ 0x2D
  1140  004D                     	ds	1
  1141  004E                     ??_updateStatus:	
  1142  004E                     ___fttol@lval:	
  1143                           ; 0 bytes @ 0x2E
  1144                           
  1145  004E                     updateStatus@textBuffer:	
  1146                           ; 4 bytes @ 0x2E
  1147                           
  1148                           
  1149                           ; 17 bytes @ 0x2E
  1150  004E                     	ds	4
  1151  0052                     ___fttol@exp1:	
  1152                           
  1153                           ; 1 bytes @ 0x32
  1154  0052                     	ds	13
  1155  005F                     updateStatus@systemStatus:	
  1156                           
  1157                           ; 1 bytes @ 0x3F
  1158  005F                     	ds	1
  1159  0060                     ?_updateCurrentScreen:	
  1160  0060                     ?_handleMainMenu:	
  1161                           ; 0 bytes @ 0x40
  1162                           
  1163  0060                     updateCurrentScreen@menuStatus:	
  1164                           ; 0 bytes @ 0x40
  1165                           
  1166  0060                     handleMainMenu@menuStatus:	
  1167                           ; 1 bytes @ 0x40
  1168                           
  1169                           
  1170                           ; 1 bytes @ 0x40
  1171  0060                     	ds	1
  1172  0061                     ??_updateCurrentScreen:	
  1173  0061                     ??_handleMainMenu:	
  1174                           ; 0 bytes @ 0x41
  1175                           
  1176  0061                     updateCurrentScreen@systemStatus:	
  1177                           ; 0 bytes @ 0x41
  1178                           
  1179  0061                     handleMainMenu@systemStatus:	
  1180                           ; 1 bytes @ 0x41
  1181                           
  1182                           
  1183                           ; 1 bytes @ 0x41
  1184  0061                     	ds	1
  1185  0062                     ?_turnLeft:	
  1186  0062                     ?_turnRight:	
  1187                           ; 0 bytes @ 0x42
  1188                           
  1189  0062                     ?_pressButton:	
  1190                           ; 0 bytes @ 0x42
  1191                           
  1192  0062                     turnRight@menuStatus:	
  1193                           ; 0 bytes @ 0x42
  1194                           
  1195  0062                     turnLeft@menuStatus:	
  1196                           ; 1 bytes @ 0x42
  1197                           
  1198  0062                     pressButton@menuStatus:	
  1199                           ; 1 bytes @ 0x42
  1200                           
  1201                           
  1202                           ; 1 bytes @ 0x42
  1203  0062                     	ds	1
  1204  0063                     ??_turnLeft:	
  1205  0063                     ??_turnRight:	
  1206                           ; 0 bytes @ 0x43
  1207                           
  1208  0063                     ??_pressButton:	
  1209                           ; 0 bytes @ 0x43
  1210                           
  1211  0063                     pressButton@systemStatus:	
  1212                           ; 0 bytes @ 0x43
  1213                           
  1214                           
  1215                           ; 1 bytes @ 0x43
  1216  0063                     	ds	2
  1217  0065                     turnRight@systemStatus:	
  1218  0065                     turnLeft@systemStatus:	
  1219                           ; 1 bytes @ 0x45
  1220                           
  1221                           
  1222                           ; 1 bytes @ 0x45
  1223  0065                     	ds	1
  1224  0066                     ??_main:	
  1225                           
  1226                           	psect	maintext
  1227  074C                     __pmaintext:	
  1228                           ; 0 bytes @ 0x46
  1229 ;;
  1230 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1231 ;;
  1232 ;; *************** function _main *****************
  1233 ;; Defined at:
  1234 ;;		line 143 in file "main.c"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;		None
  1237 ;; Auto vars:     Size  Location     Type
  1238 ;;		None
  1239 ;; Return value:  Size  Location     Type
  1240 ;;		None               void
  1241 ;; Registers used:
  1242 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1243 ;; Tracked objects:
  1244 ;;		On entry : 17F/0
  1245 ;;		On exit  : 160/20
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1248 ;;      Params:         0       0       0       0
  1249 ;;      Locals:         0       0       0       0
  1250 ;;      Temps:          0       0       0       0
  1251 ;;      Totals:         0       0       0       0
  1252 ;;Total ram usage:        0 bytes
  1253 ;; Hardware stack levels required when called:    8
  1254 ;; This function calls:
  1255 ;;		_ConfigureOscillator
  1256 ;;		_InitApp
  1257 ;;		_init_lcd
  1258 ;;		_turnLeft
  1259 ;;		_turnRight
  1260 ;;		_pressButton
  1261 ;;		___lwtoft
  1262 ;;		___ftmul
  1263 ;;		___ftadd
  1264 ;;		___fttol
  1265 ;;		_sendSeriotData
  1266 ;;		_updateStatus
  1267 ;; This function is called by:
  1268 ;;		Startup code after reset
  1269 ;; This function uses a non-reentrant model
  1270 ;;
  1271                           
  1272                           
  1273                           ;psect for function _main
  1274  074C                     _main:	
  1275                           
  1276                           ;main.c: 145: ConfigureOscillator();
  1277                           
  1278                           ; Regs used in _main: [allreg]
  1279  074C  158A  2265  118A   	fcall	_ConfigureOscillator
  1280                           
  1281                           ;main.c: 148: InitApp();
  1282  074F  158A  2218  118A   	fcall	_InitApp
  1283                           
  1284                           ;main.c: 150: init_lcd();
  1285  0752  118A  222B  118A   	fcall	_init_lcd
  1286                           
  1287                           ;main.c: 151: systemStatus.desiredBacklight = 15;
  1288  0755  300F               	movlw	15
  1289  0756  00B0               	movwf	(_systemStatus^(0+128)+16)
  1290                           
  1291                           ;main.c: 152: menuStatus.currentItem = 0x05;
  1292  0757  3005               	movlw	5
  1293  0758  00B7               	movwf	_menuStatus^(0+128)
  1294  0759                     l2941:	
  1295                           
  1296                           ;main.c: 154: if(systemStatus.buttonUp)
  1297  0759  0831               	movf	(_systemStatus^(0+128)+17),w
  1298  075A  1903               	btfsc	3,2
  1299  075B  2F65               	goto	l2947
  1300                           
  1301                           ;main.c: 155: {
  1302                           ;main.c: 156: turnLeft(&systemStatus, &menuStatus);
  1303  075C  30B7               	movlw	_menuStatus& (0+255)
  1304  075D  1283               	bcf	3,5	;RP0=0, select bank0
  1305  075E  00E2               	movwf	?_turnLeft
  1306  075F  30A0               	movlw	_systemStatus& (0+255)
  1307  0760  118A  20AF  118A   	fcall	_turnLeft
  1308                           
  1309                           ;main.c: 157: systemStatus.buttonUp = 0;
  1310  0763  1683               	bsf	3,5	;RP0=1, select bank1
  1311  0764  01B1               	clrf	(_systemStatus^(0+128)+17)
  1312  0765                     l2947:	
  1313                           
  1314                           ;main.c: 158: }
  1315                           ;main.c: 160: if(systemStatus.buttonDown)
  1316  0765  0832               	movf	(_systemStatus^(0+128)+18),w
  1317  0766  1903               	btfsc	3,2
  1318  0767  2F71               	goto	l2953
  1319                           
  1320                           ;main.c: 161: {
  1321                           ;main.c: 162: turnRight(&systemStatus, &menuStatus);
  1322  0768  30B7               	movlw	_menuStatus& (0+255)
  1323  0769  1283               	bcf	3,5	;RP0=0, select bank0
  1324  076A  00E2               	movwf	?_turnRight
  1325  076B  30A0               	movlw	_systemStatus& (0+255)
  1326  076C  118A  2072  118A   	fcall	_turnRight
  1327                           
  1328                           ;main.c: 163: systemStatus.buttonDown = 0;
  1329  076F  1683               	bsf	3,5	;RP0=1, select bank1
  1330  0770  01B2               	clrf	(_systemStatus^(0+128)+18)
  1331  0771                     l2953:	
  1332                           
  1333                           ;main.c: 164: }
  1334                           ;main.c: 166: if(systemStatus.buttonPush)
  1335  0771  0833               	movf	(_systemStatus^(0+128)+19),w
  1336  0772  1903               	btfsc	3,2
  1337  0773  2F7F               	goto	l2959
  1338                           
  1339                           ;main.c: 167: {
  1340                           ;main.c: 168: pressButton(&systemStatus, &menuStatus);
  1341  0774  30B7               	movlw	_menuStatus& (0+255)
  1342  0775  1283               	bcf	3,5	;RP0=0, select bank0
  1343  0776  00E2               	movwf	?_pressButton
  1344  0777  30A0               	movlw	_systemStatus& (0+255)
  1345  0778  118A  202F  118A   	fcall	_pressButton
  1346  077B                     l110:	
  1347                           ;main.c: 169: while(!PORTAbits.RA3);
  1348                           
  1349  077B  1D85               	btfss	5,3	;volatile
  1350  077C  2F7B               	goto	l110
  1351                           
  1352                           ;main.c: 170: systemStatus.buttonPush = 0;
  1353  077D  1683               	bsf	3,5	;RP0=1, select bank1
  1354  077E  01B3               	clrf	(_systemStatus^(0+128)+19)
  1355  077F                     l2959:	
  1356                           
  1357                           ;main.c: 171: }
  1358                           ;main.c: 173: if(systemStatus.valueChanged)
  1359  077F  0826               	movf	(_systemStatus^(0+128)+6),w
  1360  0780  1903               	btfsc	3,2
  1361  0781  2F59               	goto	l2941
  1362                           
  1363                           ;main.c: 174: {
  1364                           ;main.c: 175: systemStatus.windAvg = (uint16_t)(0.005f * systemStatus.wind + (1 - 0.005f
      +                          ) * systemStatus.windAvg);
  1365  0782  0823               	movf	((_systemStatus+1)^(0+128)+2),w
  1366  0783  1283               	bcf	3,5	;RP0=0, select bank0
  1367  0784  00A9               	movwf	?___lwtoft+1
  1368  0785  1683               	bsf	3,5	;RP0=1, select bank1
  1369  0786  0822               	movf	(_systemStatus^(0+128)+2),w
  1370  0787  1283               	bcf	3,5	;RP0=0, select bank0
  1371  0788  00A8               	movwf	?___lwtoft
  1372  0789  158A  2677  118A   	fcall	___lwtoft
  1373  078C  0828               	movf	?___lwtoft,w
  1374  078D  00AE               	movwf	?___ftmul+3
  1375  078E  0829               	movf	?___lwtoft+1,w
  1376  078F  00AF               	movwf	?___ftmul+4
  1377  0790  082A               	movf	?___lwtoft+2,w
  1378  0791  00B0               	movwf	?___ftmul+5
  1379  0792  30D7               	movlw	215
  1380  0793  00AB               	movwf	?___ftmul
  1381  0794  30A3               	movlw	163
  1382  0795  00AC               	movwf	?___ftmul+1
  1383  0796  303B               	movlw	59
  1384  0797  00AD               	movwf	?___ftmul+2
  1385  0798  158A  2687  118A   	fcall	___ftmul
  1386  079B  082B               	movf	?___ftmul,w
  1387  079C  00BD               	movwf	?___ftadd+3
  1388  079D  082C               	movf	?___ftmul+1,w
  1389  079E  00BE               	movwf	?___ftadd+4
  1390  079F  082D               	movf	?___ftmul+2,w
  1391  07A0  00BF               	movwf	?___ftadd+5
  1392  07A1  1683               	bsf	3,5	;RP0=1, select bank1
  1393  07A2  0821               	movf	(_systemStatus+1)^(0+128),w
  1394  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  1395  07A4  00A9               	movwf	?___lwtoft+1
  1396  07A5  1683               	bsf	3,5	;RP0=1, select bank1
  1397  07A6  0820               	movf	_systemStatus^(0+128),w
  1398  07A7  1283               	bcf	3,5	;RP0=0, select bank0
  1399  07A8  00A8               	movwf	?___lwtoft
  1400  07A9  158A  2677  118A   	fcall	___lwtoft
  1401  07AC  0828               	movf	?___lwtoft,w
  1402  07AD  00AE               	movwf	?___ftmul+3
  1403  07AE  0829               	movf	?___lwtoft+1,w
  1404  07AF  00AF               	movwf	?___ftmul+4
  1405  07B0  082A               	movf	?___lwtoft+2,w
  1406  07B1  00B0               	movwf	?___ftmul+5
  1407  07B2  30B8               	movlw	184
  1408  07B3  00AB               	movwf	?___ftmul
  1409  07B4  307E               	movlw	126
  1410  07B5  00AC               	movwf	?___ftmul+1
  1411  07B6  303F               	movlw	63
  1412  07B7  00AD               	movwf	?___ftmul+2
  1413  07B8  158A  2687  118A   	fcall	___ftmul
  1414  07BB  082B               	movf	?___ftmul,w
  1415  07BC  00BA               	movwf	?___ftadd
  1416  07BD  082C               	movf	?___ftmul+1,w
  1417  07BE  00BB               	movwf	?___ftadd+1
  1418  07BF  082D               	movf	?___ftmul+2,w
  1419  07C0  00BC               	movwf	?___ftadd+2
  1420  07C1  158A  2702  118A   	fcall	___ftadd
  1421  07C4  083A               	movf	?___ftadd,w
  1422  07C5  00C6               	movwf	?___fttol
  1423  07C6  083B               	movf	?___ftadd+1,w
  1424  07C7  00C7               	movwf	?___fttol+1
  1425  07C8  083C               	movf	?___ftadd+2,w
  1426  07C9  00C8               	movwf	?___fttol+2
  1427  07CA  158A  21B7  118A   	fcall	___fttol
  1428  07CD  0847               	movf	?___fttol+1,w
  1429  07CE  1683               	bsf	3,5	;RP0=1, select bank1
  1430  07CF  00A1               	movwf	(_systemStatus+1)^(0+128)
  1431  07D0  1283               	bcf	3,5	;RP0=0, select bank0
  1432  07D1  0846               	movf	?___fttol,w
  1433  07D2  1683               	bsf	3,5	;RP0=1, select bank1
  1434  07D3  00A0               	movwf	_systemStatus^(0+128)
  1435                           
  1436                           ;main.c: 177: sendSeriotData();
  1437  07D4  118A  200F  118A   	fcall	_sendSeriotData
  1438                           
  1439                           ;main.c: 178: updateStatus(&systemStatus,&menuStatus);
  1440  07D7  30B7               	movlw	_menuStatus& (0+255)
  1441  07D8  00CD               	movwf	?_updateStatus
  1442  07D9  30A0               	movlw	_systemStatus& (0+255)
  1443  07DA  118A  213D  118A   	fcall	_updateStatus
  1444                           
  1445                           ;main.c: 179: systemStatus.valueChanged = 0;
  1446  07DD  1683               	bsf	3,5	;RP0=1, select bank1
  1447  07DE  01A6               	clrf	(_systemStatus^(0+128)+6)
  1448  07DF  2F59               	goto	l2941
  1449  07E0                     __end_of_main:	
  1450                           
  1451                           	psect	text739
  1452  000F                     __ptext739:	
  1453 ;; *************** function _sendSeriotData *****************
  1454 ;; Defined at:
  1455 ;;		line 132 in file "main.c"
  1456 ;; Parameters:    Size  Location     Type
  1457 ;;		None
  1458 ;; Auto vars:     Size  Location     Type
  1459 ;;  text           18   45[BANK0 ] unsigned char [18]
  1460 ;; Return value:  Size  Location     Type
  1461 ;;		None               void
  1462 ;; Registers used:
  1463 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1464 ;; Tracked objects:
  1465 ;;		On entry : 60/20
  1466 ;;		On exit  : 160/0
  1467 ;;		Unchanged: FFE00/0
  1468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1469 ;;      Params:         0       0       0       0
  1470 ;;      Locals:         0      18       0       0
  1471 ;;      Temps:          0       0       0       0
  1472 ;;      Totals:         0      18       0       0
  1473 ;;Total ram usage:       18 bytes
  1474 ;; Hardware stack levels used:    1
  1475 ;; Hardware stack levels required when called:    4
  1476 ;; This function calls:
  1477 ;;		_sprintf
  1478 ;;		_sendSerial
  1479 ;; This function is called by:
  1480 ;;		_main
  1481 ;; This function uses a non-reentrant model
  1482 ;;
  1483                           
  1484                           
  1485                           ;psect for function _sendSeriotData
  1486  000F                     _sendSeriotData:	
  1487                           
  1488                           ;main.c: 133: char text[18];
  1489                           ;main.c: 134: sprintf(text,"%4d;%4d;%4d\r\n",systemStatus.wind,systemStatus.windAvg,syst
      +                          emStatus.sun);
  1490                           
  1491                           ; Regs used in _sendSeriotData: [allreg]
  1492  000F  3098               	movlw	(STR_1-__stringbase)& (0+255)
  1493  0010  1283               	bcf	3,5	;RP0=0, select bank0
  1494  0011  00AC               	movwf	?_sprintf
  1495  0012  1683               	bsf	3,5	;RP0=1, select bank1
  1496  0013  0823               	movf	((_systemStatus+1)^(0+128)+2),w
  1497  0014  1283               	bcf	3,5	;RP0=0, select bank0
  1498  0015  00AE               	movwf	?_sprintf+2
  1499  0016  1683               	bsf	3,5	;RP0=1, select bank1
  1500  0017  0822               	movf	(_systemStatus^(0+128)+2),w
  1501  0018  1283               	bcf	3,5	;RP0=0, select bank0
  1502  0019  00AD               	movwf	?_sprintf+1
  1503  001A  1683               	bsf	3,5	;RP0=1, select bank1
  1504  001B  0821               	movf	(_systemStatus+1)^(0+128),w
  1505  001C  1283               	bcf	3,5	;RP0=0, select bank0
  1506  001D  00B0               	movwf	?_sprintf+4
  1507  001E  1683               	bsf	3,5	;RP0=1, select bank1
  1508  001F  0820               	movf	_systemStatus^(0+128),w
  1509  0020  1283               	bcf	3,5	;RP0=0, select bank0
  1510  0021  00AF               	movwf	?_sprintf+3
  1511  0022  1683               	bsf	3,5	;RP0=1, select bank1
  1512  0023  0825               	movf	((_systemStatus+1)^(0+128)+4),w
  1513  0024  1283               	bcf	3,5	;RP0=0, select bank0
  1514  0025  00B2               	movwf	?_sprintf+6
  1515  0026  1683               	bsf	3,5	;RP0=1, select bank1
  1516  0027  0824               	movf	(_systemStatus^(0+128)+4),w
  1517  0028  1283               	bcf	3,5	;RP0=0, select bank0
  1518  0029  00B1               	movwf	?_sprintf+5
  1519  002A  304D               	movlw	sendSeriotData@text& (0+255)
  1520  002B  2324  118A         	fcall	_sprintf
  1521                           
  1522                           ;main.c: 135: sendSerial(text);
  1523  002D  304D               	movlw	sendSeriotData@text& (0+255)
  1524  002E  2F3C               	ljmp	_sendSerial
  1525  002F                     __end_of_sendSeriotData:	
  1526  002F                     __ptext746:	
  1527 ;; *************** function _pressButton *****************
  1528 ;; Defined at:
  1529 ;;		line 165 in file "menu.c"
  1530 ;; Parameters:    Size  Location     Type
  1531 ;;  systemStatus    1    wreg     PTR struct SystemStatus
  1532 ;;		 -> systemStatus(23), 
  1533 ;;  menuStatus      1   66[BANK0 ] PTR struct MenuStatus
  1534 ;;		 -> menuStatus(7), 
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;  systemStatus    1   67[BANK0 ] PTR struct SystemStatus
  1537 ;;		 -> systemStatus(23), 
  1538 ;; Return value:  Size  Location     Type
  1539 ;;		None               void
  1540 ;; Registers used:
  1541 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1542 ;; Tracked objects:
  1543 ;;		On entry : 60/0
  1544 ;;		On exit  : 160/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1547 ;;      Params:         0       1       0       0
  1548 ;;      Locals:         0       1       0       0
  1549 ;;      Temps:          0       0       0       0
  1550 ;;      Totals:         0       2       0       0
  1551 ;;Total ram usage:        2 bytes
  1552 ;; Hardware stack levels used:    1
  1553 ;; Hardware stack levels required when called:    7
  1554 ;; This function calls:
  1555 ;;		_controlBacklight
  1556 ;;		_handleMainMenu
  1557 ;; This function is called by:
  1558 ;;		_main
  1559 ;; This function uses a non-reentrant model
  1560 ;;
  1561                           
  1562                           
  1563                           ;psect for function _pressButton
  1564  002F                     _pressButton:	
  1565                           
  1566                           ; Regs used in _pressButton: [allreg]
  1567                           ;pressButton@systemStatus stored from wreg
  1568  002F  00E3               	movwf	pressButton@systemStatus
  1569                           
  1570                           ;menu.c: 166: controlBacklight(systemStatus);
  1571  0030  20F0  118A         	fcall	_controlBacklight
  1572                           
  1573                           ;menu.c: 167: if (menuStatus->currentAwningItem == 0) {
  1574  0032  0A62               	incf	pressButton@menuStatus,w
  1575  0033  0084               	movwf	4
  1576  0034  0880               	movf	0,f
  1577  0035  1D03               	skipz
  1578  0036  0008               	return
  1579                           
  1580                           ;menu.c: 168: handleMainMenu(systemStatus,menuStatus);
  1581  0037  0862               	movf	pressButton@menuStatus,w
  1582  0038  00E0               	movwf	?_handleMainMenu
  1583  0039  0863               	movf	pressButton@systemStatus,w
  1584  003A  283B               	ljmp	_handleMainMenu
  1585  003B                     __end_of_pressButton:	
  1586                           ;menu.c: 169: } else {
  1587                           
  1588  003B                     __ptext750:	
  1589 ;; *************** function _handleMainMenu *****************
  1590 ;; Defined at:
  1591 ;;		line 92 in file "menu.c"
  1592 ;; Parameters:    Size  Location     Type
  1593 ;;  systemStatus    1    wreg     PTR struct SystemStatus
  1594 ;;		 -> systemStatus(23), 
  1595 ;;  menuStatus      1   64[BANK0 ] PTR struct MenuStatus
  1596 ;;		 -> menuStatus(7), 
  1597 ;; Auto vars:     Size  Location     Type
  1598 ;;  systemStatus    1   65[BANK0 ] PTR struct SystemStatus
  1599 ;;		 -> systemStatus(23), 
  1600 ;; Return value:  Size  Location     Type
  1601 ;;		None               void
  1602 ;; Registers used:
  1603 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1604 ;; Tracked objects:
  1605 ;;		On entry : 160/0
  1606 ;;		On exit  : 160/0
  1607 ;;		Unchanged: 0/0
  1608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1609 ;;      Params:         0       1       0       0
  1610 ;;      Locals:         0       1       0       0
  1611 ;;      Temps:          0       0       0       0
  1612 ;;      Totals:         0       2       0       0
  1613 ;;Total ram usage:        2 bytes
  1614 ;; Hardware stack levels used:    1
  1615 ;; Hardware stack levels required when called:    6
  1616 ;; This function calls:
  1617 ;;		_showConfigureBacklight
  1618 ;;		_updateStatus
  1619 ;; This function is called by:
  1620 ;;		_pressButton
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           
  1625                           ;psect for function _handleMainMenu
  1626  003B                     _handleMainMenu:	
  1627                           
  1628                           ; Regs used in _handleMainMenu: [allreg]
  1629                           ;handleMainMenu@systemStatus stored from wreg
  1630  003B  00E1               	movwf	handleMainMenu@systemStatus
  1631                           
  1632                           ;menu.c: 113: break;
  1633                           
  1634                           ;menu.c: 93: switch (menuStatus->currentItem) {
  1635  003C  0860               	movf	handleMainMenu@menuStatus,w
  1636  003D  0084               	movwf	4
  1637  003E  0800               	movf	0,w
  1638                           
  1639                           ; Switch size 1, requested type "speed"
  1640                           ; Number of cases is 6, Range of values is 1 to 6
  1641                           ; switch strategies available:
  1642                           ; Name         Instructions Cycles
  1643                           ; simple_byte           19    10 (average)
  1644                           ; direct_byte           22    10 (fixed)
  1645                           ; jumptable            263     9 (fixed)
  1646                           ;	Chosen strategy is simple_byte
  1647  003F  3A01               	xorlw	1	; case 1
  1648  0040  1903               	skipnz
  1649  0041  2871               	goto	l381
  1650  0042  3A03               	xorlw	3	; case 2
  1651  0043  1903               	skipnz
  1652  0044  2871               	goto	l381
  1653  0045  3A01               	xorlw	1	; case 3
  1654  0046  1903               	skipnz
  1655  0047  2871               	goto	l381
  1656  0048  3A07               	xorlw	7	; case 4
  1657  0049  1903               	skipnz
  1658  004A  2871               	goto	l381
  1659  004B  3A01               	xorlw	1	; case 5
  1660  004C  1903               	skipnz
  1661  004D  2852               	goto	l3355
  1662  004E  3A03               	xorlw	3	; case 6
  1663  004F  1903               	skipnz
  1664  0050  286A               	goto	l3365
  1665  0051  2871               	goto	l381
  1666  0052                     l3355:	
  1667                           
  1668                           ;menu.c: 104: menuStatus->selected = 1;
  1669  0052  0860               	movf	handleMainMenu@menuStatus,w
  1670  0053  3E03               	addlw	3
  1671  0054  0084               	movwf	4
  1672  0055  0180               	clrf	0
  1673  0056  0A80               	incf	0,f
  1674                           
  1675                           ;menu.c: 105: menuStatus->changeValue = &systemStatus->desiredBacklight;
  1676  0057  0860               	movf	handleMainMenu@menuStatus,w
  1677  0058  3E04               	addlw	4
  1678  0059  0084               	movwf	4
  1679  005A  0861               	movf	handleMainMenu@systemStatus,w
  1680  005B  3E10               	addlw	16
  1681  005C  0080               	movwf	0
  1682                           
  1683                           ;menu.c: 106: menuStatus->minValue = 0;
  1684  005D  0860               	movf	handleMainMenu@menuStatus,w
  1685  005E  3E06               	addlw	6
  1686  005F  0084               	movwf	4
  1687  0060  0180               	clrf	0
  1688                           
  1689                           ;menu.c: 107: menuStatus->maxValue = 15;
  1690  0061  0860               	movf	handleMainMenu@menuStatus,w
  1691  0062  3E05               	addlw	5
  1692  0063  0084               	movwf	4
  1693  0064  300F               	movlw	15
  1694  0065  0080               	movwf	0
  1695                           
  1696                           ;menu.c: 108: showConfigureBacklight(systemStatus,menuStatus);
  1697  0066  0860               	movf	handleMainMenu@menuStatus,w
  1698  0067  00A6               	movwf	?_showConfigureBacklight
  1699  0068  0861               	movf	handleMainMenu@systemStatus,w
  1700  0069  2920               	ljmp	_showConfigureBacklight
  1701  006A                     l3365:	
  1702                           ;menu.c: 109: break;
  1703                           
  1704                           
  1705                           ;menu.c: 111: menuStatus->currentItem = 0;
  1706  006A  0860               	movf	handleMainMenu@menuStatus,w
  1707  006B  0084               	movwf	4
  1708  006C  0180               	clrf	0
  1709                           
  1710                           ;menu.c: 112: updateStatus(systemStatus,menuStatus);
  1711  006D  0860               	movf	handleMainMenu@menuStatus,w
  1712  006E  00CD               	movwf	?_updateStatus
  1713  006F  0861               	movf	handleMainMenu@systemStatus,w
  1714  0070  293D               	ljmp	_updateStatus
  1715  0071                     l381:	
  1716  0071  0008               	return
  1717  0072                     __end_of_handleMainMenu:	
  1718  0072                     __ptext745:	
  1719 ;; *************** function _turnRight *****************
  1720 ;; Defined at:
  1721 ;;		line 117 in file "menu.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;  systemStatus    1    wreg     PTR struct SystemStatus
  1724 ;;		 -> systemStatus(23), 
  1725 ;;  menuStatus      1   66[BANK0 ] PTR struct MenuStatus
  1726 ;;		 -> menuStatus(7), 
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;  systemStatus    1   69[BANK0 ] PTR struct SystemStatus
  1729 ;;		 -> systemStatus(23), 
  1730 ;; Return value:  Size  Location     Type
  1731 ;;		None               void
  1732 ;; Registers used:
  1733 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1734 ;; Tracked objects:
  1735 ;;		On entry : 60/0
  1736 ;;		On exit  : 60/0
  1737 ;;		Unchanged: 0/0
  1738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1739 ;;      Params:         0       1       0       0
  1740 ;;      Locals:         0       1       0       0
  1741 ;;      Temps:          0       2       0       0
  1742 ;;      Totals:         0       4       0       0
  1743 ;;Total ram usage:        4 bytes
  1744 ;; Hardware stack levels used:    1
  1745 ;; Hardware stack levels required when called:    7
  1746 ;; This function calls:
  1747 ;;		_controlBacklight
  1748 ;;		_showMainMenu
  1749 ;;		_updateCurrentScreen
  1750 ;; This function is called by:
  1751 ;;		_main
  1752 ;; This function uses a non-reentrant model
  1753 ;;
  1754                           
  1755                           
  1756                           ;psect for function _turnRight
  1757  0072                     _turnRight:	
  1758                           
  1759                           ; Regs used in _turnRight: [allreg]
  1760                           ;turnRight@systemStatus stored from wreg
  1761  0072  00E5               	movwf	turnRight@systemStatus
  1762                           
  1763                           ;menu.c: 118: controlBacklight(systemStatus);
  1764  0073  20F0  118A         	fcall	_controlBacklight
  1765                           
  1766                           ;menu.c: 120: if (menuStatus->currentAwningItem == 0 && menuStatus->selected == 0) {
  1767  0075  0A62               	incf	turnRight@menuStatus,w
  1768  0076  0084               	movwf	4
  1769  0077  0880               	movf	0,f
  1770  0078  1D03               	skipz
  1771  0079  288F               	goto	l3147
  1772  007A  0862               	movf	turnRight@menuStatus,w
  1773  007B  3E03               	addlw	3
  1774  007C  0084               	movwf	4
  1775  007D  0880               	movf	0,f
  1776  007E  1D03               	skipz
  1777  007F  288F               	goto	l3147
  1778                           
  1779                           ;menu.c: 122: if (menuStatus->currentItem == 6) {
  1780  0080  0862               	movf	turnRight@menuStatus,w
  1781  0081  0084               	movwf	4
  1782  0082  0800               	movf	0,w
  1783  0083  3A06               	xorlw	6
  1784  0084  1D03               	skipz
  1785  0085  288A               	goto	l3143
  1786                           
  1787                           ;menu.c: 123: menuStatus->currentItem = 1;
  1788  0086  0862               	movf	turnRight@menuStatus,w
  1789  0087  0084               	movwf	4
  1790  0088  0180               	clrf	0
  1791  0089  288C               	goto	L1
  1792  008A                     l3143:	
  1793                           ;menu.c: 124: } else {
  1794                           
  1795                           
  1796                           ;menu.c: 125: menuStatus->currentItem++;
  1797  008A  0862               	movf	turnRight@menuStatus,w
  1798  008B  0084               	movwf	4
  1799  008C                     L1:	
  1800  008C  0A80               	incf	0,f
  1801                           
  1802                           ;menu.c: 126: }
  1803                           ;menu.c: 127: showMainMenu(menuStatus);
  1804  008D  0862               	movf	turnRight@menuStatus,w
  1805  008E  290F               	ljmp	_showMainMenu
  1806  008F                     l3147:	
  1807                           ;menu.c: 128: }
  1808                           
  1809                           
  1810                           ;menu.c: 129: else if(menuStatus->selected)
  1811  008F  0862               	movf	turnRight@menuStatus,w
  1812  0090  3E03               	addlw	3
  1813  0091  0084               	movwf	4
  1814  0092  0880               	movf	0,f
  1815  0093  1903               	skipnz
  1816  0094  0008               	return
  1817                           
  1818                           ;menu.c: 130: {
  1819                           ;menu.c: 131: if(*menuStatus->changeValue < menuStatus->maxValue)
  1820  0095  0862               	movf	turnRight@menuStatus,w
  1821  0096  3E05               	addlw	5
  1822  0097  0084               	movwf	4
  1823  0098  0800               	movf	0,w
  1824  0099  00E3               	movwf	??_turnRight
  1825  009A  0862               	movf	turnRight@menuStatus,w
  1826  009B  3E04               	addlw	4
  1827  009C  0084               	movwf	4
  1828  009D  0800               	movf	0,w
  1829  009E  0084               	movwf	4
  1830  009F  0800               	movf	0,w
  1831  00A0  00E4               	movwf	??_turnRight+1
  1832  00A1  0863               	movf	??_turnRight,w
  1833  00A2  0264               	subwf	??_turnRight+1,w
  1834  00A3  1803               	skipnc
  1835  00A4  0008               	return
  1836                           
  1837                           ;menu.c: 132: {
  1838                           ;menu.c: 133: (*menuStatus->changeValue)++;
  1839  00A5  0862               	movf	turnRight@menuStatus,w
  1840  00A6  3E04               	addlw	4
  1841  00A7  0084               	movwf	4
  1842  00A8  0800               	movf	0,w
  1843  00A9  0084               	movwf	4
  1844  00AA  0A80               	incf	0,f
  1845                           
  1846                           ;menu.c: 134: updateCurrentScreen(systemStatus,menuStatus);
  1847  00AB  0862               	movf	turnRight@menuStatus,w
  1848  00AC  00E0               	movwf	?_updateCurrentScreen
  1849  00AD  0865               	movf	turnRight@systemStatus,w
  1850  00AE  28F7               	ljmp	_updateCurrentScreen
  1851  00AF                     __end_of_turnRight:	
  1852  00AF                     __ptext744:	
  1853 ;; *************** function _turnLeft *****************
  1854 ;; Defined at:
  1855 ;;		line 141 in file "menu.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;  systemStatus    1    wreg     PTR struct SystemStatus
  1858 ;;		 -> systemStatus(23), 
  1859 ;;  menuStatus      1   66[BANK0 ] PTR struct MenuStatus
  1860 ;;		 -> menuStatus(7), 
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;  systemStatus    1   69[BANK0 ] PTR struct SystemStatus
  1863 ;;		 -> systemStatus(23), 
  1864 ;; Return value:  Size  Location     Type
  1865 ;;		None               void
  1866 ;; Registers used:
  1867 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1868 ;; Tracked objects:
  1869 ;;		On entry : 60/0
  1870 ;;		On exit  : 60/0
  1871 ;;		Unchanged: 0/0
  1872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1873 ;;      Params:         0       1       0       0
  1874 ;;      Locals:         0       1       0       0
  1875 ;;      Temps:          0       2       0       0
  1876 ;;      Totals:         0       4       0       0
  1877 ;;Total ram usage:        4 bytes
  1878 ;; Hardware stack levels used:    1
  1879 ;; Hardware stack levels required when called:    7
  1880 ;; This function calls:
  1881 ;;		_controlBacklight
  1882 ;;		_showMainMenu
  1883 ;;		_updateCurrentScreen
  1884 ;; This function is called by:
  1885 ;;		_main
  1886 ;; This function uses a non-reentrant model
  1887 ;;
  1888                           
  1889                           
  1890                           ;psect for function _turnLeft
  1891  00AF                     _turnLeft:	
  1892                           
  1893                           ; Regs used in _turnLeft: [allreg]
  1894                           ;turnLeft@systemStatus stored from wreg
  1895  00AF  00E5               	movwf	turnLeft@systemStatus
  1896                           
  1897                           ;menu.c: 142: controlBacklight(systemStatus);
  1898  00B0  20F0  118A         	fcall	_controlBacklight
  1899                           
  1900                           ;menu.c: 143: if (menuStatus->currentAwningItem == 0 && menuStatus->selected == 0) {
  1901  00B2  0A62               	incf	turnLeft@menuStatus,w
  1902  00B3  0084               	movwf	4
  1903  00B4  0880               	movf	0,f
  1904  00B5  1D03               	skipz
  1905  00B6  28D0               	goto	l3125
  1906  00B7  0862               	movf	turnLeft@menuStatus,w
  1907  00B8  3E03               	addlw	3
  1908  00B9  0084               	movwf	4
  1909  00BA  0880               	movf	0,f
  1910  00BB  1D03               	skipz
  1911  00BC  28D0               	goto	l3125
  1912                           
  1913                           ;menu.c: 145: if (menuStatus->currentItem == 0 || menuStatus->currentItem == 1) {
  1914  00BD  0862               	movf	turnLeft@menuStatus,w
  1915  00BE  0084               	movwf	4
  1916  00BF  0880               	movf	0,f
  1917  00C0  1903               	skipnz
  1918  00C1  28C6               	goto	l3119
  1919  00C2  0862               	movf	turnLeft@menuStatus,w
  1920  00C3  0084               	movwf	4
  1921  00C4  0B00               	decfsz	0,w
  1922  00C5  28CB               	goto	l3121
  1923  00C6                     l3119:	
  1924                           
  1925                           ;menu.c: 146: menuStatus->currentItem = 6;
  1926  00C6  0862               	movf	turnLeft@menuStatus,w
  1927  00C7  0084               	movwf	4
  1928  00C8  3006               	movlw	6
  1929  00C9  0080               	movwf	0
  1930                           
  1931                           ;menu.c: 147: } else {
  1932  00CA  28CE               	goto	l3123
  1933  00CB                     l3121:	
  1934                           
  1935                           ;menu.c: 148: menuStatus->currentItem--;
  1936  00CB  0862               	movf	turnLeft@menuStatus,w
  1937  00CC  0084               	movwf	4
  1938  00CD  0380               	decf	0,f
  1939  00CE                     l3123:	
  1940                           
  1941                           ;menu.c: 149: }
  1942                           ;menu.c: 151: showMainMenu(menuStatus);
  1943  00CE  0862               	movf	turnLeft@menuStatus,w
  1944  00CF  290F               	ljmp	_showMainMenu
  1945  00D0                     l3125:	
  1946                           ;menu.c: 153: }
  1947                           
  1948                           
  1949                           ;menu.c: 154: else if(menuStatus->selected)
  1950  00D0  0862               	movf	turnLeft@menuStatus,w
  1951  00D1  3E03               	addlw	3
  1952  00D2  0084               	movwf	4
  1953  00D3  0880               	movf	0,f
  1954  00D4  1903               	skipnz
  1955  00D5  0008               	return
  1956                           
  1957                           ;menu.c: 155: {
  1958                           ;menu.c: 156: if(*menuStatus->changeValue > menuStatus->minValue)
  1959  00D6  0862               	movf	turnLeft@menuStatus,w
  1960  00D7  3E04               	addlw	4
  1961  00D8  0084               	movwf	4
  1962  00D9  0800               	movf	0,w
  1963  00DA  0084               	movwf	4
  1964  00DB  0800               	movf	0,w
  1965  00DC  00E3               	movwf	??_turnLeft
  1966  00DD  0862               	movf	turnLeft@menuStatus,w
  1967  00DE  3E06               	addlw	6
  1968  00DF  0084               	movwf	4
  1969  00E0  0800               	movf	0,w
  1970  00E1  00E4               	movwf	??_turnLeft+1
  1971  00E2  0863               	movf	??_turnLeft,w
  1972  00E3  0264               	subwf	??_turnLeft+1,w
  1973  00E4  1803               	skipnc
  1974  00E5  0008               	return
  1975                           
  1976                           ;menu.c: 157: {
  1977                           ;menu.c: 158: (*menuStatus->changeValue)--;
  1978  00E6  0862               	movf	turnLeft@menuStatus,w
  1979  00E7  3E04               	addlw	4
  1980  00E8  0084               	movwf	4
  1981  00E9  0800               	movf	0,w
  1982  00EA  0084               	movwf	4
  1983  00EB  0380               	decf	0,f
  1984                           
  1985                           ;menu.c: 159: updateCurrentScreen(systemStatus,menuStatus);
  1986  00EC  0862               	movf	turnLeft@menuStatus,w
  1987  00ED  00E0               	movwf	?_updateCurrentScreen
  1988  00EE  0865               	movf	turnLeft@systemStatus,w
  1989  00EF  28F7               	ljmp	_updateCurrentScreen
  1990  00F0                     __end_of_turnLeft:	
  1991  00F0                     __ptext748:	
  1992 ;; *************** function _controlBacklight *****************
  1993 ;; Defined at:
  1994 ;;		line 69 in file "menu.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;  systemStatus    1    wreg     PTR struct SystemStatus
  1997 ;;		 -> systemStatus(23), 
  1998 ;; Auto vars:     Size  Location     Type
  1999 ;;  systemStatus    1    0[BANK0 ] PTR struct SystemStatus
  2000 ;;		 -> systemStatus(23), 
  2001 ;; Return value:  Size  Location     Type
  2002 ;;		None               void
  2003 ;; Registers used:
  2004 ;;		wreg, fsr0l, fsr0h
  2005 ;; Tracked objects:
  2006 ;;		On entry : 60/0
  2007 ;;		On exit  : 160/0
  2008 ;;		Unchanged: FFE9F/0
  2009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2010 ;;      Params:         0       0       0       0
  2011 ;;      Locals:         0       1       0       0
  2012 ;;      Temps:          0       0       0       0
  2013 ;;      Totals:         0       1       0       0
  2014 ;;Total ram usage:        1 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; Hardware stack levels required when called:    2
  2017 ;; This function calls:
  2018 ;;		Nothing
  2019 ;; This function is called by:
  2020 ;;		_turnRight
  2021 ;;		_turnLeft
  2022 ;;		_pressButton
  2023 ;; This function uses a non-reentrant model
  2024 ;;
  2025                           
  2026                           
  2027                           ;psect for function _controlBacklight
  2028  00F0                     _controlBacklight:	
  2029                           
  2030                           ; Regs used in _controlBacklight: [wregfsr0]
  2031                           ;controlBacklight@systemStatus stored from wreg
  2032  00F0  00A0               	movwf	controlBacklight@systemStatus
  2033                           
  2034                           ;menu.c: 70: systemStatus->backlightOn = 0xff;
  2035  00F1  3E15               	addlw	21
  2036  00F2  0084               	movwf	4
  2037  00F3  30FF               	movlw	255
  2038  00F4  1383               	bcf	3,7	;select IRP bank0
  2039  00F5  0080               	movwf	0
  2040  00F6  0008               	return
  2041  00F7                     __end_of_controlBacklight:	
  2042  00F7                     __ptext749:	
  2043 ;; *************** function _updateCurrentScreen *****************
  2044 ;; Defined at:
  2045 ;;		line 73 in file "menu.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;  systemStatus    1    wreg     PTR struct SystemStatus
  2048 ;;		 -> systemStatus(23), 
  2049 ;;  menuStatus      1   64[BANK0 ] PTR struct MenuStatus
  2050 ;;		 -> menuStatus(7), 
  2051 ;; Auto vars:     Size  Location     Type
  2052 ;;  systemStatus    1   65[BANK0 ] PTR struct SystemStatus
  2053 ;;		 -> systemStatus(23), 
  2054 ;; Return value:  Size  Location     Type
  2055 ;;		None               void
  2056 ;; Registers used:
  2057 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2058 ;; Tracked objects:
  2059 ;;		On entry : 160/0
  2060 ;;		On exit  : 160/0
  2061 ;;		Unchanged: 0/0
  2062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2063 ;;      Params:         0       1       0       0
  2064 ;;      Locals:         0       1       0       0
  2065 ;;      Temps:          0       0       0       0
  2066 ;;      Totals:         0       2       0       0
  2067 ;;Total ram usage:        2 bytes
  2068 ;; Hardware stack levels used:    1
  2069 ;; Hardware stack levels required when called:    6
  2070 ;; This function calls:
  2071 ;;		_updateStatus
  2072 ;;		_showConfigureBacklight
  2073 ;; This function is called by:
  2074 ;;		_turnRight
  2075 ;;		_turnLeft
  2076 ;; This function uses a non-reentrant model
  2077 ;;
  2078                           
  2079                           
  2080                           ;psect for function _updateCurrentScreen
  2081  00F7                     _updateCurrentScreen:	
  2082                           
  2083                           ; Regs used in _updateCurrentScreen: [allreg]
  2084                           ;updateCurrentScreen@systemStatus stored from wreg
  2085  00F7  00E1               	movwf	updateCurrentScreen@systemStatus
  2086                           
  2087                           ;menu.c: 88: break;
  2088                           
  2089                           ;menu.c: 74: switch (menuStatus->currentItem) {
  2090  00F8  0860               	movf	updateCurrentScreen@menuStatus,w
  2091  00F9  0084               	movwf	4
  2092  00FA  0800               	movf	0,w
  2093                           
  2094                           ; Switch size 1, requested type "speed"
  2095                           ; Number of cases is 6, Range of values is 0 to 5
  2096                           ; switch strategies available:
  2097                           ; Name         Instructions Cycles
  2098                           ; direct_byte           19     7 (fixed)
  2099                           ; simple_byte           19    10 (average)
  2100                           ; jumptable            260     6 (fixed)
  2101                           ; rangetable            10     6 (fixed)
  2102                           ; spacedrange           18     9 (fixed)
  2103                           ; locatedrange           6     3 (fixed)
  2104                           ;	Chosen strategy is direct_byte
  2105  00FB  0084               	movwf	4
  2106  00FC  3006               	movlw	6
  2107  00FD  0204               	subwf	4,w
  2108  00FE  1803               	skipnc
  2109  00FF  0008               	return
  2110  0100  3007               	movlw	high S3861
  2111  0101  008A               	movwf	10
  2112  0102  1003               	clrc
  2113  0103  0D04               	rlf	4,w
  2114  0104  3EF2               	addlw	low S3861
  2115  0105  0082               	movwf	2
  2116  0106                     l370:	
  2117  0106  0008               	return
  2118  0107                     l3341:	
  2119                           
  2120                           ;menu.c: 76: updateStatus(systemStatus,menuStatus);
  2121  0107  0860               	movf	updateCurrentScreen@menuStatus,w
  2122  0108  00CD               	movwf	?_updateStatus
  2123  0109  0861               	movf	updateCurrentScreen@systemStatus,w
  2124  010A  293D               	ljmp	_updateStatus
  2125  010B                     l3343:	
  2126                           
  2127                           ;menu.c: 87: showConfigureBacklight(systemStatus,menuStatus);
  2128  010B  0860               	movf	updateCurrentScreen@menuStatus,w
  2129  010C  00A6               	movwf	?_showConfigureBacklight
  2130  010D  0861               	movf	updateCurrentScreen@systemStatus,w
  2131  010E  2920               	ljmp	_showConfigureBacklight
  2132  010F                     __end_of_updateCurrentScreen:	
  2133  010F                     __ptext747:	
  2134 ;; *************** function _showMainMenu *****************
  2135 ;; Defined at:
  2136 ;;		line 59 in file "menu.c"
  2137 ;; Parameters:    Size  Location     Type
  2138 ;;  menuStatus      1    wreg     PTR struct MenuStatus
  2139 ;;		 -> menuStatus(7), 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;  menuStatus      1    6[BANK0 ] PTR struct MenuStatus
  2142 ;;		 -> menuStatus(7), 
  2143 ;; Return value:  Size  Location     Type
  2144 ;;		None               void
  2145 ;; Registers used:
  2146 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2147 ;; Tracked objects:
  2148 ;;		On entry : 160/0
  2149 ;;		On exit  : 60/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2152 ;;      Params:         0       0       0       0
  2153 ;;      Locals:         0       1       0       0
  2154 ;;      Temps:          0       0       0       0
  2155 ;;      Totals:         0       1       0       0
  2156 ;;Total ram usage:        1 bytes
  2157 ;; Hardware stack levels used:    1
  2158 ;; Hardware stack levels required when called:    5
  2159 ;; This function calls:
  2160 ;;		_clearLCD
  2161 ;;		_putrsXLCD
  2162 ;;		_setDDRamAddr
  2163 ;;		_putrsXLCDElement
  2164 ;; This function is called by:
  2165 ;;		_turnRight
  2166 ;;		_turnLeft
  2167 ;; This function uses a non-reentrant model
  2168 ;;
  2169                           
  2170                           
  2171                           ;psect for function _showMainMenu
  2172  010F                     _showMainMenu:	
  2173                           
  2174                           ; Regs used in _showMainMenu: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2175                           ;showMainMenu@menuStatus stored from wreg
  2176  010F  00A6               	movwf	showMainMenu@menuStatus
  2177                           
  2178                           ;menu.c: 61: clearLCD();
  2179  0110  221D  118A         	fcall	_clearLCD
  2180                           
  2181                           ;menu.c: 62: putrsXLCD("Configure");
  2182  0112  30A6               	movlw	(STR_3-__stringbase)& (0+255)
  2183  0113  230C  118A         	fcall	_putrsXLCD
  2184                           
  2185                           ;menu.c: 63: setDDRamAddr(0x40);
  2186  0115  3040               	movlw	64
  2187  0116  218E  118A         	fcall	_setDDRamAddr
  2188                           
  2189                           ;menu.c: 64: putrsXLCDElement(menuString,menuStatus->currentItem);
  2190  0118  1283               	bcf	3,5	;RP0=0, select bank0
  2191  0119  0826               	movf	showMainMenu@menuStatus,w
  2192  011A  0084               	movwf	4
  2193  011B  1383               	bcf	3,7	;select IRP bank0
  2194  011C  0800               	movf	0,w
  2195  011D  00A3               	movwf	?_putrsXLCDElement
  2196  011E  301F               	movlw	(_menuString-__stringbase)& (0+255)
  2197  011F  2F1A               	ljmp	_putrsXLCDElement
  2198  0120                     __end_of_showMainMenu:	
  2199  0120                     __ptext754:	
  2200 ;; *************** function _showConfigureBacklight *****************
  2201 ;; Defined at:
  2202 ;;		line 48 in file "menu.c"
  2203 ;; Parameters:    Size  Location     Type
  2204 ;;  systemStatus    1    wreg     PTR struct SystemStatus
  2205 ;;		 -> systemStatus(23), 
  2206 ;;  menuStatus      1    6[BANK0 ] PTR struct MenuStatus
  2207 ;;		 -> menuStatus(7), 
  2208 ;; Auto vars:     Size  Location     Type
  2209 ;;  systemStatus    1    7[BANK0 ] PTR struct SystemStatus
  2210 ;;		 -> systemStatus(23), 
  2211 ;;  i               1    8[BANK0 ] unsigned char 
  2212 ;; Return value:  Size  Location     Type
  2213 ;;		None               void
  2214 ;; Registers used:
  2215 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2216 ;; Tracked objects:
  2217 ;;		On entry : 160/0
  2218 ;;		On exit  : 160/0
  2219 ;;		Unchanged: 0/0
  2220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2221 ;;      Params:         0       1       0       0
  2222 ;;      Locals:         0       2       0       0
  2223 ;;      Temps:          0       0       0       0
  2224 ;;      Totals:         0       3       0       0
  2225 ;;Total ram usage:        3 bytes
  2226 ;; Hardware stack levels used:    1
  2227 ;; Hardware stack levels required when called:    5
  2228 ;; This function calls:
  2229 ;;		_clearLCD
  2230 ;;		_putrsXLCDElement
  2231 ;;		_setDDRamAddr
  2232 ;;		_putrsXLCD
  2233 ;; This function is called by:
  2234 ;;		_updateCurrentScreen
  2235 ;;		_handleMainMenu
  2236 ;; This function uses a non-reentrant model
  2237 ;;
  2238                           
  2239                           
  2240                           ;psect for function _showConfigureBacklight
  2241  0120                     _showConfigureBacklight:	
  2242                           
  2243                           ; Regs used in _showConfigureBacklight: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2244                           ;showConfigureBacklight@systemStatus stored from wreg
  2245  0120  00A7               	movwf	showConfigureBacklight@systemStatus
  2246                           
  2247                           ;menu.c: 49: clearLCD();
  2248  0121  221D  118A         	fcall	_clearLCD
  2249                           
  2250                           ;menu.c: 50: putrsXLCDElement(menuString,menuStatus->currentItem);
  2251  0123  0826               	movf	showConfigureBacklight@menuStatus,w
  2252  0124  0084               	movwf	4
  2253  0125  1383               	bcf	3,7	;select IRP bank0
  2254  0126  0800               	movf	0,w
  2255  0127  00A3               	movwf	?_putrsXLCDElement
  2256  0128  301F               	movlw	(_menuString-__stringbase)& (0+255)
  2257  0129  271A  118A         	fcall	_putrsXLCDElement
  2258                           
  2259                           ;menu.c: 51: setDDRamAddr(0x40);
  2260  012B  3040               	movlw	64
  2261  012C  218E  118A         	fcall	_setDDRamAddr
  2262                           
  2263                           ;menu.c: 53: for(uint8_t i=0; i <= systemStatus->desiredBacklight; i++)
  2264  012E  1283               	bcf	3,5	;RP0=0, select bank0
  2265  012F  01A8               	clrf	showConfigureBacklight@i
  2266  0130                     l3329:	
  2267  0130  0827               	movf	showConfigureBacklight@systemStatus,w
  2268  0131  3E10               	addlw	16
  2269  0132  0084               	movwf	4
  2270  0133  0828               	movf	showConfigureBacklight@i,w
  2271  0134  1383               	bcf	3,7	;select IRP bank0
  2272  0135  0200               	subwf	0,w
  2273  0136  1C03               	btfss	3,0
  2274  0137  0008               	return
  2275                           
  2276                           ;menu.c: 54: {
  2277                           ;menu.c: 55: putrsXLCD("X");
  2278  0138  30B0               	movlw	(STR_2-__stringbase)& (0+255)
  2279  0139  230C  118A         	fcall	_putrsXLCD
  2280  013B  0AA8               	incf	showConfigureBacklight@i,f
  2281  013C  2930               	goto	l3329
  2282  013D                     __end_of_showConfigureBacklight:	
  2283  013D                     __ptext751:	
  2284 ;; *************** function _updateStatus *****************
  2285 ;; Defined at:
  2286 ;;		line 175 in file "menu.c"
  2287 ;; Parameters:    Size  Location     Type
  2288 ;;  systemStatus    1    wreg     PTR struct SystemStatus
  2289 ;;		 -> systemStatus(23), 
  2290 ;;  menuStatus      1   45[BANK0 ] PTR struct MenuStatus
  2291 ;;		 -> menuStatus(7), 
  2292 ;; Auto vars:     Size  Location     Type
  2293 ;;  systemStatus    1   63[BANK0 ] PTR struct SystemStatus
  2294 ;;		 -> systemStatus(23), 
  2295 ;;  textBuffer     17   46[BANK0 ] unsigned char [17]
  2296 ;; Return value:  Size  Location     Type
  2297 ;;		None               void
  2298 ;; Registers used:
  2299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2300 ;; Tracked objects:
  2301 ;;		On entry : 160/0
  2302 ;;		On exit  : 160/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2305 ;;      Params:         0       1       0       0
  2306 ;;      Locals:         0      18       0       0
  2307 ;;      Temps:          0       0       0       0
  2308 ;;      Totals:         0      19       0       0
  2309 ;;Total ram usage:       19 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; Hardware stack levels required when called:    4
  2312 ;; This function calls:
  2313 ;;		_sprintf
  2314 ;;		_setDDRamAddr
  2315 ;;		_putsXLCD
  2316 ;; This function is called by:
  2317 ;;		_main
  2318 ;;		_updateCurrentScreen
  2319 ;;		_handleMainMenu
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           
  2324                           ;psect for function _updateStatus
  2325  013D                     _updateStatus:	
  2326                           
  2327                           ; Regs used in _updateStatus: [allreg]
  2328                           ;updateStatus@systemStatus stored from wreg
  2329  013D  00DF               	movwf	updateStatus@systemStatus
  2330                           
  2331                           ;menu.c: 176: if (menuStatus->currentItem == 0) {
  2332  013E  084D               	movf	updateStatus@menuStatus,w
  2333  013F  0084               	movwf	4
  2334  0140  0880               	movf	0,f
  2335  0141  1D03               	skipz
  2336  0142  0008               	return
  2337                           
  2338                           ;menu.c: 177: char textBuffer[17];
  2339                           ;menu.c: 178: sprintf(textBuffer, statusString1, systemStatus->windAvg);
  2340  0143  3066               	movlw	(_statusString1-__stringbase)& (0+255)
  2341  0144  00AC               	movwf	?_sprintf
  2342  0145  085F               	movf	updateStatus@systemStatus,w
  2343  0146  0084               	movwf	4
  2344  0147  0800               	movf	0,w
  2345  0148  00AD               	movwf	?_sprintf+1
  2346  0149  0A84               	incf	4,f
  2347  014A  0800               	movf	0,w
  2348  014B  00AE               	movwf	?_sprintf+2
  2349  014C  304E               	movlw	updateStatus@textBuffer& (0+255)
  2350  014D  2324  118A         	fcall	_sprintf
  2351                           
  2352                           ;menu.c: 179: setDDRamAddr(0x00);
  2353  014F  3000               	movlw	0
  2354  0150  218E  118A         	fcall	_setDDRamAddr
  2355                           
  2356                           ;menu.c: 180: putsXLCD(textBuffer);
  2357  0152  304E               	movlw	updateStatus@textBuffer& (0+255)
  2358  0153  21CB  118A         	fcall	_putsXLCD
  2359                           
  2360                           ;menu.c: 181: sprintf(textBuffer, statusString2, systemStatus->sun, systemStatus->day, s
      +                          ystemStatus->alarm, systemStatus->east->status, systemStatus->south->status, systemStatu
      +                          s->west->status);
  2361  0155  3052               	movlw	(_statusString2-__stringbase)& (0+255)
  2362  0156  00AC               	movwf	?_sprintf
  2363  0157  085F               	movf	updateStatus@systemStatus,w
  2364  0158  3E04               	addlw	4
  2365  0159  0084               	movwf	4
  2366  015A  0800               	movf	0,w
  2367  015B  00AD               	movwf	?_sprintf+1
  2368  015C  0A84               	incf	4,f
  2369  015D  0800               	movf	0,w
  2370  015E  00AE               	movwf	?_sprintf+2
  2371  015F  085F               	movf	updateStatus@systemStatus,w
  2372  0160  3E07               	addlw	7
  2373  0161  0084               	movwf	4
  2374  0162  0800               	movf	0,w
  2375  0163  00AF               	movwf	?_sprintf+3
  2376  0164  01B0               	clrf	?_sprintf+4
  2377  0165  085F               	movf	updateStatus@systemStatus,w
  2378  0166  3E09               	addlw	9
  2379  0167  0084               	movwf	4
  2380  0168  0800               	movf	0,w
  2381  0169  00B1               	movwf	?_sprintf+5
  2382  016A  01B2               	clrf	?_sprintf+6
  2383  016B  085F               	movf	updateStatus@systemStatus,w
  2384  016C  3E0A               	addlw	10
  2385  016D  0084               	movwf	4
  2386  016E  0800               	movf	0,w
  2387  016F  3E14               	addlw	20
  2388  0170  0084               	movwf	4
  2389  0171  0800               	movf	0,w
  2390  0172  00B3               	movwf	?_sprintf+7
  2391  0173  01B4               	clrf	?_sprintf+8
  2392  0174  085F               	movf	updateStatus@systemStatus,w
  2393  0175  3E0C               	addlw	12
  2394  0176  0084               	movwf	4
  2395  0177  0800               	movf	0,w
  2396  0178  3E14               	addlw	20
  2397  0179  0084               	movwf	4
  2398  017A  0800               	movf	0,w
  2399  017B  00B5               	movwf	?_sprintf+9
  2400  017C  01B6               	clrf	?_sprintf+10
  2401  017D  085F               	movf	updateStatus@systemStatus,w
  2402  017E  3E0E               	addlw	14
  2403  017F  0084               	movwf	4
  2404  0180  0800               	movf	0,w
  2405  0181  3E14               	addlw	20
  2406  0182  0084               	movwf	4
  2407  0183  0800               	movf	0,w
  2408  0184  00B7               	movwf	?_sprintf+11
  2409  0185  304E               	movlw	updateStatus@textBuffer& (0+255)
  2410  0186  01B8               	clrf	?_sprintf+12
  2411  0187  2324  118A         	fcall	_sprintf
  2412                           
  2413                           ;menu.c: 182: setDDRamAddr(0x40);
  2414  0189  3040               	movlw	64
  2415  018A  218E  118A         	fcall	_setDDRamAddr
  2416                           
  2417                           ;menu.c: 183: putsXLCD(textBuffer);
  2418  018C  304E               	movlw	updateStatus@textBuffer& (0+255)
  2419  018D  29CB               	ljmp	_putsXLCD
  2420  018E                     __end_of_updateStatus:	
  2421  018E                     __ptext757:	
  2422 ;; *************** function _setDDRamAddr *****************
  2423 ;; Defined at:
  2424 ;;		line 229 in file "lcd.c"
  2425 ;; Parameters:    Size  Location     Type
  2426 ;;  DDaddr          1    wreg     unsigned char 
  2427 ;; Auto vars:     Size  Location     Type
  2428 ;;  DDaddr          1    1[BANK0 ] unsigned char 
  2429 ;; Return value:  Size  Location     Type
  2430 ;;		None               void
  2431 ;; Registers used:
  2432 ;;		wreg, status,2, status,0
  2433 ;; Tracked objects:
  2434 ;;		On entry : 60/0
  2435 ;;		On exit  : 60/20
  2436 ;;		Unchanged: 0/0
  2437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2438 ;;      Params:         0       0       0       0
  2439 ;;      Locals:         0       1       0       0
  2440 ;;      Temps:          0       1       0       0
  2441 ;;      Totals:         0       2       0       0
  2442 ;;Total ram usage:        2 bytes
  2443 ;; Hardware stack levels used:    1
  2444 ;; Hardware stack levels required when called:    2
  2445 ;; This function calls:
  2446 ;;		Nothing
  2447 ;; This function is called by:
  2448 ;;		_init_lcd
  2449 ;;		_showConfigureBacklight
  2450 ;;		_showMainMenu
  2451 ;;		_updateStatus
  2452 ;; This function uses a non-reentrant model
  2453 ;;
  2454                           
  2455                           
  2456                           ;psect for function _setDDRamAddr
  2457  018E                     _setDDRamAddr:	
  2458                           
  2459                           ; Regs used in _setDDRamAddr: [wreg+status,2+status,0]
  2460                           ;setDDRamAddr@DDaddr stored from wreg
  2461  018E  00A1               	movwf	setDDRamAddr@DDaddr
  2462                           
  2463                           ;lcd.c: 230: TRISC &= 0x0f;
  2464  018F  300F               	movlw	15
  2465  0190  1683               	bsf	3,5	;RP0=1, select bank1
  2466  0191  0587               	andwf	7,f	;volatile
  2467                           
  2468                           ;lcd.c: 231: PORTC &= 0x0f;
  2469  0192  1283               	bcf	3,5	;RP0=0, select bank0
  2470  0193  0587               	andwf	7,f	;volatile
  2471                           
  2472                           ;lcd.c: 232: PORTC |= ((DDaddr | 0b10000000) & 0xf0);
  2473  0194  0821               	movf	setDDRamAddr@DDaddr,w
  2474  0195  3880               	iorlw	128
  2475  0196  39F0               	andlw	240
  2476  0197  0487               	iorwf	7,f	;volatile
  2477                           
  2478                           ;lcd.c: 234: PORTBbits.RB6 = 0;
  2479  0198  1306               	bcf	6,6	;volatile
  2480                           
  2481                           ;lcd.c: 235: PORTCbits.RC1 = 0;
  2482  0199  1087               	bcf	7,1	;volatile
  2483                           
  2484                           ;lcd.c: 236: _delay((unsigned long)((500)*(8000000/4000000.0)));
  2485  019A  30F9               	movlw	249
  2486  019B  00A0               	movwf	??_setDDRamAddr
  2487  019C                     u3847:	
  2488  019C  0000               	nop
  2489  019D  0BA0               	decfsz	??_setDDRamAddr,f
  2490  019E  299C               	goto	u3847
  2491  019F  29A0               	nop2	;nop
  2492  01A0  0000               	nop
  2493                           
  2494                           ;lcd.c: 237: PORTCbits.RC3 = 1;
  2495  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  2496  01A2  1303               	bcf	3,6	;RP1=0, select bank0
  2497  01A3  1587               	bsf	7,3	;volatile
  2498                           
  2499                           ;lcd.c: 238: _delay((unsigned long)((500)*(8000000/4000000.0)));
  2500  01A4  30F9               	movlw	249
  2501  01A5  00A0               	movwf	??_setDDRamAddr
  2502  01A6                     u3857:	
  2503  01A6  0000               	nop
  2504  01A7  0BA0               	decfsz	??_setDDRamAddr,f
  2505  01A8  29A6               	goto	u3857
  2506  01A9  29AA               	nop2	;nop
  2507  01AA  0000               	nop
  2508                           
  2509                           ;lcd.c: 239: PORTCbits.RC3 = 0;
  2510  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  2511  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  2512  01AD  1187               	bcf	7,3	;volatile
  2513                           
  2514                           ;lcd.c: 241: PORTC &= 0x0f;
  2515  01AE  300F               	movlw	15
  2516  01AF  0587               	andwf	7,f	;volatile
  2517                           
  2518                           ;lcd.c: 242: PORTC |= ((DDaddr<<4)&0xf0);
  2519  01B0  0E21               	swapf	setDDRamAddr@DDaddr,w
  2520  01B1  39F0               	andlw	240
  2521  01B2  0487               	iorwf	7,f	;volatile
  2522                           
  2523                           ;lcd.c: 244: _delay((unsigned long)((500)*(8000000/4000000.0)));
  2524  01B3  30F9               	movlw	249
  2525  01B4  00A0               	movwf	??_setDDRamAddr
  2526  01B5                     u3867:	
  2527  01B5  0000               	nop
  2528  01B6  0BA0               	decfsz	??_setDDRamAddr,f
  2529  01B7  29B5               	goto	u3867
  2530  01B8  29B9               	nop2	;nop
  2531  01B9  0000               	nop
  2532                           
  2533                           ;lcd.c: 245: PORTCbits.RC3 = 1;
  2534  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  2535  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  2536  01BC  1587               	bsf	7,3	;volatile
  2537                           
  2538                           ;lcd.c: 246: _delay((unsigned long)((500)*(8000000/4000000.0)));
  2539  01BD  30F9               	movlw	249
  2540  01BE  00A0               	movwf	??_setDDRamAddr
  2541  01BF                     u3877:	
  2542  01BF  0000               	nop
  2543  01C0  0BA0               	decfsz	??_setDDRamAddr,f
  2544  01C1  29BF               	goto	u3877
  2545  01C2  29C3               	nop2	;nop
  2546  01C3  0000               	nop
  2547                           
  2548                           ;lcd.c: 247: PORTCbits.RC3 = 0;
  2549  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  2550  01C5  1303               	bcf	3,6	;RP1=0, select bank0
  2551  01C6  1187               	bcf	7,3	;volatile
  2552                           
  2553                           ;lcd.c: 248: TRISC |= 0xf0;
  2554  01C7  30F0               	movlw	240
  2555  01C8  1683               	bsf	3,5	;RP0=1, select bank1
  2556  01C9  0487               	iorwf	7,f	;volatile
  2557  01CA  0008               	return
  2558  01CB                     __end_of_setDDRamAddr:	
  2559  01CB                     __ptext753:	
  2560 ;; *************** function _putsXLCD *****************
  2561 ;; Defined at:
  2562 ;;		line 148 in file "lcd.c"
  2563 ;; Parameters:    Size  Location     Type
  2564 ;;  data            1    wreg     PTR unsigned char 
  2565 ;;		 -> updateStatus@textBuffer(17), 
  2566 ;; Auto vars:     Size  Location     Type
  2567 ;;  data            1    2[BANK0 ] PTR unsigned char 
  2568 ;;		 -> updateStatus@textBuffer(17), 
  2569 ;; Return value:  Size  Location     Type
  2570 ;;		None               void
  2571 ;; Registers used:
  2572 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2573 ;; Tracked objects:
  2574 ;;		On entry : 60/20
  2575 ;;		On exit  : 160/0
  2576 ;;		Unchanged: 0/0
  2577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2578 ;;      Params:         0       0       0       0
  2579 ;;      Locals:         0       1       0       0
  2580 ;;      Temps:          0       0       0       0
  2581 ;;      Totals:         0       1       0       0
  2582 ;;Total ram usage:        1 bytes
  2583 ;; Hardware stack levels used:    1
  2584 ;; Hardware stack levels required when called:    3
  2585 ;; This function calls:
  2586 ;;		_busyXLCD
  2587 ;;		_writeDataXLCD
  2588 ;; This function is called by:
  2589 ;;		_updateStatus
  2590 ;; This function uses a non-reentrant model
  2591 ;;
  2592                           
  2593                           
  2594                           ;psect for function _putsXLCD
  2595  01CB                     _putsXLCD:	
  2596                           
  2597                           ; Regs used in _putsXLCD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2598                           ;putsXLCD@data stored from wreg
  2599  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  2600  01CC  00A2               	movwf	putsXLCD@data
  2601  01CD                     l3271:	
  2602                           ;lcd.c: 149: while(*data)
  2603                           
  2604  01CD  0822               	movf	putsXLCD@data,w
  2605  01CE  0084               	movwf	4
  2606  01CF  1383               	bcf	3,7	;select IRP bank0
  2607  01D0  0880               	movf	0,f
  2608  01D1  1903               	btfsc	3,2
  2609  01D2  0008               	return
  2610  01D3                     l3265:	
  2611  01D3  22C6  118A         	fcall	_busyXLCD
  2612  01D5  3800               	iorlw	0
  2613  01D6  1D03               	skipz
  2614  01D7  29D3               	goto	l3265
  2615                           
  2616                           ;lcd.c: 152: writeDataXLCD(*data);
  2617  01D8  0822               	movf	putsXLCD@data,w
  2618  01D9  0084               	movwf	4
  2619  01DA  1383               	bcf	3,7	;select IRP bank0
  2620  01DB  0800               	movf	0,w
  2621  01DC  21E1  118A         	fcall	_writeDataXLCD
  2622                           
  2623                           ;lcd.c: 153: data++;
  2624  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  2625  01DF  0AA2               	incf	putsXLCD@data,f
  2626  01E0  29CD               	goto	l3271
  2627  01E1                     __end_of_putsXLCD:	
  2628  01E1                     __ptext761:	
  2629 ;; *************** function _writeDataXLCD *****************
  2630 ;; Defined at:
  2631 ;;		line 196 in file "lcd.c"
  2632 ;; Parameters:    Size  Location     Type
  2633 ;;  data            1    wreg     unsigned char 
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;  data            1    1[BANK0 ] unsigned char 
  2636 ;; Return value:  Size  Location     Type
  2637 ;;		None               void
  2638 ;; Registers used:
  2639 ;;		wreg, status,2, status,0
  2640 ;; Tracked objects:
  2641 ;;		On entry : 60/0
  2642 ;;		On exit  : 60/20
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2645 ;;      Params:         0       0       0       0
  2646 ;;      Locals:         0       1       0       0
  2647 ;;      Temps:          0       1       0       0
  2648 ;;      Totals:         0       2       0       0
  2649 ;;Total ram usage:        2 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; Hardware stack levels required when called:    2
  2652 ;; This function calls:
  2653 ;;		Nothing
  2654 ;; This function is called by:
  2655 ;;		_putsXLCD
  2656 ;;		_putrsXLCD
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           
  2661                           ;psect for function _writeDataXLCD
  2662  01E1                     _writeDataXLCD:	
  2663                           
  2664                           ; Regs used in _writeDataXLCD: [wreg+status,2+status,0]
  2665                           ;writeDataXLCD@data stored from wreg
  2666  01E1  00A1               	movwf	writeDataXLCD@data
  2667                           
  2668                           ;lcd.c: 197: TRISC &= 0x0f;
  2669  01E2  300F               	movlw	15
  2670  01E3  1683               	bsf	3,5	;RP0=1, select bank1
  2671  01E4  0587               	andwf	7,f	;volatile
  2672                           
  2673                           ;lcd.c: 198: PORTC &= 0x0f;
  2674  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  2675  01E6  0587               	andwf	7,f	;volatile
  2676                           
  2677                           ;lcd.c: 199: PORTC |= data&0xf0;
  2678  01E7  0821               	movf	writeDataXLCD@data,w
  2679  01E8  39F0               	andlw	240
  2680  01E9  0487               	iorwf	7,f	;volatile
  2681                           
  2682                           ;lcd.c: 201: PORTCbits.RC1 = 1;
  2683  01EA  1487               	bsf	7,1	;volatile
  2684                           
  2685                           ;lcd.c: 202: PORTBbits.RB6 = 0;
  2686  01EB  1306               	bcf	6,6	;volatile
  2687                           
  2688                           ;lcd.c: 203: _delay((unsigned long)((500)*(8000000/4000000.0)));
  2689  01EC  30F9               	movlw	249
  2690  01ED  00A0               	movwf	??_writeDataXLCD
  2691  01EE                     u3947:	
  2692  01EE  0000               	nop
  2693  01EF  0BA0               	decfsz	??_writeDataXLCD,f
  2694  01F0  29EE               	goto	u3947
  2695  01F1  29F2               	nop2	;nop
  2696  01F2  0000               	nop
  2697                           
  2698                           ;lcd.c: 204: PORTCbits.RC3 = 1;
  2699  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  2700  01F4  1303               	bcf	3,6	;RP1=0, select bank0
  2701  01F5  1587               	bsf	7,3	;volatile
  2702                           
  2703                           ;lcd.c: 205: _delay((unsigned long)((500)*(8000000/4000000.0)));
  2704  01F6  30F9               	movlw	249
  2705  01F7  00A0               	movwf	??_writeDataXLCD
  2706  01F8                     u3957:	
  2707  01F8  0000               	nop
  2708  01F9  0BA0               	decfsz	??_writeDataXLCD,f
  2709  01FA  29F8               	goto	u3957
  2710  01FB  29FC               	nop2	;nop
  2711  01FC  0000               	nop
  2712                           
  2713                           ;lcd.c: 206: PORTCbits.RC3 = 0;
  2714  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  2715  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  2716  01FF  1187               	bcf	7,3	;volatile
  2717                           
  2718                           ;lcd.c: 207: PORTC &= 0x0f;
  2719  0200  300F               	movlw	15
  2720  0201  0587               	andwf	7,f	;volatile
  2721                           
  2722                           ;lcd.c: 208: PORTC |= ((data<<4)&0xf0);
  2723  0202  0E21               	swapf	writeDataXLCD@data,w
  2724  0203  39F0               	andlw	240
  2725  0204  0487               	iorwf	7,f	;volatile
  2726                           
  2727                           ;lcd.c: 210: _delay((unsigned long)((500)*(8000000/4000000.0)));
  2728  0205  30F9               	movlw	249
  2729  0206  00A0               	movwf	??_writeDataXLCD
  2730  0207                     u3967:	
  2731  0207  0000               	nop
  2732  0208  0BA0               	decfsz	??_writeDataXLCD,f
  2733  0209  2A07               	goto	u3967
  2734  020A  2A0B               	nop2	;nop
  2735  020B  0000               	nop
  2736                           
  2737                           ;lcd.c: 211: PORTCbits.RC3 = 1;
  2738  020C  1283               	bcf	3,5	;RP0=0, select bank0
  2739  020D  1303               	bcf	3,6	;RP1=0, select bank0
  2740  020E  1587               	bsf	7,3	;volatile
  2741                           
  2742                           ;lcd.c: 212: _delay((unsigned long)((500)*(8000000/4000000.0)));
  2743  020F  30F9               	movlw	249
  2744  0210  00A0               	movwf	??_writeDataXLCD
  2745  0211                     u3977:	
  2746  0211  0000               	nop
  2747  0212  0BA0               	decfsz	??_writeDataXLCD,f
  2748  0213  2A11               	goto	u3977
  2749  0214  2A15               	nop2	;nop
  2750  0215  0000               	nop
  2751                           
  2752                           ;lcd.c: 213: PORTCbits.RC3 = 0;
  2753  0216  1283               	bcf	3,5	;RP0=0, select bank0
  2754  0217  1303               	bcf	3,6	;RP1=0, select bank0
  2755  0218  1187               	bcf	7,3	;volatile
  2756                           
  2757                           ;lcd.c: 215: TRISC |= 0xf0;
  2758  0219  30F0               	movlw	240
  2759  021A  1683               	bsf	3,5	;RP0=1, select bank1
  2760  021B  0487               	iorwf	7,f	;volatile
  2761  021C  0008               	return
  2762  021D                     __end_of_writeDataXLCD:	
  2763  021D                     __ptext755:	
  2764 ;; *************** function _clearLCD *****************
  2765 ;; Defined at:
  2766 ;;		line 254 in file "lcd.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;		None
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;		None
  2771 ;; Return value:  Size  Location     Type
  2772 ;;		None               void
  2773 ;; Registers used:
  2774 ;;		wreg, status,2, status,0, pclath, cstack
  2775 ;; Tracked objects:
  2776 ;;		On entry : 40/20
  2777 ;;		On exit  : 60/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2780 ;;      Params:         0       0       0       0
  2781 ;;      Locals:         0       0       0       0
  2782 ;;      Temps:          0       0       0       0
  2783 ;;      Totals:         0       0       0       0
  2784 ;;Total ram usage:        0 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; Hardware stack levels required when called:    3
  2787 ;; This function calls:
  2788 ;;		_busyXLCD
  2789 ;;		_writeCmdXLCD
  2790 ;; This function is called by:
  2791 ;;		_init_lcd
  2792 ;;		_showConfigureBacklight
  2793 ;;		_showMainMenu
  2794 ;; This function uses a non-reentrant model
  2795 ;;
  2796                           
  2797                           
  2798                           ;psect for function _clearLCD
  2799  021D                     _clearLCD:	
  2800  021D                     l3233:	
  2801                           ;lcd.c: 255: while(busyXLCD());
  2802                           
  2803                           ; Regs used in _clearLCD: [wreg+status,2+status,0+pclath+cstack]
  2804                           
  2805  021D  22C6  118A         	fcall	_busyXLCD
  2806  021F  3800               	iorlw	0
  2807  0220  1D03               	skipz
  2808  0221  2A1D               	goto	l3233
  2809                           
  2810                           ;lcd.c: 256: writeCmdXLCD(0x01);
  2811  0222  3001               	movlw	1
  2812  0223  2288  118A         	fcall	_writeCmdXLCD
  2813  0225                     l3237:	
  2814                           ;lcd.c: 257: while(busyXLCD());
  2815                           
  2816  0225  22C6  118A         	fcall	_busyXLCD
  2817  0227  3800               	iorlw	0
  2818  0228  1903               	btfsc	3,2
  2819  0229  0008               	return
  2820  022A  2A25               	goto	l3237
  2821  022B                     __end_of_clearLCD:	
  2822  022B                     __ptext743:	
  2823 ;; *************** function _init_lcd *****************
  2824 ;; Defined at:
  2825 ;;		line 30 in file "lcd.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;		None
  2828 ;; Auto vars:     Size  Location     Type
  2829 ;;		None
  2830 ;; Return value:  Size  Location     Type
  2831 ;;		None               void
  2832 ;; Registers used:
  2833 ;;		wreg, status,2, status,0, pclath, cstack
  2834 ;; Tracked objects:
  2835 ;;		On entry : 17F/20
  2836 ;;		On exit  : 60/20
  2837 ;;		Unchanged: 0/0
  2838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2839 ;;      Params:         0       0       0       0
  2840 ;;      Locals:         0       0       0       0
  2841 ;;      Temps:          0       2       0       0
  2842 ;;      Totals:         0       2       0       0
  2843 ;;Total ram usage:        2 bytes
  2844 ;; Hardware stack levels used:    1
  2845 ;; Hardware stack levels required when called:    4
  2846 ;; This function calls:
  2847 ;;		_writeCmdXLCD
  2848 ;;		_busyXLCD
  2849 ;;		_clearLCD
  2850 ;;		_setDDRamAddr
  2851 ;; This function is called by:
  2852 ;;		_main
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856                           
  2857                           ;psect for function _init_lcd
  2858  022B                     _init_lcd:	
  2859                           
  2860                           ;lcd.c: 31: PORTC &= 0x0f;
  2861                           
  2862                           ; Regs used in _init_lcd: [wreg+status,2+status,0+pclath+cstack]
  2863  022B  300F               	movlw	15
  2864  022C  1283               	bcf	3,5	;RP0=0, select bank0
  2865  022D  0587               	andwf	7,f	;volatile
  2866                           
  2867                           ;lcd.c: 32: TRISC &= 0x0F;
  2868  022E  1683               	bsf	3,5	;RP0=1, select bank1
  2869  022F  0587               	andwf	7,f	;volatile
  2870                           
  2871                           ;lcd.c: 34: TRISBbits.TRISB6 = 0;
  2872  0230  1306               	bcf	6,6	;volatile
  2873                           
  2874                           ;lcd.c: 35: TRISCbits.TRISC1 = 0;
  2875  0231  1087               	bcf	7,1	;volatile
  2876                           
  2877                           ;lcd.c: 36: TRISCbits.TRISC3 = 0;
  2878  0232  1187               	bcf	7,3	;volatile
  2879                           
  2880                           ;lcd.c: 37: PORTBbits.RB6 = 0;
  2881  0233  1283               	bcf	3,5	;RP0=0, select bank0
  2882  0234  1306               	bcf	6,6	;volatile
  2883                           
  2884                           ;lcd.c: 38: PORTCbits.RC1 = 0;
  2885  0235  1087               	bcf	7,1	;volatile
  2886                           
  2887                           ;lcd.c: 39: PORTCbits.RC3 = 0;
  2888  0236  1187               	bcf	7,3	;volatile
  2889                           
  2890                           ;lcd.c: 42: _delay((unsigned long)((15)*(8000000/4000.0)));
  2891  0237  3027               	movlw	39
  2892  0238  00A3               	movwf	??_init_lcd+1
  2893  0239  30F5               	movlw	245
  2894  023A  00A2               	movwf	??_init_lcd
  2895  023B                     u3777:	
  2896  023B  0BA2               	decfsz	??_init_lcd,f
  2897  023C  2A3B               	goto	u3777
  2898  023D  0BA3               	decfsz	??_init_lcd+1,f
  2899  023E  2A3B               	goto	u3777
  2900                           
  2901                           ;lcd.c: 44: writeCmdXLCD(0x30);
  2902  023F  3030               	movlw	48
  2903  0240  2288  118A         	fcall	_writeCmdXLCD
  2904                           
  2905                           ;lcd.c: 45: _delay((unsigned long)((5)*(8000000/4000.0)));
  2906  0242  300D               	movlw	13
  2907  0243  1283               	bcf	3,5	;RP0=0, select bank0
  2908  0244  00A3               	movwf	??_init_lcd+1
  2909  0245  30FB               	movlw	251
  2910  0246  00A2               	movwf	??_init_lcd
  2911  0247                     u3787:	
  2912  0247  0BA2               	decfsz	??_init_lcd,f
  2913  0248  2A47               	goto	u3787
  2914  0249  0BA3               	decfsz	??_init_lcd+1,f
  2915  024A  2A47               	goto	u3787
  2916  024B  2A4C               	nop2
  2917                           
  2918                           ;lcd.c: 47: writeCmdXLCD(0x30);
  2919  024C  3030               	movlw	48
  2920  024D  2288  118A         	fcall	_writeCmdXLCD
  2921                           
  2922                           ;lcd.c: 48: _delay((unsigned long)((500)*(8000000/4000000.0)));
  2923  024F  30F9               	movlw	249
  2924  0250  1283               	bcf	3,5	;RP0=0, select bank0
  2925  0251  00A2               	movwf	??_init_lcd
  2926  0252                     u3797:	
  2927  0252  0000               	nop
  2928  0253  0BA2               	decfsz	??_init_lcd,f
  2929  0254  2A52               	goto	u3797
  2930  0255  2A56               	nop2	;nop
  2931  0256  0000               	nop
  2932                           
  2933                           ;lcd.c: 50: writeCmdXLCD(0x32);
  2934  0257  3032               	movlw	50
  2935  0258  2288  118A         	fcall	_writeCmdXLCD
  2936  025A                     l3085:	
  2937                           ;lcd.c: 51: while( busyXLCD() );
  2938                           
  2939  025A  22C6  118A         	fcall	_busyXLCD
  2940  025C  3800               	iorlw	0
  2941  025D  1D03               	skipz
  2942  025E  2A5A               	goto	l3085
  2943  025F                     l3087:	
  2944  025F  22C6  118A         	fcall	_busyXLCD
  2945  0261  3800               	iorlw	0
  2946  0262  1D03               	skipz
  2947  0263  2A5F               	goto	l3087
  2948                           
  2949                           ;lcd.c: 57: writeCmdXLCD(0x28);
  2950  0264  3028               	movlw	40
  2951  0265  2288  118A         	fcall	_writeCmdXLCD
  2952  0267                     l3091:	
  2953                           ;lcd.c: 60: while(busyXLCD());
  2954                           
  2955  0267  22C6  118A         	fcall	_busyXLCD
  2956  0269  3800               	iorlw	0
  2957  026A  1D03               	skipz
  2958  026B  2A67               	goto	l3091
  2959                           
  2960                           ;lcd.c: 61: writeCmdXLCD(0b00001011&0b00001101&0b00001110);
  2961  026C  3008               	movlw	8
  2962  026D  2288  118A         	fcall	_writeCmdXLCD
  2963  026F                     l3095:	
  2964                           ;lcd.c: 62: while(busyXLCD());
  2965                           
  2966  026F  22C6  118A         	fcall	_busyXLCD
  2967  0271  3800               	iorlw	0
  2968  0272  1D03               	skipz
  2969  0273  2A6F               	goto	l3095
  2970                           
  2971                           ;lcd.c: 63: writeCmdXLCD(0b00001111&0b00001111&0b00001111);
  2972  0274  300F               	movlw	15
  2973  0275  2288  118A         	fcall	_writeCmdXLCD
  2974                           
  2975                           ;lcd.c: 66: clearLCD();
  2976  0277  221D  118A         	fcall	_clearLCD
  2977  0279                     l3099:	
  2978                           ;lcd.c: 69: while(busyXLCD());
  2979                           
  2980  0279  22C6  118A         	fcall	_busyXLCD
  2981  027B  3800               	iorlw	0
  2982  027C  1D03               	skipz
  2983  027D  2A79               	goto	l3099
  2984                           
  2985                           ;lcd.c: 70: writeCmdXLCD(0b00000110);
  2986  027E  3006               	movlw	6
  2987  027F  2288  118A         	fcall	_writeCmdXLCD
  2988  0281                     l3103:	
  2989                           ;lcd.c: 73: while(busyXLCD());
  2990                           
  2991  0281  22C6  118A         	fcall	_busyXLCD
  2992  0283  3800               	iorlw	0
  2993  0284  1D03               	skipz
  2994  0285  2A81               	goto	l3103
  2995                           
  2996                           ;lcd.c: 74: setDDRamAddr(0x00);
  2997  0286  3000               	movlw	0
  2998  0287  298E               	ljmp	_setDDRamAddr
  2999  0288                     __end_of_init_lcd:	
  3000  0288                     __ptext756:	
  3001 ;; *************** function _writeCmdXLCD *****************
  3002 ;; Defined at:
  3003 ;;		line 81 in file "lcd.c"
  3004 ;; Parameters:    Size  Location     Type
  3005 ;;  cmd             1    wreg     unsigned char 
  3006 ;; Auto vars:     Size  Location     Type
  3007 ;;  cmd             1    1[BANK0 ] unsigned char 
  3008 ;; Return value:  Size  Location     Type
  3009 ;;		None               void
  3010 ;; Registers used:
  3011 ;;		wreg, status,2, status,0
  3012 ;; Tracked objects:
  3013 ;;		On entry : 0/0
  3014 ;;		On exit  : 60/20
  3015 ;;		Unchanged: 0/0
  3016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3017 ;;      Params:         0       0       0       0
  3018 ;;      Locals:         0       1       0       0
  3019 ;;      Temps:          0       1       0       0
  3020 ;;      Totals:         0       2       0       0
  3021 ;;Total ram usage:        2 bytes
  3022 ;; Hardware stack levels used:    1
  3023 ;; Hardware stack levels required when called:    2
  3024 ;; This function calls:
  3025 ;;		Nothing
  3026 ;; This function is called by:
  3027 ;;		_init_lcd
  3028 ;;		_clearLCD
  3029 ;; This function uses a non-reentrant model
  3030 ;;
  3031                           
  3032                           
  3033                           ;psect for function _writeCmdXLCD
  3034  0288                     _writeCmdXLCD:	
  3035                           
  3036                           ; Regs used in _writeCmdXLCD: [wreg+status,2+status,0]
  3037                           ;writeCmdXLCD@cmd stored from wreg
  3038  0288  1283               	bcf	3,5	;RP0=0, select bank0
  3039  0289  1303               	bcf	3,6	;RP1=0, select bank0
  3040  028A  00A1               	movwf	writeCmdXLCD@cmd
  3041                           
  3042                           ;lcd.c: 82: TRISC &= 0x0f;
  3043  028B  300F               	movlw	15
  3044  028C  1683               	bsf	3,5	;RP0=1, select bank1
  3045  028D  0587               	andwf	7,f	;volatile
  3046                           
  3047                           ;lcd.c: 83: PORTC &= 0x0f;
  3048  028E  1283               	bcf	3,5	;RP0=0, select bank0
  3049  028F  0587               	andwf	7,f	;volatile
  3050                           
  3051                           ;lcd.c: 84: PORTC |= cmd&0xf0;
  3052  0290  0821               	movf	writeCmdXLCD@cmd,w
  3053  0291  39F0               	andlw	240
  3054  0292  0487               	iorwf	7,f	;volatile
  3055                           
  3056                           ;lcd.c: 86: PORTBbits.RB6 = 0;
  3057  0293  1306               	bcf	6,6	;volatile
  3058                           
  3059                           ;lcd.c: 87: PORTCbits.RC3 = 0;
  3060  0294  1187               	bcf	7,3	;volatile
  3061                           
  3062                           ;lcd.c: 88: _delay((unsigned long)((500)*(8000000/4000000.0)));
  3063  0295  30F9               	movlw	249
  3064  0296  00A0               	movwf	??_writeCmdXLCD
  3065  0297                     u3807:	
  3066  0297  0000               	nop
  3067  0298  0BA0               	decfsz	??_writeCmdXLCD,f
  3068  0299  2A97               	goto	u3807
  3069  029A  2A9B               	nop2	;nop
  3070  029B  0000               	nop
  3071                           
  3072                           ;lcd.c: 89: PORTCbits.RC3 = 1;
  3073  029C  1283               	bcf	3,5	;RP0=0, select bank0
  3074  029D  1303               	bcf	3,6	;RP1=0, select bank0
  3075  029E  1587               	bsf	7,3	;volatile
  3076                           
  3077                           ;lcd.c: 90: _delay((unsigned long)((500)*(8000000/4000000.0)));
  3078  029F  30F9               	movlw	249
  3079  02A0  00A0               	movwf	??_writeCmdXLCD
  3080  02A1                     u3817:	
  3081  02A1  0000               	nop
  3082  02A2  0BA0               	decfsz	??_writeCmdXLCD,f
  3083  02A3  2AA1               	goto	u3817
  3084  02A4  2AA5               	nop2	;nop
  3085  02A5  0000               	nop
  3086                           
  3087                           ;lcd.c: 91: PORTCbits.RC3 = 0;
  3088  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  3089  02A7  1303               	bcf	3,6	;RP1=0, select bank0
  3090  02A8  1187               	bcf	7,3	;volatile
  3091                           
  3092                           ;lcd.c: 93: PORTC &= 0x0f;
  3093  02A9  300F               	movlw	15
  3094  02AA  0587               	andwf	7,f	;volatile
  3095                           
  3096                           ;lcd.c: 94: PORTC |= (cmd<<4)&0xf0;
  3097  02AB  0E21               	swapf	writeCmdXLCD@cmd,w
  3098  02AC  39F0               	andlw	240
  3099  02AD  0487               	iorwf	7,f	;volatile
  3100                           
  3101                           ;lcd.c: 96: _delay((unsigned long)((500)*(8000000/4000000.0)));
  3102  02AE  30F9               	movlw	249
  3103  02AF  00A0               	movwf	??_writeCmdXLCD
  3104  02B0                     u3827:	
  3105  02B0  0000               	nop
  3106  02B1  0BA0               	decfsz	??_writeCmdXLCD,f
  3107  02B2  2AB0               	goto	u3827
  3108  02B3  2AB4               	nop2	;nop
  3109  02B4  0000               	nop
  3110                           
  3111                           ;lcd.c: 97: PORTCbits.RC3= 1;
  3112  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  3113  02B6  1303               	bcf	3,6	;RP1=0, select bank0
  3114  02B7  1587               	bsf	7,3	;volatile
  3115                           
  3116                           ;lcd.c: 98: _delay((unsigned long)((500)*(8000000/4000000.0)));
  3117  02B8  30F9               	movlw	249
  3118  02B9  00A0               	movwf	??_writeCmdXLCD
  3119  02BA                     u3837:	
  3120  02BA  0000               	nop
  3121  02BB  0BA0               	decfsz	??_writeCmdXLCD,f
  3122  02BC  2ABA               	goto	u3837
  3123  02BD  2ABE               	nop2	;nop
  3124  02BE  0000               	nop
  3125                           
  3126                           ;lcd.c: 99: PORTCbits.RC3 = 0;
  3127  02BF  1283               	bcf	3,5	;RP0=0, select bank0
  3128  02C0  1303               	bcf	3,6	;RP1=0, select bank0
  3129  02C1  1187               	bcf	7,3	;volatile
  3130                           
  3131                           ;lcd.c: 102: TRISC |= 0xf0;
  3132  02C2  30F0               	movlw	240
  3133  02C3  1683               	bsf	3,5	;RP0=1, select bank1
  3134  02C4  0487               	iorwf	7,f	;volatile
  3135  02C5  0008               	return
  3136  02C6                     __end_of_writeCmdXLCD:	
  3137  02C6                     __ptext760:	
  3138 ;; *************** function _busyXLCD *****************
  3139 ;; Defined at:
  3140 ;;		line 107 in file "lcd.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;		None
  3143 ;; Auto vars:     Size  Location     Type
  3144 ;;		None
  3145 ;; Return value:  Size  Location     Type
  3146 ;;                  1    wreg      unsigned char 
  3147 ;; Registers used:
  3148 ;;		wreg
  3149 ;; Tracked objects:
  3150 ;;		On entry : 40/20
  3151 ;;		On exit  : 60/0
  3152 ;;		Unchanged: 0/0
  3153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3154 ;;      Params:         0       0       0       0
  3155 ;;      Locals:         0       0       0       0
  3156 ;;      Temps:          0       1       0       0
  3157 ;;      Totals:         0       1       0       0
  3158 ;;Total ram usage:        1 bytes
  3159 ;; Hardware stack levels used:    1
  3160 ;; Hardware stack levels required when called:    2
  3161 ;; This function calls:
  3162 ;;		Nothing
  3163 ;; This function is called by:
  3164 ;;		_init_lcd
  3165 ;;		_putsXLCD
  3166 ;;		_putrsXLCD
  3167 ;;		_clearLCD
  3168 ;; This function uses a non-reentrant model
  3169 ;;
  3170                           
  3171                           
  3172                           ;psect for function _busyXLCD
  3173  02C6                     _busyXLCD:	
  3174                           
  3175                           ;lcd.c: 108: PORTBbits.RB6 = 1;
  3176                           
  3177                           ; Regs used in _busyXLCD: [wreg]
  3178  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  3179  02C7  1706               	bsf	6,6	;volatile
  3180                           
  3181                           ;lcd.c: 109: PORTCbits.RC1 = 0;
  3182  02C8  1087               	bcf	7,1	;volatile
  3183                           
  3184                           ;lcd.c: 110: _delay((unsigned long)((500)*(8000000/4000000.0)));
  3185  02C9  30F9               	movlw	249
  3186  02CA  00A0               	movwf	??_busyXLCD
  3187  02CB                     u3887:	
  3188  02CB  0000               	nop
  3189  02CC  0BA0               	decfsz	??_busyXLCD,f
  3190  02CD  2ACB               	goto	u3887
  3191  02CE  2ACF               	nop2	;nop
  3192  02CF  0000               	nop
  3193                           
  3194                           ;lcd.c: 111: PORTCbits.RC3 = 1;
  3195  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  3196  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  3197  02D2  1587               	bsf	7,3	;volatile
  3198                           
  3199                           ;lcd.c: 112: _delay((unsigned long)((500)*(8000000/4000000.0)));
  3200  02D3  30F9               	movlw	249
  3201  02D4  00A0               	movwf	??_busyXLCD
  3202  02D5                     u3897:	
  3203  02D5  0000               	nop
  3204  02D6  0BA0               	decfsz	??_busyXLCD,f
  3205  02D7  2AD5               	goto	u3897
  3206  02D8  2AD9               	nop2	;nop
  3207  02D9  0000               	nop
  3208                           
  3209                           ;lcd.c: 113: if(PORTC&0x80)
  3210  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  3211  02DB  1303               	bcf	3,6	;RP1=0, select bank0
  3212  02DC  1F87               	btfss	7,7	;volatile
  3213  02DD  2AF5               	goto	l276
  3214                           
  3215                           ;lcd.c: 114: {
  3216                           ;lcd.c: 115: PORTCbits.RC3 = 0;
  3217  02DE  1187               	bcf	7,3	;volatile
  3218                           
  3219                           ;lcd.c: 116: _delay((unsigned long)((500)*(8000000/4000000.0)));
  3220  02DF  30F9               	movlw	249
  3221  02E0  00A0               	movwf	??_busyXLCD
  3222  02E1                     u3907:	
  3223  02E1  0000               	nop
  3224  02E2  0BA0               	decfsz	??_busyXLCD,f
  3225  02E3  2AE1               	goto	u3907
  3226  02E4  2AE5               	nop2	;nop
  3227  02E5  0000               	nop
  3228                           
  3229                           ;lcd.c: 117: PORTCbits.RC3 = 1;
  3230  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  3231  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  3232  02E8  1587               	bsf	7,3	;volatile
  3233                           
  3234                           ;lcd.c: 118: _delay((unsigned long)((500)*(8000000/4000000.0)));
  3235  02E9  30F9               	movlw	249
  3236  02EA  00A0               	movwf	??_busyXLCD
  3237  02EB                     u3917:	
  3238  02EB  0000               	nop
  3239  02EC  0BA0               	decfsz	??_busyXLCD,f
  3240  02ED  2AEB               	goto	u3917
  3241  02EE  2AEF               	nop2	;nop
  3242  02EF  0000               	nop
  3243                           
  3244                           ;lcd.c: 119: PORTCbits.RC3 = 0;
  3245  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  3246  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  3247  02F2  1187               	bcf	7,3	;volatile
  3248                           
  3249                           ;lcd.c: 120: PORTBbits.RB6 = 0;
  3250  02F3  1306               	bcf	6,6	;volatile
  3251                           
  3252                           ;lcd.c: 121: return 1;
  3253  02F4  3401               	retlw	1
  3254  02F5                     l276:	
  3255                           
  3256                           ;lcd.c: 123: else
  3257                           ;lcd.c: 124: {
  3258                           ;lcd.c: 125: PORTCbits.RC3 = 0;
  3259  02F5  1187               	bcf	7,3	;volatile
  3260                           
  3261                           ;lcd.c: 126: _delay((unsigned long)((500)*(8000000/4000000.0)));
  3262  02F6  30F9               	movlw	249
  3263  02F7  00A0               	movwf	??_busyXLCD
  3264  02F8                     u3927:	
  3265  02F8  0000               	nop
  3266  02F9  0BA0               	decfsz	??_busyXLCD,f
  3267  02FA  2AF8               	goto	u3927
  3268  02FB  2AFC               	nop2	;nop
  3269  02FC  0000               	nop
  3270                           
  3271                           ;lcd.c: 127: PORTCbits.RC3 = 1;
  3272  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  3273  02FE  1303               	bcf	3,6	;RP1=0, select bank0
  3274  02FF  1587               	bsf	7,3	;volatile
  3275                           
  3276                           ;lcd.c: 128: _delay((unsigned long)((500)*(8000000/4000000.0)));
  3277  0300  30F9               	movlw	249
  3278  0301  00A0               	movwf	??_busyXLCD
  3279  0302                     u3937:	
  3280  0302  0000               	nop
  3281  0303  0BA0               	decfsz	??_busyXLCD,f
  3282  0304  2B02               	goto	u3937
  3283  0305  2B06               	nop2	;nop
  3284  0306  0000               	nop
  3285                           
  3286                           ;lcd.c: 129: PORTCbits.RC3 = 0;
  3287  0307  1283               	bcf	3,5	;RP0=0, select bank0
  3288  0308  1303               	bcf	3,6	;RP1=0, select bank0
  3289  0309  1187               	bcf	7,3	;volatile
  3290                           
  3291                           ;lcd.c: 130: PORTBbits.RB6 = 0;
  3292  030A  1306               	bcf	6,6	;volatile
  3293                           
  3294                           ;lcd.c: 131: return 0;
  3295  030B  3400               	retlw	0
  3296  030C                     __end_of_busyXLCD:	
  3297  030C                     __ptext759:	
  3298 ;; *************** function _putrsXLCD *****************
  3299 ;; Defined at:
  3300 ;;		line 171 in file "lcd.c"
  3301 ;; Parameters:    Size  Location     Type
  3302 ;;  data            1    wreg     PTR const unsigned char 
  3303 ;;		 -> STR_3(10), STR_2(2), menuString(51), 
  3304 ;; Auto vars:     Size  Location     Type
  3305 ;;  data            1    2[BANK0 ] PTR const unsigned char 
  3306 ;;		 -> STR_3(10), STR_2(2), menuString(51), 
  3307 ;; Return value:  Size  Location     Type
  3308 ;;		None               void
  3309 ;; Registers used:
  3310 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3311 ;; Tracked objects:
  3312 ;;		On entry : 60/0
  3313 ;;		On exit  : 60/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3316 ;;      Params:         0       0       0       0
  3317 ;;      Locals:         0       1       0       0
  3318 ;;      Temps:          0       0       0       0
  3319 ;;      Totals:         0       1       0       0
  3320 ;;Total ram usage:        1 bytes
  3321 ;; Hardware stack levels used:    1
  3322 ;; Hardware stack levels required when called:    3
  3323 ;; This function calls:
  3324 ;;		_busyXLCD
  3325 ;;		_writeDataXLCD
  3326 ;; This function is called by:
  3327 ;;		_putrsXLCDElement
  3328 ;;		_showConfigureBacklight
  3329 ;;		_showMainMenu
  3330 ;; This function uses a non-reentrant model
  3331 ;;
  3332                           
  3333                           
  3334                           ;psect for function _putrsXLCD
  3335  030C                     _putrsXLCD:	
  3336                           
  3337                           ; Regs used in _putrsXLCD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3338                           ;putrsXLCD@data stored from wreg
  3339  030C  00A2               	movwf	putrsXLCD@data
  3340  030D                     l3303:	
  3341                           ;lcd.c: 172: while(*data)
  3342                           
  3343  030D  0822               	movf	putrsXLCD@data,w
  3344  030E  0084               	movwf	4
  3345  030F  158A  2100  118A   	fcall	stringdir
  3346  0312  3800               	iorlw	0
  3347  0313  1903               	btfsc	3,2
  3348  0314  0008               	return
  3349  0315                     l3297:	
  3350  0315  22C6  118A         	fcall	_busyXLCD
  3351  0317  3800               	iorlw	0
  3352  0318  1D03               	skipz
  3353  0319  2B15               	goto	l3297
  3354                           
  3355                           ;lcd.c: 175: writeDataXLCD(*data);
  3356  031A  0822               	movf	putrsXLCD@data,w
  3357  031B  0084               	movwf	4
  3358  031C  158A  2100  118A   	fcall	stringdir
  3359  031F  21E1  118A         	fcall	_writeDataXLCD
  3360                           
  3361                           ;lcd.c: 176: data++;
  3362  0321  1283               	bcf	3,5	;RP0=0, select bank0
  3363  0322  0AA2               	incf	putrsXLCD@data,f
  3364  0323  2B0D               	goto	l3303
  3365  0324                     __end_of_putrsXLCD:	
  3366  0324                     __ptext752:	
  3367 ;; *************** function _sprintf *****************
  3368 ;; Defined at:
  3369 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.12\sources\doprnt.c"
  3370 ;; Parameters:    Size  Location     Type
  3371 ;;  sp              1    wreg     PTR unsigned char 
  3372 ;;		 -> updateStatus@textBuffer(17), sendSeriotData@text(18), 
  3373 ;;  f               1   12[BANK0 ] PTR const unsigned char 
  3374 ;;		 -> statusString2(20), statusString1(16), STR_1(14), 
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;  sp              1   42[BANK0 ] PTR unsigned char 
  3377 ;;		 -> updateStatus@textBuffer(17), sendSeriotData@text(18), 
  3378 ;;  idx             1   32[BANK0 ] unsigned char 
  3379 ;;  _val            3   38[BANK0 ] struct .
  3380 ;;  flag            2   43[BANK0 ] unsigned short 
  3381 ;;  width           2   36[BANK0 ] int 
  3382 ;;  c               1   41[BANK0 ] char 
  3383 ;;  prec            1   35[BANK0 ] char 
  3384 ;;  ap              1   34[BANK0 ] PTR void [1]
  3385 ;;		 -> ?_sprintf(2), 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  2   12[BANK0 ] int 
  3388 ;; Registers used:
  3389 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3390 ;; Tracked objects:
  3391 ;;		On entry : 60/0
  3392 ;;		On exit  : 160/0
  3393 ;;		Unchanged: FFE00/0
  3394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3395 ;;      Params:         0      13       0       0
  3396 ;;      Locals:         0      17       0       0
  3397 ;;      Temps:          0       3       0       0
  3398 ;;      Totals:         0      33       0       0
  3399 ;;Total ram usage:       33 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; Hardware stack levels required when called:    3
  3402 ;; This function calls:
  3403 ;;		_isdigit
  3404 ;;		___wmul
  3405 ;;		___bmul
  3406 ;;		___lwdiv
  3407 ;;		___lwmod
  3408 ;; This function is called by:
  3409 ;;		_sendSeriotData
  3410 ;;		_updateStatus
  3411 ;; This function uses a non-reentrant model
  3412 ;;
  3413                           
  3414                           
  3415                           ;psect for function _sprintf
  3416  0324                     _sprintf:	
  3417                           
  3418                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3419                           ;sprintf@sp stored from wreg
  3420  0324  00CA               	movwf	sprintf@sp
  3421                           
  3422                           ;doprnt.c: 494: va_list ap;
  3423                           ;doprnt.c: 499: signed char c;
  3424                           ;doprnt.c: 501: int width;
  3425                           ;doprnt.c: 506: signed char prec;
  3426                           ;doprnt.c: 508: unsigned short flag;
  3427                           ;doprnt.c: 527: union {
  3428                           ;doprnt.c: 528: unsigned int _val;
  3429                           ;doprnt.c: 529: struct {
  3430                           ;doprnt.c: 530: const char * _cp;
  3431                           ;doprnt.c: 531: unsigned _len;
  3432                           ;doprnt.c: 532: } _str;
  3433                           ;doprnt.c: 533: } _val;
  3434                           ;doprnt.c: 542: *ap = __va_start();
  3435  0325  302D               	movlw	(?_sprintf+1)& (0+255)
  3436  0326  00C2               	movwf	sprintf@ap
  3437  0327                     l2921:	
  3438                           ;doprnt.c: 545: while(c = *f++) {
  3439                           
  3440  0327  1283               	bcf	3,5	;RP0=0, select bank0
  3441  0328  1303               	bcf	3,6	;RP1=0, select bank0
  3442  0329  082C               	movf	sprintf@f,w
  3443  032A  0AAC               	incf	sprintf@f,f
  3444  032B  0084               	movwf	4
  3445  032C  158A  2100  118A   	fcall	stringdir
  3446  032F  00C9               	movwf	sprintf@c
  3447  0330  08C9               	movf	sprintf@c,f
  3448  0331  1903               	btfsc	3,2
  3449  0332  2EA0               	goto	l2923
  3450                           
  3451                           ;doprnt.c: 547: if(c != '%')
  3452  0333  0849               	movf	sprintf@c,w
  3453  0334  3A25               	xorlw	37
  3454  0335  1903               	skipnz
  3455  0336  2B3E               	goto	l2595
  3456                           
  3457                           ;doprnt.c: 549: {
  3458                           ;doprnt.c: 550: ((*sp++ = (c)));
  3459  0337  084A               	movf	sprintf@sp,w
  3460  0338  0084               	movwf	4
  3461  0339  0849               	movf	sprintf@c,w
  3462  033A  1383               	bcf	3,7	;select IRP bank0
  3463  033B  0080               	movwf	0
  3464  033C  0ACA               	incf	sprintf@sp,f
  3465                           
  3466                           ;doprnt.c: 551: continue;
  3467  033D  2B27               	goto	l2921
  3468  033E                     l2595:	
  3469                           
  3470                           ;doprnt.c: 552: }
  3471                           ;doprnt.c: 555: width = 0;
  3472  033E  01C4               	clrf	sprintf@width
  3473  033F  01C5               	clrf	sprintf@width+1
  3474                           
  3475                           ;doprnt.c: 557: flag = 0;
  3476  0340  01CB               	clrf	sprintf@flag
  3477  0341  01CC               	clrf	sprintf@flag+1
  3478  0342  2B4B               	goto	l2607
  3479  0343                     l430:	
  3480                           ;doprnt.c: 562: case '-':
  3481                           
  3482                           
  3483                           ;doprnt.c: 563: flag |= 0x08;
  3484  0343  15CB               	bsf	sprintf@flag,3
  3485                           
  3486                           ;doprnt.c: 565: continue;
  3487  0344  2B4A               	goto	l2597
  3488  0345                     l432:	
  3489                           ;doprnt.c: 569: case ' ':
  3490                           
  3491                           
  3492                           ;doprnt.c: 570: flag |= 0x01;
  3493  0345  144B               	bsf	sprintf@flag,0
  3494  0346  2B4A               	goto	l2597
  3495  0347                     l433:	
  3496                           ;doprnt.c: 582: case '#':
  3497                           
  3498                           
  3499                           ;doprnt.c: 583: flag |= 0x800;
  3500  0347  15CC               	bsf	sprintf@flag+1,3
  3501  0348  2B4A               	goto	l2597
  3502  0349                     l434:	
  3503                           ;doprnt.c: 588: case '0':
  3504                           
  3505                           
  3506                           ;doprnt.c: 589: flag |= 0x04;
  3507  0349  154B               	bsf	sprintf@flag,2
  3508  034A                     l2597:	
  3509                           
  3510                           ;doprnt.c: 564: f++;
  3511  034A  0AAC               	incf	sprintf@f,f
  3512  034B                     l2607:	
  3513  034B  082C               	movf	sprintf@f,w
  3514  034C  0084               	movwf	4
  3515  034D  158A  2100  118A   	fcall	stringdir
  3516                           
  3517                           ; Switch size 1, requested type "speed"
  3518                           ; Number of cases is 4, Range of values is 32 to 48
  3519                           ; switch strategies available:
  3520                           ; Name         Instructions Cycles
  3521                           ; simple_byte           13     7 (average)
  3522                           ; direct_byte           44    10 (fixed)
  3523                           ; jumptable            263     9 (fixed)
  3524                           ;	Chosen strategy is simple_byte
  3525  0350  3A20               	xorlw	32	; case 32
  3526  0351  1903               	skipnz
  3527  0352  2B45               	goto	l432
  3528  0353  3A03               	xorlw	3	; case 35
  3529  0354  1903               	skipnz
  3530  0355  2B47               	goto	l433
  3531  0356  3A0E               	xorlw	14	; case 45
  3532  0357  1903               	skipnz
  3533  0358  2B43               	goto	l430
  3534  0359  3A1D               	xorlw	29	; case 48
  3535  035A  1903               	skipnz
  3536  035B  2B49               	goto	l434
  3537  035C  2B5D               	goto	l436
  3538  035D                     l436:	
  3539                           
  3540                           ;doprnt.c: 602: if(flag & 0x08)
  3541  035D  1DCB               	btfss	sprintf@flag,3
  3542  035E  2B60               	goto	l2611
  3543                           
  3544                           ;doprnt.c: 603: flag &= ~0x04;
  3545  035F  114B               	bcf	sprintf@flag,2
  3546  0360                     l2611:	
  3547                           
  3548                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  3549  0360  082C               	movf	sprintf@f,w
  3550  0361  0084               	movwf	4
  3551  0362  158A  2100  118A   	fcall	stringdir
  3552  0365  26CF  118A         	fcall	_isdigit
  3553  0367  1C03               	btfss	3,0
  3554  0368  2B93               	goto	l2623
  3555                           
  3556                           ;doprnt.c: 607: width = 0;
  3557  0369  01C4               	clrf	sprintf@width
  3558  036A  01C5               	clrf	sprintf@width+1
  3559  036B                     l2615:	
  3560                           
  3561                           ;doprnt.c: 609: width *= 10;
  3562  036B  300A               	movlw	10
  3563  036C  00A0               	movwf	?___wmul
  3564  036D  01A1               	clrf	?___wmul+1
  3565  036E  0845               	movf	sprintf@width+1,w
  3566  036F  00A3               	movwf	?___wmul+3
  3567  0370  0844               	movf	sprintf@width,w
  3568  0371  00A2               	movwf	?___wmul+2
  3569  0372  2701               	fcall	___wmul
  3570  0373  0821               	movf	?___wmul+1,w
  3571  0374  00C5               	movwf	sprintf@width+1
  3572  0375  0820               	movf	?___wmul,w
  3573  0376  00C4               	movwf	sprintf@width
  3574                           
  3575                           ;doprnt.c: 610: width += *f++ - '0';
  3576  0377  082C               	movf	sprintf@f,w
  3577  0378  0084               	movwf	4
  3578  0379  158A  2100  118A   	fcall	stringdir
  3579  037C  3ED0               	addlw	208
  3580  037D  00B9               	movwf	??_sprintf
  3581  037E  30FF               	movlw	255
  3582  037F  1803               	skipnc
  3583  0380  3000               	movlw	0
  3584  0381  00BA               	movwf	??_sprintf+1
  3585  0382  0839               	movf	??_sprintf,w
  3586  0383  07C4               	addwf	sprintf@width,f
  3587  0384  1803               	skipnc
  3588  0385  0AC5               	incf	sprintf@width+1,f
  3589  0386  083A               	movf	??_sprintf+1,w
  3590  0387  07C5               	addwf	sprintf@width+1,f
  3591  0388  0AAC               	incf	sprintf@f,f
  3592                           
  3593                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  3594  0389  082C               	movf	sprintf@f,w
  3595  038A  0084               	movwf	4
  3596  038B  158A  2100  118A   	fcall	stringdir
  3597  038E  26CF  118A         	fcall	_isdigit
  3598  0390  1C03               	btfss	3,0
  3599  0391  2BA6               	goto	l2631
  3600  0392  2B6B               	goto	l2615
  3601  0393                     l2623:	
  3602  0393  082C               	movf	sprintf@f,w
  3603  0394  0084               	movwf	4
  3604  0395  158A  2100  118A   	fcall	stringdir
  3605  0398  3A2A               	xorlw	42
  3606  0399  1D03               	skipz
  3607  039A  2BA6               	goto	l2631
  3608                           
  3609                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  3610  039B  0842               	movf	sprintf@ap,w
  3611  039C  0084               	movwf	4
  3612  039D  1383               	bcf	3,7	;select IRP bank0
  3613  039E  0800               	movf	0,w
  3614  039F  00C4               	movwf	sprintf@width
  3615  03A0  0A84               	incf	4,f
  3616  03A1  0800               	movf	0,w
  3617  03A2  00C5               	movwf	sprintf@width+1
  3618  03A3  0AC2               	incf	sprintf@ap,f
  3619  03A4  0AC2               	incf	sprintf@ap,f
  3620                           
  3621                           ;doprnt.c: 615: f++;
  3622  03A5  0AAC               	incf	sprintf@f,f
  3623  03A6                     l2631:	
  3624                           
  3625                           ;doprnt.c: 617: }
  3626                           ;doprnt.c: 620: if(*f == '.') {
  3627  03A6  082C               	movf	sprintf@f,w
  3628  03A7  0084               	movwf	4
  3629  03A8  158A  2100  118A   	fcall	stringdir
  3630  03AB  3A2E               	xorlw	46
  3631  03AC  1D03               	skipz
  3632  03AD  2BDA               	goto	l2653
  3633                           
  3634                           ;doprnt.c: 621: flag |= 0x4000;
  3635  03AE  174C               	bsf	sprintf@flag+1,6
  3636                           
  3637                           ;doprnt.c: 622: f++;
  3638  03AF  0AAC               	incf	sprintf@f,f
  3639                           
  3640                           ;doprnt.c: 624: if(*f == '*') {
  3641  03B0  082C               	movf	sprintf@f,w
  3642  03B1  0084               	movwf	4
  3643  03B2  158A  2100  118A   	fcall	stringdir
  3644  03B5  3A2A               	xorlw	42
  3645  03B6  1D03               	skipz
  3646  03B7  2BC1               	goto	l2645
  3647                           
  3648                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  3649  03B8  0842               	movf	sprintf@ap,w
  3650  03B9  0084               	movwf	4
  3651  03BA  1383               	bcf	3,7	;select IRP bank0
  3652  03BB  0800               	movf	0,w
  3653  03BC  00C3               	movwf	sprintf@prec
  3654  03BD  0AC2               	incf	sprintf@ap,f
  3655  03BE  0AC2               	incf	sprintf@ap,f
  3656                           
  3657                           ;doprnt.c: 626: f++;
  3658  03BF  0AAC               	incf	sprintf@f,f
  3659                           
  3660                           ;doprnt.c: 627: } else
  3661  03C0  2C53               	goto	l2705
  3662  03C1                     l2645:	
  3663                           
  3664                           ;doprnt.c: 629: {
  3665                           ;doprnt.c: 630: prec = 0;
  3666  03C1  01C3               	clrf	sprintf@prec
  3667  03C2                     l2651:	
  3668                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  3669                           
  3670  03C2  082C               	movf	sprintf@f,w
  3671  03C3  0084               	movwf	4
  3672  03C4  158A  2100  118A   	fcall	stringdir
  3673  03C7  26CF  118A         	fcall	_isdigit
  3674  03C9  1C03               	btfss	3,0
  3675  03CA  2C53               	goto	l2705
  3676                           
  3677                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  3678  03CB  300A               	movlw	10
  3679  03CC  00A0               	movwf	?___bmul
  3680  03CD  0843               	movf	sprintf@prec,w
  3681  03CE  272E               	fcall	___bmul
  3682  03CF  00B9               	movwf	??_sprintf
  3683  03D0  082C               	movf	sprintf@f,w
  3684  03D1  0084               	movwf	4
  3685  03D2  158A  2100  118A   	fcall	stringdir
  3686  03D5  0739               	addwf	??_sprintf,w
  3687  03D6  3ED0               	addlw	-48
  3688  03D7  00C3               	movwf	sprintf@prec
  3689  03D8  0AAC               	incf	sprintf@f,f
  3690  03D9  2BC2               	goto	l2651
  3691  03DA                     l2653:	
  3692                           
  3693                           ;doprnt.c: 635: prec = 0;
  3694  03DA  01C3               	clrf	sprintf@prec
  3695  03DB  2C53               	goto	l2705
  3696  03DC                     l453:	
  3697                           ;doprnt.c: 698: case 'o':
  3698                           
  3699                           
  3700                           ;doprnt.c: 700: flag |= 0x40;
  3701  03DC  174B               	bsf	sprintf@flag,6
  3702                           
  3703                           ;doprnt.c: 702: break;
  3704  03DD  2C65               	goto	l2707
  3705  03DE                     l457:	
  3706                           ;doprnt.c: 721: case 'X':
  3707                           
  3708                           
  3709                           ;doprnt.c: 723: flag |= 0x20;
  3710  03DE  16CB               	bsf	sprintf@flag,5
  3711  03DF                     l458:	
  3712                           ;doprnt.c: 727: case 'x':
  3713                           
  3714                           
  3715                           ;doprnt.c: 730: flag |= 0x80;
  3716  03DF  17CB               	bsf	sprintf@flag,7
  3717                           
  3718                           ;doprnt.c: 732: break;
  3719  03E0  2C65               	goto	l2707
  3720  03E1                     l2655:	
  3721                           
  3722                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
  3723  03E1  0843               	movf	sprintf@prec,w
  3724  03E2  1903               	btfsc	3,2
  3725  03E3  2BF6               	goto	l2661
  3726  03E4  0843               	movf	sprintf@prec,w
  3727  03E5  00B9               	movwf	??_sprintf
  3728  03E6  01BA               	clrf	??_sprintf+1
  3729  03E7  1BB9               	btfsc	??_sprintf,7
  3730  03E8  03BA               	decf	??_sprintf+1,f
  3731  03E9  0848               	movf	sprintf@_val+2,w
  3732  03EA  023A               	subwf	??_sprintf+1,w
  3733  03EB  1D03               	skipz
  3734  03EC  2BEF               	goto	u2015
  3735  03ED  0847               	movf	sprintf@_val+1,w
  3736  03EE  0239               	subwf	??_sprintf,w
  3737  03EF                     u2015:	
  3738  03EF  1803               	skipnc
  3739  03F0  2BF6               	goto	l2661
  3740                           
  3741                           ;doprnt.c: 763: _val._str._len = prec;
  3742  03F1  0843               	movf	sprintf@prec,w
  3743  03F2  00C7               	movwf	sprintf@_val+1
  3744  03F3  01C8               	clrf	sprintf@_val+2
  3745  03F4  1BC7               	btfsc	sprintf@_val+1,7
  3746  03F5  03C8               	decf	sprintf@_val+2,f
  3747  03F6                     l2661:	
  3748                           
  3749                           ;doprnt.c: 766: if(width > _val._str._len)
  3750  03F6  0845               	movf	sprintf@width+1,w
  3751  03F7  0248               	subwf	sprintf@_val+2,w
  3752  03F8  1D03               	skipz
  3753  03F9  2BFC               	goto	u2025
  3754  03FA  0844               	movf	sprintf@width,w
  3755  03FB  0247               	subwf	sprintf@_val+1,w
  3756  03FC                     u2025:	
  3757  03FC  1803               	skipnc
  3758  03FD  2C05               	goto	l2665
  3759                           
  3760                           ;doprnt.c: 767: width -= _val._str._len;
  3761  03FE  0847               	movf	sprintf@_val+1,w
  3762  03FF  02C4               	subwf	sprintf@width,f
  3763  0400  0848               	movf	sprintf@_val+2,w
  3764  0401  1C03               	skipc
  3765  0402  03C5               	decf	sprintf@width+1,f
  3766  0403  02C5               	subwf	sprintf@width+1,f
  3767  0404  2C07               	goto	l2667
  3768  0405                     l2665:	
  3769                           
  3770                           ;doprnt.c: 768: else
  3771                           ;doprnt.c: 769: width = 0;
  3772  0405  01C4               	clrf	sprintf@width
  3773  0406  01C5               	clrf	sprintf@width+1
  3774  0407                     l2667:	
  3775                           
  3776                           ;doprnt.c: 771: if(!(flag & 0x08))
  3777  0407  1DCB               	btfss	sprintf@flag,3
  3778  0408  2C10               	goto	l2675
  3779  0409  2C25               	goto	l2683
  3780  040A                     l2671:	
  3781                           
  3782                           ;doprnt.c: 774: ((*sp++ = (' ')));
  3783  040A  084A               	movf	sprintf@sp,w
  3784  040B  0084               	movwf	4
  3785  040C  3020               	movlw	32
  3786  040D  1383               	bcf	3,7	;select IRP bank0
  3787  040E  0080               	movwf	0
  3788  040F  0ACA               	incf	sprintf@sp,f
  3789  0410                     l2675:	
  3790  0410  30FF               	movlw	-1
  3791  0411  07C4               	addwf	sprintf@width,f
  3792  0412  1C03               	skipc
  3793  0413  03C5               	decf	sprintf@width+1,f
  3794  0414  0A44               	incf	sprintf@width,w
  3795  0415  1903               	skipnz
  3796  0416  0A45               	incf	sprintf@width+1,w
  3797  0417  1903               	btfsc	3,2
  3798  0418  2C25               	goto	l2683
  3799  0419  2C0A               	goto	l2671
  3800  041A                     l2677:	
  3801                           
  3802                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
  3803  041A  0846               	movf	sprintf@_val,w
  3804  041B  0084               	movwf	4
  3805  041C  1383               	bcf	3,7	;select IRP bank0
  3806  041D  0800               	movf	0,w
  3807  041E  00B9               	movwf	??_sprintf
  3808  041F  084A               	movf	sprintf@sp,w
  3809  0420  0084               	movwf	4
  3810  0421  0839               	movf	??_sprintf,w
  3811  0422  0080               	movwf	0
  3812  0423  0AC6               	incf	sprintf@_val,f
  3813  0424  0ACA               	incf	sprintf@sp,f
  3814  0425                     l2683:	
  3815  0425  3001               	movlw	1
  3816  0426  02C7               	subwf	sprintf@_val+1,f
  3817  0427  3000               	movlw	0
  3818  0428  1C03               	skipc
  3819  0429  03C8               	decf	sprintf@_val+2,f
  3820  042A  02C8               	subwf	sprintf@_val+2,f
  3821  042B  0A47               	incf	sprintf@_val+1,w
  3822  042C  1903               	skipnz
  3823  042D  0A48               	incf	sprintf@_val+2,w
  3824  042E  1D03               	skipz
  3825  042F  2C1A               	goto	l2677
  3826                           
  3827                           ;doprnt.c: 779: if(flag & 0x08)
  3828  0430  19CB               	btfsc	sprintf@flag,3
  3829  0431  2C39               	goto	l2691
  3830  0432  2B27               	goto	l2921
  3831  0433                     l2687:	
  3832                           
  3833                           ;doprnt.c: 781: ((*sp++ = (' ')));
  3834  0433  084A               	movf	sprintf@sp,w
  3835  0434  0084               	movwf	4
  3836  0435  3020               	movlw	32
  3837  0436  1383               	bcf	3,7	;select IRP bank0
  3838  0437  0080               	movwf	0
  3839  0438  0ACA               	incf	sprintf@sp,f
  3840  0439                     l2691:	
  3841  0439  30FF               	movlw	-1
  3842  043A  07C4               	addwf	sprintf@width,f
  3843  043B  1C03               	skipc
  3844  043C  03C5               	decf	sprintf@width+1,f
  3845  043D  0A44               	incf	sprintf@width,w
  3846  043E  1903               	skipnz
  3847  043F  0A45               	incf	sprintf@width+1,w
  3848  0440  1903               	btfsc	3,2
  3849  0441  2B27               	goto	l2921
  3850  0442  2C33               	goto	l2687
  3851  0443                     l2693:	
  3852                           
  3853                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3854  0443  0842               	movf	sprintf@ap,w
  3855  0444  0084               	movwf	4
  3856  0445  1383               	bcf	3,7	;select IRP bank0
  3857  0446  0800               	movf	0,w
  3858  0447  00C9               	movwf	sprintf@c
  3859  0448  0AC2               	incf	sprintf@ap,f
  3860  0449  0AC2               	incf	sprintf@ap,f
  3861  044A                     l2697:	
  3862                           
  3863                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
  3864  044A  3049               	movlw	sprintf@c& (0+255)
  3865  044B  00C6               	movwf	sprintf@_val
  3866                           
  3867                           ;doprnt.c: 815: _val._str._len = 1;
  3868  044C  01C7               	clrf	sprintf@_val+1
  3869  044D  0AC7               	incf	sprintf@_val+1,f
  3870  044E  01C8               	clrf	sprintf@_val+2
  3871                           
  3872                           ;doprnt.c: 816: goto dostring;
  3873  044F  2BE1               	goto	l2655
  3874  0450                     l2701:	
  3875                           
  3876                           ;doprnt.c: 827: flag |= 0xC0;
  3877  0450  30C0               	movlw	192
  3878  0451  04CB               	iorwf	sprintf@flag,f
  3879                           
  3880                           ;doprnt.c: 828: break;
  3881  0452  2C65               	goto	l2707
  3882  0453                     l2705:	
  3883  0453  082C               	movf	sprintf@f,w
  3884  0454  0AAC               	incf	sprintf@f,f
  3885  0455  0084               	movwf	4
  3886  0456  158A  2100  118A   	fcall	stringdir
  3887  0459  00C9               	movwf	sprintf@c
  3888                           
  3889                           ; Switch size 1, requested type "speed"
  3890                           ; Number of cases is 8, Range of values is 0 to 120
  3891                           ; switch strategies available:
  3892                           ; Name         Instructions Cycles
  3893                           ; direct_byte          249     7 (fixed)
  3894                           ; simple_byte           25    13 (average)
  3895                           ; jumptable            260     6 (fixed)
  3896                           ; rangetable           125     6 (fixed)
  3897                           ; spacedrange          248     9 (fixed)
  3898                           ; locatedrange         121     3 (fixed)
  3899                           ;	Chosen strategy is direct_byte
  3900  045A  0084               	movwf	4
  3901  045B  3079               	movlw	121
  3902  045C  0204               	subwf	4,w
  3903  045D  1803               	skipnc
  3904  045E  2C4A               	goto	l2697
  3905  045F  3008               	movlw	high S3863
  3906  0460  008A               	movwf	10
  3907  0461  1003               	clrc
  3908  0462  0D04               	rlf	4,w
  3909  0463  3E00               	addlw	low S3863
  3910  0464  0082               	movwf	2
  3911  0465                     l2707:	
  3912                           
  3913                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
  3914  0465  084B               	movf	sprintf@flag,w
  3915  0466  39C0               	andlw	192
  3916  0467  1D03               	btfss	3,2
  3917  0468  2C7D               	goto	l2719
  3918                           
  3919                           ;doprnt.c: 1260: {
  3920                           ;doprnt.c: 1266: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3921  0469  0842               	movf	sprintf@ap,w
  3922  046A  0084               	movwf	4
  3923  046B  1383               	bcf	3,7	;select IRP bank0
  3924  046C  0800               	movf	0,w
  3925  046D  00C6               	movwf	sprintf@_val
  3926  046E  0A84               	incf	4,f
  3927  046F  0800               	movf	0,w
  3928  0470  00C7               	movwf	sprintf@_val+1
  3929  0471  0AC2               	incf	sprintf@ap,f
  3930  0472  0AC2               	incf	sprintf@ap,f
  3931                           
  3932                           ;doprnt.c: 1268: if((int)_val._val < 0) {
  3933  0473  1FC7               	btfss	sprintf@_val+1,7
  3934  0474  2C87               	goto	l2723
  3935                           
  3936                           ;doprnt.c: 1269: flag |= 0x03;
  3937  0475  3003               	movlw	3
  3938  0476  04CB               	iorwf	sprintf@flag,f
  3939                           
  3940                           ;doprnt.c: 1270: _val._val = -_val._val;
  3941  0477  09C6               	comf	sprintf@_val,f
  3942  0478  09C7               	comf	sprintf@_val+1,f
  3943  0479  0AC6               	incf	sprintf@_val,f
  3944  047A  1903               	skipnz
  3945  047B  0AC7               	incf	sprintf@_val+1,f
  3946  047C  2C87               	goto	l2723
  3947  047D                     l2719:	
  3948                           
  3949                           ;doprnt.c: 1275: else
  3950                           ;doprnt.c: 1280: {
  3951                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3952  047D  0842               	movf	sprintf@ap,w
  3953  047E  0084               	movwf	4
  3954  047F  1383               	bcf	3,7	;select IRP bank0
  3955  0480  0800               	movf	0,w
  3956  0481  00C6               	movwf	sprintf@_val
  3957  0482  0A84               	incf	4,f
  3958  0483  0800               	movf	0,w
  3959  0484  00C7               	movwf	sprintf@_val+1
  3960  0485  0AC2               	incf	sprintf@ap,f
  3961  0486  0AC2               	incf	sprintf@ap,f
  3962  0487                     l2723:	
  3963                           
  3964                           ;doprnt.c: 1294: }
  3965                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
  3966  0487  08C3               	movf	sprintf@prec,f
  3967  0488  1D03               	skipz
  3968  0489  2CDE               	goto	l2767
  3969  048A  0847               	movf	sprintf@_val+1,w
  3970  048B  0446               	iorwf	sprintf@_val,w
  3971  048C  1D03               	skipz
  3972  048D  2CDE               	goto	l2767
  3973                           
  3974                           ;doprnt.c: 1298: prec++;
  3975  048E  0AC3               	incf	sprintf@prec,f
  3976  048F  2CDE               	goto	l2767
  3977  0490                     l483:	
  3978                           
  3979                           ;doprnt.c: 1309: case 0xC0:
  3980                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3981  0490  01C9               	clrf	sprintf@c
  3982  0491                     L2:	
  3983  0491  0AC9               	incf	sprintf@c,f
  3984  0492  0849               	movf	sprintf@c,w
  3985  0493  3A05               	xorlw	5
  3986  0494  1903               	btfsc	3,2
  3987  0495  2CEC               	goto	l2769
  3988                           
  3989                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
  3990  0496  1003               	clrc
  3991  0497  0D49               	rlf	sprintf@c,w
  3992  0498  3E0D               	addlw	low (_dpowers-__stringbase)
  3993  0499  0084               	movwf	4
  3994  049A  158A  2100  118A   	fcall	stringdir
  3995  049D  00B9               	movwf	??_sprintf
  3996  049E  158A  2100  118A   	fcall	stringdir
  3997  04A1  00BA               	movwf	??_sprintf+1
  3998  04A2  0247               	subwf	sprintf@_val+1,w
  3999  04A3  1D03               	skipz
  4000  04A4  2CA7               	goto	u2135
  4001  04A5  0839               	movf	??_sprintf,w
  4002  04A6  0246               	subwf	sprintf@_val,w
  4003  04A7                     u2135:	
  4004  04A7  1C03               	btfss	3,0
  4005  04A8  2CEC               	goto	l2769
  4006  04A9  2C91               	goto	L2
  4007  04AA                     l488:	
  4008                           ;doprnt.c: 1321: case 0x80:
  4009                           
  4010                           
  4011                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4012  04AA  01C9               	clrf	sprintf@c
  4013  04AB                     L3:	
  4014  04AB  0AC9               	incf	sprintf@c,f
  4015  04AC  0849               	movf	sprintf@c,w
  4016  04AD  3A04               	xorlw	4
  4017  04AE  1903               	btfsc	3,2
  4018  04AF  2CEC               	goto	l2769
  4019                           
  4020                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
  4021  04B0  1003               	clrc
  4022  04B1  0D49               	rlf	sprintf@c,w
  4023  04B2  3E17               	addlw	low (_hexpowers-__stringbase)
  4024  04B3  0084               	movwf	4
  4025  04B4  158A  2100  118A   	fcall	stringdir
  4026  04B7  00B9               	movwf	??_sprintf
  4027  04B8  158A  2100  118A   	fcall	stringdir
  4028  04BB  00BA               	movwf	??_sprintf+1
  4029  04BC  0247               	subwf	sprintf@_val+1,w
  4030  04BD  1D03               	skipz
  4031  04BE  2CC1               	goto	u2155
  4032  04BF  0839               	movf	??_sprintf,w
  4033  04C0  0246               	subwf	sprintf@_val,w
  4034  04C1                     u2155:	
  4035  04C1  1C03               	btfss	3,0
  4036  04C2  2CEC               	goto	l2769
  4037  04C3  2CAB               	goto	L3
  4038  04C4                     l492:	
  4039                           ;doprnt.c: 1333: case 0x40:
  4040                           
  4041                           
  4042                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  4043  04C4  01C9               	clrf	sprintf@c
  4044  04C5                     L4:	
  4045  04C5  0AC9               	incf	sprintf@c,f
  4046  04C6  0849               	movf	sprintf@c,w
  4047  04C7  3A06               	xorlw	6
  4048  04C8  1903               	btfsc	3,2
  4049  04C9  2CEC               	goto	l2769
  4050                           
  4051                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
  4052  04CA  1003               	clrc
  4053  04CB  0D49               	rlf	sprintf@c,w
  4054  04CC  3E01               	addlw	low (_octpowers-__stringbase)
  4055  04CD  0084               	movwf	4
  4056  04CE  158A  2100  118A   	fcall	stringdir
  4057  04D1  00B9               	movwf	??_sprintf
  4058  04D2  158A  2100  118A   	fcall	stringdir
  4059  04D5  00BA               	movwf	??_sprintf+1
  4060  04D6  0247               	subwf	sprintf@_val+1,w
  4061  04D7  1D03               	skipz
  4062  04D8  2CDB               	goto	u2175
  4063  04D9  0839               	movf	??_sprintf,w
  4064  04DA  0246               	subwf	sprintf@_val,w
  4065  04DB                     u2175:	
  4066  04DB  1C03               	btfss	3,0
  4067  04DC  2CEC               	goto	l2769
  4068  04DD  2CC5               	goto	L4
  4069  04DE                     l2767:	
  4070  04DE  084B               	movf	sprintf@flag,w
  4071  04DF  39C0               	andlw	192
  4072                           
  4073                           ; Switch size 1, requested type "speed"
  4074                           ; Number of cases is 4, Range of values is 0 to 192
  4075                           ; switch strategies available:
  4076                           ; Name         Instructions Cycles
  4077                           ; simple_byte           13     7 (average)
  4078                           ; jumptable            260     6 (fixed)
  4079                           ; rangetable           197     6 (fixed)
  4080                           ; spacedrange          392     9 (fixed)
  4081                           ; locatedrange         193     3 (fixed)
  4082                           ;	Chosen strategy is simple_byte
  4083  04E0  1903               	skipnz
  4084  04E1  2C90               	goto	l483
  4085  04E2  3A40               	xorlw	64	; case 64
  4086  04E3  1903               	skipnz
  4087  04E4  2CC4               	goto	l492
  4088  04E5  3AC0               	xorlw	192	; case 128
  4089  04E6  1903               	skipnz
  4090  04E7  2CAA               	goto	l488
  4091  04E8  3A40               	xorlw	64	; case 192
  4092  04E9  1903               	skipnz
  4093  04EA  2C90               	goto	l483
  4094  04EB  2CEC               	goto	l2769
  4095  04EC                     l2769:	
  4096                           
  4097                           ;doprnt.c: 1346: if(c < prec)
  4098  04EC  0849               	movf	sprintf@c,w
  4099  04ED  3A80               	xorlw	128
  4100  04EE  00B9               	movwf	??_sprintf
  4101  04EF  0843               	movf	sprintf@prec,w
  4102  04F0  3A80               	xorlw	128
  4103  04F1  02B9               	subwf	??_sprintf,f
  4104                           
  4105                           ;doprnt.c: 1347: c = prec;
  4106  04F2  0843               	movf	sprintf@prec,w
  4107  04F3  1803               	skipnc
  4108  04F4  2CF7               	goto	L18
  4109  04F5  00C9               	movwf	sprintf@c
  4110  04F6  2D00               	goto	l497
  4111  04F7                     L18:	
  4112                           ;doprnt.c: 1348: else if(prec < c)
  4113                           
  4114  04F7  3A80               	xorlw	128
  4115  04F8  00B9               	movwf	??_sprintf
  4116  04F9  0849               	movf	sprintf@c,w
  4117  04FA  3A80               	xorlw	128
  4118  04FB  02B9               	subwf	??_sprintf,f
  4119  04FC  1803               	skipnc
  4120  04FD  2D00               	goto	l497
  4121                           
  4122                           ;doprnt.c: 1349: prec = c;
  4123  04FE  0849               	movf	sprintf@c,w
  4124  04FF  00C3               	movwf	sprintf@prec
  4125  0500                     l497:	
  4126                           
  4127                           ;doprnt.c: 1352: if(width && flag & 0x03)
  4128  0500  0845               	movf	sprintf@width+1,w
  4129  0501  0444               	iorwf	sprintf@width,w
  4130  0502  1903               	skipnz
  4131  0503  2D0C               	goto	l2781
  4132  0504  084B               	movf	sprintf@flag,w
  4133  0505  3903               	andlw	3
  4134  0506  1903               	btfsc	3,2
  4135  0507  2D0C               	goto	l2781
  4136                           
  4137                           ;doprnt.c: 1353: width--;
  4138  0508  30FF               	movlw	-1
  4139  0509  07C4               	addwf	sprintf@width,f
  4140  050A  1C03               	skipc
  4141  050B  03C5               	decf	sprintf@width+1,f
  4142  050C                     l2781:	
  4143                           
  4144                           ;doprnt.c: 1355: if(flag & 0x4000) {
  4145  050C  1F4C               	btfss	sprintf@flag+1,6
  4146  050D  2D30               	goto	l2789
  4147                           
  4148                           ;doprnt.c: 1356: if(width > prec)
  4149  050E  0843               	movf	sprintf@prec,w
  4150  050F  00B9               	movwf	??_sprintf
  4151  0510  01BA               	clrf	??_sprintf+1
  4152  0511  1BB9               	btfsc	??_sprintf,7
  4153  0512  03BA               	decf	??_sprintf+1,f
  4154  0513  083A               	movf	??_sprintf+1,w
  4155  0514  3A80               	xorlw	128
  4156  0515  00BB               	movwf	??_sprintf+2
  4157  0516  0845               	movf	sprintf@width+1,w
  4158  0517  3A80               	xorlw	128
  4159  0518  023B               	subwf	??_sprintf+2,w
  4160  0519  1D03               	skipz
  4161  051A  2D1D               	goto	u2235
  4162  051B  0844               	movf	sprintf@width,w
  4163  051C  0239               	subwf	??_sprintf,w
  4164  051D                     u2235:	
  4165  051D  1803               	skipnc
  4166  051E  2D2C               	goto	l2787
  4167                           
  4168                           ;doprnt.c: 1357: width -= prec;
  4169  051F  1283               	bcf	3,5	;RP0=0, select bank0
  4170  0520  1303               	bcf	3,6	;RP1=0, select bank0
  4171  0521  0843               	movf	sprintf@prec,w
  4172  0522  00B9               	movwf	??_sprintf
  4173  0523  01BA               	clrf	??_sprintf+1
  4174  0524  1BB9               	btfsc	??_sprintf,7
  4175  0525  03BA               	decf	??_sprintf+1,f
  4176  0526  02C4               	subwf	sprintf@width,f
  4177  0527  083A               	movf	??_sprintf+1,w
  4178  0528  1C03               	skipc
  4179  0529  03C5               	decf	sprintf@width+1,f
  4180  052A  02C5               	subwf	sprintf@width+1,f
  4181  052B  2D30               	goto	l2789
  4182  052C                     l2787:	
  4183                           
  4184                           ;doprnt.c: 1358: else
  4185                           ;doprnt.c: 1359: width = 0;
  4186  052C  1283               	bcf	3,5	;RP0=0, select bank0
  4187  052D  1303               	bcf	3,6	;RP1=0, select bank0
  4188  052E  01C4               	clrf	sprintf@width
  4189  052F  01C5               	clrf	sprintf@width+1
  4190  0530                     l2789:	
  4191                           
  4192                           ;doprnt.c: 1360: }
  4193                           ;doprnt.c: 1364: if((flag & (
  4194                           ;doprnt.c: 1366: 0x04|
  4195                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
  4196  0530  30C4               	movlw	196
  4197  0531  054B               	andwf	sprintf@flag,w
  4198  0532  00B9               	movwf	??_sprintf
  4199  0533  3008               	movlw	8
  4200  0534  054C               	andwf	sprintf@flag+1,w
  4201  0535  00BA               	movwf	??_sprintf+1
  4202  0536  3A08               	xorlw	8
  4203  0537  3040               	movlw	64
  4204  0538  1903               	skipnz
  4205  0539  0639               	xorwf	??_sprintf,w
  4206  053A  1D03               	skipz
  4207  053B  2D42               	goto	l2795
  4208                           
  4209                           ;doprnt.c: 1369: if(width)
  4210  053C  0845               	movf	sprintf@width+1,w
  4211  053D  0444               	iorwf	sprintf@width,w
  4212  053E  1903               	skipnz
  4213  053F  2D64               	goto	l2803
  4214                           
  4215                           ;doprnt.c: 1370: width--;
  4216  0540  30FF               	movlw	-1
  4217  0541  2D5C               	goto	L5
  4218  0542                     l2795:	
  4219                           
  4220                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  4221  0542  30C0               	movlw	192
  4222  0543  054B               	andwf	sprintf@flag,w
  4223  0544  00B9               	movwf	??_sprintf
  4224  0545  3008               	movlw	8
  4225  0546  054C               	andwf	sprintf@flag+1,w
  4226  0547  00BA               	movwf	??_sprintf+1
  4227  0548  3A08               	xorlw	8
  4228  0549  3080               	movlw	128
  4229  054A  1903               	skipnz
  4230  054B  0639               	xorwf	??_sprintf,w
  4231  054C  1D03               	skipz
  4232  054D  2D64               	goto	l2803
  4233                           
  4234                           ;doprnt.c: 1379: if(width > 2)
  4235  054E  0845               	movf	sprintf@width+1,w
  4236  054F  3A80               	xorlw	128
  4237  0550  00FF               	movwf	127
  4238  0551  3080               	movlw	128
  4239  0552  027F               	subwf	127,w
  4240  0553  1D03               	skipz
  4241  0554  2D57               	goto	u2275
  4242  0555  3003               	movlw	3
  4243  0556  0244               	subwf	sprintf@width,w
  4244  0557                     u2275:	
  4245  0557  1C03               	skipc
  4246  0558  2D60               	goto	l2801
  4247                           
  4248                           ;doprnt.c: 1380: width -= 2;
  4249  0559  30FE               	movlw	-2
  4250  055A  1283               	bcf	3,5	;RP0=0, select bank0
  4251  055B  1303               	bcf	3,6	;RP1=0, select bank0
  4252  055C                     L5:	
  4253  055C  07C4               	addwf	sprintf@width,f
  4254  055D  1C03               	skipc
  4255  055E  03C5               	decf	sprintf@width+1,f
  4256  055F  2D64               	goto	l2803
  4257  0560                     l2801:	
  4258                           
  4259                           ;doprnt.c: 1381: else
  4260                           ;doprnt.c: 1382: width = 0;
  4261  0560  1283               	bcf	3,5	;RP0=0, select bank0
  4262  0561  1303               	bcf	3,6	;RP1=0, select bank0
  4263  0562  01C4               	clrf	sprintf@width
  4264  0563  01C5               	clrf	sprintf@width+1
  4265  0564                     l2803:	
  4266                           
  4267                           ;doprnt.c: 1383: }
  4268                           ;doprnt.c: 1388: if(width > c)
  4269  0564  0849               	movf	sprintf@c,w
  4270  0565  00B9               	movwf	??_sprintf
  4271  0566  01BA               	clrf	??_sprintf+1
  4272  0567  1BB9               	btfsc	??_sprintf,7
  4273  0568  03BA               	decf	??_sprintf+1,f
  4274  0569  083A               	movf	??_sprintf+1,w
  4275  056A  3A80               	xorlw	128
  4276  056B  00BB               	movwf	??_sprintf+2
  4277  056C  0845               	movf	sprintf@width+1,w
  4278  056D  3A80               	xorlw	128
  4279  056E  023B               	subwf	??_sprintf+2,w
  4280  056F  1D03               	skipz
  4281  0570  2D73               	goto	u2285
  4282  0571  0844               	movf	sprintf@width,w
  4283  0572  0239               	subwf	??_sprintf,w
  4284  0573                     u2285:	
  4285  0573  1803               	skipnc
  4286  0574  2D82               	goto	l2807
  4287                           
  4288                           ;doprnt.c: 1389: width -= c;
  4289  0575  1283               	bcf	3,5	;RP0=0, select bank0
  4290  0576  1303               	bcf	3,6	;RP1=0, select bank0
  4291  0577  0849               	movf	sprintf@c,w
  4292  0578  00B9               	movwf	??_sprintf
  4293  0579  01BA               	clrf	??_sprintf+1
  4294  057A  1BB9               	btfsc	??_sprintf,7
  4295  057B  03BA               	decf	??_sprintf+1,f
  4296  057C  02C4               	subwf	sprintf@width,f
  4297  057D  083A               	movf	??_sprintf+1,w
  4298  057E  1C03               	skipc
  4299  057F  03C5               	decf	sprintf@width+1,f
  4300  0580  02C5               	subwf	sprintf@width+1,f
  4301  0581  2D86               	goto	l2809
  4302  0582                     l2807:	
  4303                           
  4304                           ;doprnt.c: 1390: else
  4305                           ;doprnt.c: 1391: width = 0;
  4306  0582  1283               	bcf	3,5	;RP0=0, select bank0
  4307  0583  1303               	bcf	3,6	;RP1=0, select bank0
  4308  0584  01C4               	clrf	sprintf@width
  4309  0585  01C5               	clrf	sprintf@width+1
  4310  0586                     l2809:	
  4311                           
  4312                           ;doprnt.c: 1394: if(flag & 0x04) {
  4313  0586  1D4B               	btfss	sprintf@flag,2
  4314  0587  2DC4               	goto	l2845
  4315                           
  4316                           ;doprnt.c: 1399: if(flag & 0x03)
  4317  0588  084B               	movf	sprintf@flag,w
  4318  0589  3903               	andlw	3
  4319  058A  1903               	btfsc	3,2
  4320  058B  2D91               	goto	l512
  4321                           
  4322                           ;doprnt.c: 1400: ((*sp++ = ('-')));
  4323  058C  084A               	movf	sprintf@sp,w
  4324  058D  0084               	movwf	4
  4325  058E  302D               	movlw	45
  4326  058F                     L6:	
  4327  058F  1383               	bcf	3,7	;select IRP bank0
  4328  0590  2DB3               	goto	L13
  4329  0591                     l512:	
  4330                           
  4331                           ;doprnt.c: 1403: else
  4332                           ;doprnt.c: 1406: if(flag & 0x01)
  4333  0591  1C4B               	btfss	sprintf@flag,0
  4334  0592  2D97               	goto	l2821
  4335                           
  4336                           ;doprnt.c: 1407: ((*sp++ = (' ')));
  4337  0593  084A               	movf	sprintf@sp,w
  4338  0594  0084               	movwf	4
  4339  0595  3020               	movlw	32
  4340  0596  2D8F               	goto	L6
  4341  0597                     l2821:	
  4342                           
  4343                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  4344  0597  30C0               	movlw	192
  4345  0598  054B               	andwf	sprintf@flag,w
  4346  0599  00B9               	movwf	??_sprintf
  4347  059A  3008               	movlw	8
  4348  059B  054C               	andwf	sprintf@flag+1,w
  4349  059C  00BA               	movwf	??_sprintf+1
  4350  059D  3A08               	xorlw	8
  4351  059E  3080               	movlw	128
  4352  059F  1903               	skipnz
  4353  05A0  0639               	xorwf	??_sprintf,w
  4354  05A1  1D03               	skipz
  4355  05A2  2DB5               	goto	l2837
  4356                           
  4357                           ;doprnt.c: 1411: ((*sp++ = ('0')));
  4358  05A3  084A               	movf	sprintf@sp,w
  4359  05A4  0084               	movwf	4
  4360  05A5  3030               	movlw	48
  4361  05A6  1383               	bcf	3,7	;select IRP bank0
  4362  05A7  0080               	movwf	0
  4363  05A8  0ACA               	incf	sprintf@sp,f
  4364                           
  4365                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  4366  05A9  1ACB               	btfsc	sprintf@flag,5
  4367  05AA  2DAD               	goto	l2831
  4368  05AB  3078               	movlw	120
  4369  05AC  2DAE               	goto	L7
  4370  05AD                     l2831:	
  4371  05AD  3058               	movlw	88
  4372  05AE                     L7:	
  4373  05AE  00BC               	movwf	_sprintf$1127
  4374  05AF  01BD               	clrf	_sprintf$1127+1
  4375  05B0  084A               	movf	sprintf@sp,w
  4376  05B1  0084               	movwf	4
  4377  05B2  083C               	movf	_sprintf$1127,w
  4378  05B3                     L13:	
  4379  05B3  0080               	movwf	0
  4380  05B4  0ACA               	incf	sprintf@sp,f
  4381  05B5                     l2837:	
  4382                           
  4383                           ;doprnt.c: 1419: }
  4384                           ;doprnt.c: 1422: if(width)
  4385  05B5  0845               	movf	sprintf@width+1,w
  4386  05B6  0444               	iorwf	sprintf@width,w
  4387  05B7  1903               	skipnz
  4388  05B8  2E7F               	goto	l2911
  4389                           
  4390                           ;doprnt.c: 1424: ((*sp++ = ('0')));
  4391  05B9  084A               	movf	sprintf@sp,w
  4392  05BA  0084               	movwf	4
  4393  05BB  3030               	movlw	48
  4394  05BC  1383               	bcf	3,7	;select IRP bank0
  4395  05BD  0080               	movwf	0
  4396  05BE  30FF               	movlw	-1
  4397  05BF  0ACA               	incf	sprintf@sp,f
  4398                           
  4399                           ;doprnt.c: 1425: while(--width);
  4400  05C0  07C4               	addwf	sprintf@width,f
  4401  05C1  1C03               	skipc
  4402  05C2  03C5               	decf	sprintf@width+1,f
  4403  05C3  2DB5               	goto	l2837
  4404  05C4                     l2845:	
  4405                           
  4406                           ;doprnt.c: 1429: {
  4407                           ;doprnt.c: 1431: if(width
  4408                           ;doprnt.c: 1433: && !(flag & 0x08)
  4409                           ;doprnt.c: 1435: )
  4410  05C4  0845               	movf	sprintf@width+1,w
  4411  05C5  0444               	iorwf	sprintf@width,w
  4412  05C6  1D03               	btfss	3,2
  4413  05C7  19CB               	btfsc	sprintf@flag,3
  4414  05C8  2DD7               	goto	l2855
  4415  05C9                     l2849:	
  4416                           
  4417                           ;doprnt.c: 1437: ((*sp++ = (' ')));
  4418  05C9  084A               	movf	sprintf@sp,w
  4419  05CA  0084               	movwf	4
  4420  05CB  3020               	movlw	32
  4421  05CC  1383               	bcf	3,7	;select IRP bank0
  4422  05CD  0080               	movwf	0
  4423  05CE  30FF               	movlw	-1
  4424  05CF  0ACA               	incf	sprintf@sp,f
  4425                           
  4426                           ;doprnt.c: 1438: while(--width);
  4427  05D0  07C4               	addwf	sprintf@width,f
  4428  05D1  1C03               	skipc
  4429  05D2  03C5               	decf	sprintf@width+1,f
  4430  05D3  0845               	movf	sprintf@width+1,w
  4431  05D4  0444               	iorwf	sprintf@width,w
  4432  05D5  1D03               	skipz
  4433  05D6  2DC9               	goto	l2849
  4434  05D7                     l2855:	
  4435                           
  4436                           ;doprnt.c: 1445: if(flag & 0x03)
  4437  05D7  084B               	movf	sprintf@flag,w
  4438  05D8  3903               	andlw	3
  4439  05D9  1903               	btfsc	3,2
  4440  05DA  2DDF               	goto	l528
  4441                           
  4442                           ;doprnt.c: 1446: ((*sp++ = ('-')));
  4443  05DB  084A               	movf	sprintf@sp,w
  4444  05DC  0084               	movwf	4
  4445  05DD  302D               	movlw	45
  4446  05DE  2DE4               	goto	L14
  4447  05DF                     l528:	
  4448                           
  4449                           ;doprnt.c: 1450: else if(flag & 0x01)
  4450  05DF  1C4B               	btfss	sprintf@flag,0
  4451  05E0  2DE7               	goto	l2865
  4452                           
  4453                           ;doprnt.c: 1451: ((*sp++ = (' ')));
  4454  05E1  084A               	movf	sprintf@sp,w
  4455  05E2  0084               	movwf	4
  4456  05E3  3020               	movlw	32
  4457  05E4                     L14:	
  4458  05E4  1383               	bcf	3,7	;select IRP bank0
  4459  05E5  0080               	movwf	0
  4460  05E6  0ACA               	incf	sprintf@sp,f
  4461  05E7                     l2865:	
  4462                           
  4463                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  4464  05E7  30C0               	movlw	192
  4465  05E8  054B               	andwf	sprintf@flag,w
  4466  05E9  00B9               	movwf	??_sprintf
  4467  05EA  3008               	movlw	8
  4468  05EB  054C               	andwf	sprintf@flag+1,w
  4469  05EC  00BA               	movwf	??_sprintf+1
  4470  05ED  3A08               	xorlw	8
  4471  05EE  3040               	movlw	64
  4472  05EF  1903               	skipnz
  4473  05F0  0639               	xorwf	??_sprintf,w
  4474  05F1  1D03               	skipz
  4475  05F2  2DF7               	goto	l2871
  4476                           
  4477                           ;doprnt.c: 1456: ((*sp++ = ('0')));
  4478  05F3  084A               	movf	sprintf@sp,w
  4479  05F4  0084               	movwf	4
  4480  05F5  3030               	movlw	48
  4481  05F6  2E7C               	goto	L16
  4482  05F7                     l2871:	
  4483                           
  4484                           ;doprnt.c: 1457: else
  4485                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  4486  05F7  30C0               	movlw	192
  4487  05F8  054B               	andwf	sprintf@flag,w
  4488  05F9  00B9               	movwf	??_sprintf
  4489  05FA  3008               	movlw	8
  4490  05FB  054C               	andwf	sprintf@flag+1,w
  4491  05FC  00BA               	movwf	??_sprintf+1
  4492  05FD  3A08               	xorlw	8
  4493  05FE  3080               	movlw	128
  4494  05FF  1903               	skipnz
  4495  0600  0639               	xorwf	??_sprintf,w
  4496  0601  1D03               	skipz
  4497  0602  2E7F               	goto	l2911
  4498                           
  4499                           ;doprnt.c: 1465: ((*sp++ = ('0')));
  4500  0603  084A               	movf	sprintf@sp,w
  4501  0604  0084               	movwf	4
  4502  0605  3030               	movlw	48
  4503  0606  1383               	bcf	3,7	;select IRP bank0
  4504  0607  0080               	movwf	0
  4505  0608  0ACA               	incf	sprintf@sp,f
  4506                           
  4507                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  4508  0609  1ACB               	btfsc	sprintf@flag,5
  4509  060A  2E0D               	goto	l2881
  4510  060B  3078               	movlw	120
  4511  060C  2E0E               	goto	L8
  4512  060D                     l2881:	
  4513  060D  3058               	movlw	88
  4514  060E                     L8:	
  4515  060E  00BE               	movwf	_sprintf$1128
  4516  060F  01BF               	clrf	_sprintf$1128+1
  4517  0610  084A               	movf	sprintf@sp,w
  4518  0611  0084               	movwf	4
  4519  0612  083E               	movf	_sprintf$1128,w
  4520  0613  2E7D               	goto	L15
  4521  0614                     l2887:	
  4522                           ;doprnt.c: 1473: }
  4523                           ;doprnt.c: 1476: }
  4524                           ;doprnt.c: 1481: while(prec--) {
  4525                           
  4526                           
  4527                           ;doprnt.c: 1493: case 0xC0:
  4528                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
  4529  0614  300A               	movlw	10
  4530  0615  00A7               	movwf	?___lwmod
  4531  0616  01A8               	clrf	?___lwmod+1
  4532  0617  1003               	clrc
  4533  0618  0D43               	rlf	sprintf@prec,w
  4534  0619  3E0D               	addlw	low (_dpowers-__stringbase)
  4535  061A  0084               	movwf	4
  4536  061B  158A  2100  118A   	fcall	stringdir
  4537  061E  00A0               	movwf	?___lwdiv
  4538  061F  158A  2100  118A   	fcall	stringdir
  4539  0622  00A1               	movwf	?___lwdiv+1
  4540  0623  0847               	movf	sprintf@_val+1,w
  4541  0624  00A3               	movwf	?___lwdiv+3
  4542  0625  0846               	movf	sprintf@_val,w
  4543  0626  00A2               	movwf	?___lwdiv+2
  4544  0627  26A5  118A         	fcall	___lwdiv
  4545  0629  0821               	movf	?___lwdiv+1,w
  4546  062A  00AA               	movwf	?___lwmod+3
  4547  062B  0820               	movf	?___lwdiv,w
  4548  062C  00A9               	movwf	?___lwmod+2
  4549  062D  26DD  118A         	fcall	___lwmod
  4550  062F  0827               	movf	?___lwmod,w
  4551  0630  2E68               	goto	L17
  4552  0631                     l2889:	
  4553                           ;doprnt.c: 1498: break;
  4554                           
  4555                           
  4556                           ;doprnt.c: 1506: {
  4557                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
  4558  0631  0847               	movf	sprintf@_val+1,w
  4559  0632  00A3               	movwf	?___lwdiv+3
  4560  0633  0846               	movf	sprintf@_val,w
  4561  0634  00A2               	movwf	?___lwdiv+2
  4562  0635  1003               	clrc
  4563  0636  0D43               	rlf	sprintf@prec,w
  4564  0637  3E17               	addlw	low (_hexpowers-__stringbase)
  4565  0638  0084               	movwf	4
  4566  0639  158A  2100  118A   	fcall	stringdir
  4567  063C  00A0               	movwf	?___lwdiv
  4568  063D  158A  2100  118A   	fcall	stringdir
  4569  0640  00A1               	movwf	?___lwdiv+1
  4570  0641  26A5  118A         	fcall	___lwdiv
  4571  0643  0820               	movf	?___lwdiv,w
  4572  0644  00C0               	movwf	sprintf@idx
  4573  0645  300F               	movlw	15
  4574  0646  05C0               	andwf	sprintf@idx,f
  4575                           
  4576                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  4577  0647  1ACB               	btfsc	sprintf@flag,5
  4578  0648  2E4B               	goto	l2897
  4579  0649  3087               	movlw	(STR_5-__stringbase)& (0+255)
  4580  064A  2E4C               	goto	L11
  4581  064B                     l2897:	
  4582  064B  3076               	movlw	(STR_4-__stringbase)& (0+255)
  4583  064C                     L11:	
  4584  064C  00C1               	movwf	_sprintf$1134
  4585  064D  0840               	movf	sprintf@idx,w
  4586  064E  0741               	addwf	_sprintf$1134,w
  4587  064F  0084               	movwf	4
  4588  0650  158A  2100  118A   	fcall	stringdir
  4589  0653  2E69               	goto	L12
  4590  0654                     l2901:	
  4591                           ;doprnt.c: 1515: }
  4592                           ;doprnt.c: 1517: break;
  4593                           
  4594                           
  4595                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
  4596  0654  1003               	clrc
  4597  0655  0D43               	rlf	sprintf@prec,w
  4598  0656  3E01               	addlw	low (_octpowers-__stringbase)
  4599  0657  0084               	movwf	4
  4600  0658  158A  2100  118A   	fcall	stringdir
  4601  065B  00A0               	movwf	?___lwdiv
  4602  065C  158A  2100  118A   	fcall	stringdir
  4603  065F  00A1               	movwf	?___lwdiv+1
  4604  0660  0847               	movf	sprintf@_val+1,w
  4605  0661  00A3               	movwf	?___lwdiv+3
  4606  0662  0846               	movf	sprintf@_val,w
  4607  0663  00A2               	movwf	?___lwdiv+2
  4608  0664  26A5  118A         	fcall	___lwdiv
  4609  0666  0820               	movf	?___lwdiv,w
  4610  0667  3907               	andlw	7
  4611  0668                     L17:	
  4612  0668  3E30               	addlw	48
  4613  0669                     L12:	
  4614  0669  00C9               	movwf	sprintf@c
  4615                           
  4616                           ;doprnt.c: 1527: break;
  4617  066A  2E79               	goto	l2907
  4618  066B                     l2905:	
  4619  066B  084B               	movf	sprintf@flag,w
  4620  066C  39C0               	andlw	192
  4621                           
  4622                           ; Switch size 1, requested type "speed"
  4623                           ; Number of cases is 4, Range of values is 0 to 192
  4624                           ; switch strategies available:
  4625                           ; Name         Instructions Cycles
  4626                           ; simple_byte           13     7 (average)
  4627                           ; jumptable            260     6 (fixed)
  4628                           ; rangetable           197     6 (fixed)
  4629                           ; spacedrange          392     9 (fixed)
  4630                           ; locatedrange         193     3 (fixed)
  4631                           ;	Chosen strategy is simple_byte
  4632  066D  1903               	skipnz
  4633  066E  2E14               	goto	l2887
  4634  066F  3A40               	xorlw	64	; case 64
  4635  0670  1903               	skipnz
  4636  0671  2E54               	goto	l2901
  4637  0672  3AC0               	xorlw	192	; case 128
  4638  0673  1903               	skipnz
  4639  0674  2E31               	goto	l2889
  4640  0675  3A40               	xorlw	64	; case 192
  4641  0676  1903               	skipnz
  4642  0677  2E14               	goto	l2887
  4643  0678  2E79               	goto	l2907
  4644  0679                     l2907:	
  4645                           
  4646                           ;doprnt.c: 1531: ((*sp++ = (c)));
  4647  0679  084A               	movf	sprintf@sp,w
  4648  067A  0084               	movwf	4
  4649  067B  0849               	movf	sprintf@c,w
  4650  067C                     L16:	
  4651  067C  1383               	bcf	3,7	;select IRP bank0
  4652  067D                     L15:	
  4653  067D  0080               	movwf	0
  4654  067E  0ACA               	incf	sprintf@sp,f
  4655  067F                     l2911:	
  4656  067F  03C3               	decf	sprintf@prec,f
  4657  0680  0F43               	incfsz	sprintf@prec,w
  4658  0681  2E6B               	goto	l2905
  4659                           
  4660                           ;doprnt.c: 1532: }
  4661                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
  4662  0682  1DCB               	btfss	sprintf@flag,3
  4663  0683  2B27               	goto	l2921
  4664  0684  0845               	movf	sprintf@width+1,w
  4665  0685  3A80               	xorlw	128
  4666  0686  00FF               	movwf	127
  4667  0687  3080               	movlw	128
  4668  0688  027F               	subwf	127,w
  4669  0689  1D03               	skipz
  4670  068A  2E8D               	goto	u2475
  4671  068B  3001               	movlw	1
  4672  068C  0244               	subwf	sprintf@width,w
  4673  068D                     u2475:	
  4674  068D  1C03               	skipc
  4675  068E  2B27               	goto	l2921
  4676  068F                     l2915:	
  4677                           
  4678                           ;doprnt.c: 1537: ((*sp++ = (' ')));
  4679  068F  1283               	bcf	3,5	;RP0=0, select bank0
  4680  0690  1303               	bcf	3,6	;RP1=0, select bank0
  4681  0691  084A               	movf	sprintf@sp,w
  4682  0692  0084               	movwf	4
  4683  0693  3020               	movlw	32
  4684  0694  1383               	bcf	3,7	;select IRP bank0
  4685  0695  0080               	movwf	0
  4686  0696  30FF               	movlw	-1
  4687  0697  0ACA               	incf	sprintf@sp,f
  4688                           
  4689                           ;doprnt.c: 1538: while(--width);
  4690  0698  07C4               	addwf	sprintf@width,f
  4691  0699  1C03               	skipc
  4692  069A  03C5               	decf	sprintf@width+1,f
  4693  069B  0845               	movf	sprintf@width+1,w
  4694  069C  0444               	iorwf	sprintf@width,w
  4695  069D  1903               	btfsc	3,2
  4696  069E  2B27               	goto	l2921
  4697  069F  2E8F               	goto	l2915
  4698  06A0                     l2923:	
  4699                           
  4700                           ;doprnt.c: 1545: *sp = 0;
  4701  06A0  084A               	movf	sprintf@sp,w
  4702  06A1  0084               	movwf	4
  4703  06A2  1383               	bcf	3,7	;select IRP bank0
  4704  06A3  0180               	clrf	0
  4705  06A4  0008               	return
  4706  06A5                     __end_of_sprintf:	
  4707  06A5                     __ptext765:	
  4708 ;; *************** function ___lwdiv *****************
  4709 ;; Defined at:
  4710 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.12\sources\lwdiv.c"
  4711 ;; Parameters:    Size  Location     Type
  4712 ;;  divisor         2    0[BANK0 ] unsigned int 
  4713 ;;  dividend        2    2[BANK0 ] unsigned int 
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;  quotient        2    4[BANK0 ] unsigned int 
  4716 ;;  counter         1    6[BANK0 ] unsigned char 
  4717 ;; Return value:  Size  Location     Type
  4718 ;;                  2    0[BANK0 ] unsigned int 
  4719 ;; Registers used:
  4720 ;;		wreg, status,2, status,0
  4721 ;; Tracked objects:
  4722 ;;		On entry : 60/0
  4723 ;;		On exit  : 60/0
  4724 ;;		Unchanged: FFF9F/0
  4725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4726 ;;      Params:         0       4       0       0
  4727 ;;      Locals:         0       3       0       0
  4728 ;;      Temps:          0       0       0       0
  4729 ;;      Totals:         0       7       0       0
  4730 ;;Total ram usage:        7 bytes
  4731 ;; Hardware stack levels used:    1
  4732 ;; Hardware stack levels required when called:    2
  4733 ;; This function calls:
  4734 ;;		Nothing
  4735 ;; This function is called by:
  4736 ;;		_sprintf
  4737 ;; This function uses a non-reentrant model
  4738 ;;
  4739                           
  4740                           
  4741                           ;psect for function ___lwdiv
  4742  06A5                     ___lwdiv:	
  4743                           
  4744                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4745  06A5  01A4               	clrf	___lwdiv@quotient
  4746  06A6  01A5               	clrf	___lwdiv@quotient+1
  4747  06A7  0821               	movf	___lwdiv@divisor+1,w
  4748  06A8  0420               	iorwf	___lwdiv@divisor,w
  4749  06A9  1903               	skipnz
  4750  06AA  2ECA               	goto	l3439
  4751  06AB  01A6               	clrf	___lwdiv@counter
  4752  06AC                     L19:	
  4753  06AC  0AA6               	incf	___lwdiv@counter,f
  4754  06AD  1BA1               	btfsc	___lwdiv@divisor+1,7
  4755  06AE  2EB3               	goto	l3427
  4756  06AF  1003               	clrc
  4757  06B0  0DA0               	rlf	___lwdiv@divisor,f
  4758  06B1  0DA1               	rlf	___lwdiv@divisor+1,f
  4759  06B2  2EAC               	goto	L19
  4760  06B3                     l3427:	
  4761  06B3  1003               	clrc
  4762  06B4  0DA4               	rlf	___lwdiv@quotient,f
  4763  06B5  0DA5               	rlf	___lwdiv@quotient+1,f
  4764  06B6  0821               	movf	___lwdiv@divisor+1,w
  4765  06B7  0223               	subwf	___lwdiv@dividend+1,w
  4766  06B8  1D03               	skipz
  4767  06B9  2EBC               	goto	u2925
  4768  06BA  0820               	movf	___lwdiv@divisor,w
  4769  06BB  0222               	subwf	___lwdiv@dividend,w
  4770  06BC                     u2925:	
  4771  06BC  1C03               	skipc
  4772  06BD  2EC6               	goto	L20
  4773  06BE  0820               	movf	___lwdiv@divisor,w
  4774  06BF  02A2               	subwf	___lwdiv@dividend,f
  4775  06C0  0821               	movf	___lwdiv@divisor+1,w
  4776  06C1  1C03               	skipc
  4777  06C2  03A3               	decf	___lwdiv@dividend+1,f
  4778  06C3  02A3               	subwf	___lwdiv@dividend+1,f
  4779  06C4  1424               	bsf	___lwdiv@quotient,0
  4780  06C5  1003               	clrc
  4781  06C6                     L20:	
  4782  06C6  0CA1               	rrf	___lwdiv@divisor+1,f
  4783  06C7  0CA0               	rrf	___lwdiv@divisor,f
  4784  06C8  0BA6               	decfsz	___lwdiv@counter,f
  4785  06C9  2EB3               	goto	l3427
  4786  06CA                     l3439:	
  4787  06CA  0825               	movf	___lwdiv@quotient+1,w
  4788  06CB  00A1               	movwf	?___lwdiv+1
  4789  06CC  0824               	movf	___lwdiv@quotient,w
  4790  06CD  00A0               	movwf	?___lwdiv
  4791  06CE  0008               	return
  4792  06CF                     __end_of___lwdiv:	
  4793  06CF                     __ptext762:	
  4794 ;; *************** function _isdigit *****************
  4795 ;; Defined at:
  4796 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.12\sources\isdigit.c"
  4797 ;; Parameters:    Size  Location     Type
  4798 ;;  c               1    wreg     unsigned char 
  4799 ;; Auto vars:     Size  Location     Type
  4800 ;;  c               1    1[BANK0 ] unsigned char 
  4801 ;; Return value:  Size  Location     Type
  4802 ;;		None               void
  4803 ;; Registers used:
  4804 ;;		wreg, status,2, status,0
  4805 ;; Tracked objects:
  4806 ;;		On entry : 60/0
  4807 ;;		On exit  : 60/0
  4808 ;;		Unchanged: FFF9F/0
  4809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4810 ;;      Params:         0       0       0       0
  4811 ;;      Locals:         0       2       0       0
  4812 ;;      Temps:          0       0       0       0
  4813 ;;      Totals:         0       2       0       0
  4814 ;;Total ram usage:        2 bytes
  4815 ;; Hardware stack levels used:    1
  4816 ;; Hardware stack levels required when called:    2
  4817 ;; This function calls:
  4818 ;;		Nothing
  4819 ;; This function is called by:
  4820 ;;		_sprintf
  4821 ;; This function uses a non-reentrant model
  4822 ;;
  4823                           
  4824                           
  4825                           ;psect for function _isdigit
  4826  06CF                     _isdigit:	
  4827                           
  4828                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4829                           ;isdigit@c stored from wreg
  4830  06CF  00A1               	movwf	isdigit@c
  4831  06D0  303A               	movlw	58
  4832  06D1  01A0               	clrf	_isdigit$1192
  4833  06D2  0221               	subwf	isdigit@c,w
  4834  06D3  1803               	skipnc
  4835  06D4  2EDB               	goto	l3381
  4836  06D5  3030               	movlw	48
  4837  06D6  0221               	subwf	isdigit@c,w
  4838  06D7  1C03               	skipc
  4839  06D8  2EDB               	goto	l3381
  4840  06D9  01A0               	clrf	_isdigit$1192
  4841  06DA  0AA0               	incf	_isdigit$1192,f
  4842  06DB                     l3381:	
  4843  06DB  0C20               	rrf	_isdigit$1192,w
  4844  06DC  0008               	return
  4845  06DD                     __end_of_isdigit:	
  4846  06DD                     __ptext766:	
  4847 ;; *************** function ___lwmod *****************
  4848 ;; Defined at:
  4849 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.12\sources\lwmod.c"
  4850 ;; Parameters:    Size  Location     Type
  4851 ;;  divisor         2    7[BANK0 ] unsigned int 
  4852 ;;  dividend        2    9[BANK0 ] unsigned int 
  4853 ;; Auto vars:     Size  Location     Type
  4854 ;;  counter         1   11[BANK0 ] unsigned char 
  4855 ;; Return value:  Size  Location     Type
  4856 ;;                  2    7[BANK0 ] unsigned int 
  4857 ;; Registers used:
  4858 ;;		wreg, status,2, status,0
  4859 ;; Tracked objects:
  4860 ;;		On entry : 60/0
  4861 ;;		On exit  : 60/0
  4862 ;;		Unchanged: FFF9F/0
  4863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4864 ;;      Params:         0       4       0       0
  4865 ;;      Locals:         0       1       0       0
  4866 ;;      Temps:          0       0       0       0
  4867 ;;      Totals:         0       5       0       0
  4868 ;;Total ram usage:        5 bytes
  4869 ;; Hardware stack levels used:    1
  4870 ;; Hardware stack levels required when called:    2
  4871 ;; This function calls:
  4872 ;;		Nothing
  4873 ;; This function is called by:
  4874 ;;		_sprintf
  4875 ;; This function uses a non-reentrant model
  4876 ;;
  4877                           
  4878                           
  4879                           ;psect for function ___lwmod
  4880  06DD                     ___lwmod:	
  4881                           
  4882                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4883  06DD  0828               	movf	___lwmod@divisor+1,w
  4884  06DE  0427               	iorwf	___lwmod@divisor,w
  4885  06DF  1903               	skipnz
  4886  06E0  2EFC               	goto	l3459
  4887  06E1  01AB               	clrf	___lwmod@counter
  4888  06E2                     L21:	
  4889  06E2  0AAB               	incf	___lwmod@counter,f
  4890  06E3  1BA8               	btfsc	___lwmod@divisor+1,7
  4891  06E4  2EE9               	goto	l3451
  4892  06E5  1003               	clrc
  4893  06E6  0DA7               	rlf	___lwmod@divisor,f
  4894  06E7  0DA8               	rlf	___lwmod@divisor+1,f
  4895  06E8  2EE2               	goto	L21
  4896  06E9                     l3451:	
  4897  06E9  0828               	movf	___lwmod@divisor+1,w
  4898  06EA  022A               	subwf	___lwmod@dividend+1,w
  4899  06EB  1D03               	skipz
  4900  06EC  2EEF               	goto	u2965
  4901  06ED  0827               	movf	___lwmod@divisor,w
  4902  06EE  0229               	subwf	___lwmod@dividend,w
  4903  06EF                     u2965:	
  4904  06EF  1C03               	skipc
  4905  06F0  2EF8               	goto	L22
  4906  06F1  0827               	movf	___lwmod@divisor,w
  4907  06F2  02A9               	subwf	___lwmod@dividend,f
  4908  06F3  0828               	movf	___lwmod@divisor+1,w
  4909  06F4  1C03               	skipc
  4910  06F5  03AA               	decf	___lwmod@dividend+1,f
  4911  06F6  02AA               	subwf	___lwmod@dividend+1,f
  4912  06F7  1003               	clrc
  4913  06F8                     L22:	
  4914  06F8  0CA8               	rrf	___lwmod@divisor+1,f
  4915  06F9  0CA7               	rrf	___lwmod@divisor,f
  4916  06FA  0BAB               	decfsz	___lwmod@counter,f
  4917  06FB  2EE9               	goto	l3451
  4918  06FC                     l3459:	
  4919  06FC  082A               	movf	___lwmod@dividend+1,w
  4920  06FD  00A8               	movwf	?___lwmod+1
  4921  06FE  0829               	movf	___lwmod@dividend,w
  4922  06FF  00A7               	movwf	?___lwmod
  4923  0700  0008               	return
  4924  0701                     __end_of___lwmod:	
  4925  0701                     __ptext764:	
  4926 ;; *************** function ___wmul *****************
  4927 ;; Defined at:
  4928 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.12\sources\wmul.c"
  4929 ;; Parameters:    Size  Location     Type
  4930 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4931 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;  product         2    4[BANK0 ] unsigned int 
  4934 ;; Return value:  Size  Location     Type
  4935 ;;                  2    0[BANK0 ] unsigned int 
  4936 ;; Registers used:
  4937 ;;		wreg, status,2, status,0
  4938 ;; Tracked objects:
  4939 ;;		On entry : 60/0
  4940 ;;		On exit  : 60/0
  4941 ;;		Unchanged: FFF9F/0
  4942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4943 ;;      Params:         0       4       0       0
  4944 ;;      Locals:         0       2       0       0
  4945 ;;      Temps:          0       0       0       0
  4946 ;;      Totals:         0       6       0       0
  4947 ;;Total ram usage:        6 bytes
  4948 ;; Hardware stack levels used:    1
  4949 ;; Hardware stack levels required when called:    2
  4950 ;; This function calls:
  4951 ;;		Nothing
  4952 ;; This function is called by:
  4953 ;;		_sprintf
  4954 ;; This function uses a non-reentrant model
  4955 ;;
  4956                           
  4957                           
  4958                           ;psect for function ___wmul
  4959  0701                     ___wmul:	
  4960                           
  4961                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4962  0701  01A4               	clrf	___wmul@product
  4963  0702  01A5               	clrf	___wmul@product+1
  4964  0703                     l3403:	
  4965  0703  1C20               	btfss	___wmul@multiplier,0
  4966  0704  2F0B               	goto	l3407
  4967  0705  0822               	movf	___wmul@multiplicand,w
  4968  0706  07A4               	addwf	___wmul@product,f
  4969  0707  1803               	skipnc
  4970  0708  0AA5               	incf	___wmul@product+1,f
  4971  0709  0823               	movf	___wmul@multiplicand+1,w
  4972  070A  07A5               	addwf	___wmul@product+1,f
  4973  070B                     l3407:	
  4974  070B  1003               	clrc
  4975  070C  0DA2               	rlf	___wmul@multiplicand,f
  4976  070D  0DA3               	rlf	___wmul@multiplicand+1,f
  4977  070E  1003               	clrc
  4978  070F  0CA1               	rrf	___wmul@multiplier+1,f
  4979  0710  0CA0               	rrf	___wmul@multiplier,f
  4980  0711  0821               	movf	___wmul@multiplier+1,w
  4981  0712  0420               	iorwf	___wmul@multiplier,w
  4982  0713  1D03               	skipz
  4983  0714  2F03               	goto	l3403
  4984  0715  0825               	movf	___wmul@product+1,w
  4985  0716  00A1               	movwf	?___wmul+1
  4986  0717  0824               	movf	___wmul@product,w
  4987  0718  00A0               	movwf	?___wmul
  4988  0719  0008               	return
  4989  071A                     __end_of___wmul:	
  4990  071A                     __ptext758:	
  4991 ;; *************** function _putrsXLCDElement *****************
  4992 ;; Defined at:
  4993 ;;		line 182 in file "lcd.c"
  4994 ;; Parameters:    Size  Location     Type
  4995 ;;  data            1    wreg     PTR const unsigned char 
  4996 ;;		 -> menuString(51), 
  4997 ;;  element         1    3[BANK0 ] unsigned char 
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;  data            1    5[BANK0 ] PTR const unsigned char 
  5000 ;;		 -> menuString(51), 
  5001 ;;  currentEleme    1    4[BANK0 ] unsigned char 
  5002 ;; Return value:  Size  Location     Type
  5003 ;;		None               void
  5004 ;; Registers used:
  5005 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5006 ;; Tracked objects:
  5007 ;;		On entry : 160/0
  5008 ;;		On exit  : 60/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5011 ;;      Params:         0       1       0       0
  5012 ;;      Locals:         0       2       0       0
  5013 ;;      Temps:          0       0       0       0
  5014 ;;      Totals:         0       3       0       0
  5015 ;;Total ram usage:        3 bytes
  5016 ;; Hardware stack levels used:    1
  5017 ;; Hardware stack levels required when called:    4
  5018 ;; This function calls:
  5019 ;;		_putrsXLCD
  5020 ;; This function is called by:
  5021 ;;		_showConfigureBacklight
  5022 ;;		_showMainMenu
  5023 ;; This function uses a non-reentrant model
  5024 ;;
  5025                           
  5026                           
  5027                           ;psect for function _putrsXLCDElement
  5028  071A                     _putrsXLCDElement:	
  5029                           
  5030 ;; using string table level
  5031                           ; Regs used in _putrsXLCDElement: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5032                           ;putrsXLCDElement@data stored from wreg
  5033  071A  00A5               	movwf	putrsXLCDElement@data
  5034                           
  5035                           ;lcd.c: 183: uint8_t currentElement = 0;
  5036  071B  01A4               	clrf	putrsXLCDElement@currentElement
  5037                           
  5038                           ;lcd.c: 185: while (currentElement != element) {
  5039  071C  2F28               	goto	l3313
  5040  071D                     l3307:	
  5041                           
  5042                           ;lcd.c: 187: data++;
  5043  071D  0AA5               	incf	putrsXLCDElement@data,f
  5044  071E                     l3309:	
  5045  071E  0825               	movf	putrsXLCDElement@data,w
  5046  071F  0084               	movwf	4
  5047  0720  158A  2100  118A   	fcall	stringdir
  5048  0723  3800               	iorlw	0
  5049  0724  1D03               	skipz
  5050  0725  2F1D               	goto	l3307
  5051                           
  5052                           ;lcd.c: 188: }
  5053                           ;lcd.c: 189: data++;
  5054  0726  0AA5               	incf	putrsXLCDElement@data,f
  5055                           
  5056                           ;lcd.c: 190: currentElement++;
  5057  0727  0AA4               	incf	putrsXLCDElement@currentElement,f
  5058  0728                     l3313:	
  5059  0728  0824               	movf	putrsXLCDElement@currentElement,w
  5060  0729  0623               	xorwf	putrsXLCDElement@element,w
  5061  072A  1D03               	skipz
  5062  072B  2F1E               	goto	l3309
  5063                           
  5064                           ;lcd.c: 191: }
  5065                           ;lcd.c: 192: putrsXLCD(data);
  5066  072C  0825               	movf	putrsXLCDElement@data,w
  5067  072D  2B0C               	ljmp	_putrsXLCD
  5068  072E                     __end_of_putrsXLCDElement:	
  5069  072E                     __ptext763:	
  5070 ;; *************** function ___bmul *****************
  5071 ;; Defined at:
  5072 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.12\sources\bmul.c"
  5073 ;; Parameters:    Size  Location     Type
  5074 ;;  multiplier      1    wreg     unsigned char 
  5075 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;  multiplier      1    2[BANK0 ] unsigned char 
  5078 ;;  product         1    1[BANK0 ] unsigned char 
  5079 ;; Return value:  Size  Location     Type
  5080 ;;                  1    wreg      unsigned char 
  5081 ;; Registers used:
  5082 ;;		wreg, status,2, status,0
  5083 ;; Tracked objects:
  5084 ;;		On entry : 60/0
  5085 ;;		On exit  : 60/0
  5086 ;;		Unchanged: FFF9F/0
  5087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5088 ;;      Params:         0       1       0       0
  5089 ;;      Locals:         0       2       0       0
  5090 ;;      Temps:          0       0       0       0
  5091 ;;      Totals:         0       3       0       0
  5092 ;;Total ram usage:        3 bytes
  5093 ;; Hardware stack levels used:    1
  5094 ;; Hardware stack levels required when called:    2
  5095 ;; This function calls:
  5096 ;;		Nothing
  5097 ;; This function is called by:
  5098 ;;		_sprintf
  5099 ;; This function uses a non-reentrant model
  5100 ;;
  5101                           
  5102                           
  5103                           ;psect for function ___bmul
  5104  072E                     ___bmul:	
  5105                           
  5106                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5107                           ;___bmul@multiplier stored from wreg
  5108  072E  00A2               	movwf	___bmul@multiplier
  5109  072F  01A1               	clrf	___bmul@product
  5110  0730                     l3387:	
  5111  0730  0820               	movf	___bmul@multiplicand,w
  5112  0731  1822               	btfsc	___bmul@multiplier,0
  5113  0732  07A1               	addwf	___bmul@product,f
  5114  0733  1003               	clrc
  5115  0734  0DA0               	rlf	___bmul@multiplicand,f
  5116  0735  1003               	clrc
  5117  0736  0CA2               	rrf	___bmul@multiplier,f
  5118  0737  08A2               	movf	___bmul@multiplier,f
  5119  0738  1D03               	skipz
  5120  0739  2F30               	goto	l3387
  5121  073A  0821               	movf	___bmul@product,w
  5122  073B  0008               	return
  5123  073C                     __end_of___bmul:	
  5124  073C                     __ptext740:	
  5125 ;; *************** function _sendSerial *****************
  5126 ;; Defined at:
  5127 ;;		line 123 in file "main.c"
  5128 ;; Parameters:    Size  Location     Type
  5129 ;;  text            1    wreg     PTR const unsigned char 
  5130 ;;		 -> sendSeriotData@text(18), 
  5131 ;; Auto vars:     Size  Location     Type
  5132 ;;  text            1    0[BANK0 ] PTR const unsigned char 
  5133 ;;		 -> sendSeriotData@text(18), 
  5134 ;; Return value:  Size  Location     Type
  5135 ;;		None               void
  5136 ;; Registers used:
  5137 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5138 ;; Tracked objects:
  5139 ;;		On entry : 160/0
  5140 ;;		On exit  : 160/0
  5141 ;;		Unchanged: FFE9F/0
  5142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5143 ;;      Params:         0       0       0       0
  5144 ;;      Locals:         0       1       0       0
  5145 ;;      Temps:          0       0       0       0
  5146 ;;      Totals:         0       1       0       0
  5147 ;;Total ram usage:        1 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:    2
  5150 ;; This function calls:
  5151 ;;		Nothing
  5152 ;; This function is called by:
  5153 ;;		_sendSeriotData
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           
  5158                           ;psect for function _sendSerial
  5159  073C                     _sendSerial:	
  5160                           
  5161                           ; Regs used in _sendSerial: [wreg-fsr0h+status,2+status,0]
  5162                           ;sendSerial@text stored from wreg
  5163  073C  00A0               	movwf	sendSerial@text
  5164  073D                     l94:	
  5165                           ;main.c: 124: while (*text) {
  5166                           
  5167  073D  0820               	movf	sendSerial@text,w
  5168  073E  0084               	movwf	4
  5169  073F  0880               	movf	0,f
  5170  0740  1903               	btfsc	3,2
  5171  0741  0008               	return
  5172  0742                     l96:	
  5173  0742  1683               	bsf	3,5	;RP0=1, select bank1
  5174  0743  1C98               	btfss	24,1	;volatile
  5175  0744  2F42               	goto	l96
  5176                           
  5177                           ;main.c: 126: TXREG = *text;
  5178  0745  1283               	bcf	3,5	;RP0=0, select bank0
  5179  0746  0820               	movf	sendSerial@text,w
  5180  0747  0084               	movwf	4
  5181  0748  0800               	movf	0,w
  5182  0749  0099               	movwf	25	;volatile
  5183                           
  5184                           ;main.c: 127: *text++;
  5185  074A  0AA0               	incf	sendSerial@text,f
  5186  074B  2F3D               	goto	l94
  5187  074C                     __end_of_sendSerial:	
  5188                           
  5189                           	psect	text741
  5190  0A65                     __ptext741:	
  5191 ;; *************** function _ConfigureOscillator *****************
  5192 ;; Defined at:
  5193 ;;		line 16 in file "system.c"
  5194 ;; Parameters:    Size  Location     Type
  5195 ;;		None
  5196 ;; Auto vars:     Size  Location     Type
  5197 ;;		None
  5198 ;; Return value:  Size  Location     Type
  5199 ;;		None               void
  5200 ;; Registers used:
  5201 ;;		wreg, status,2, status,0
  5202 ;; Tracked objects:
  5203 ;;		On entry : 17F/0
  5204 ;;		On exit  : 17F/20
  5205 ;;		Unchanged: FFE80/0
  5206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5207 ;;      Params:         0       0       0       0
  5208 ;;      Locals:         0       0       0       0
  5209 ;;      Temps:          0       0       0       0
  5210 ;;      Totals:         0       0       0       0
  5211 ;;Total ram usage:        0 bytes
  5212 ;; Hardware stack levels used:    1
  5213 ;; Hardware stack levels required when called:    2
  5214 ;; This function calls:
  5215 ;;		Nothing
  5216 ;; This function is called by:
  5217 ;;		_main
  5218 ;; This function uses a non-reentrant model
  5219 ;;
  5220                           
  5221                           
  5222                           ;psect for function _ConfigureOscillator
  5223  0A65                     _ConfigureOscillator:	
  5224                           
  5225                           ;system.c: 18: OSCCONbits.IRCF = 0b111;
  5226                           
  5227                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
  5228  0A65  3070               	movlw	112
  5229  0A66  1683               	bsf	3,5	;RP0=1, select bank1
  5230  0A67  048F               	iorwf	15,f	;volatile
  5231  0A68  0008               	return
  5232  0A69                     __end_of_ConfigureOscillator:	
  5233                           
  5234                           	psect	text742
  5235  0A18                     __ptext742:	
  5236 ;; *************** function _InitApp *****************
  5237 ;; Defined at:
  5238 ;;		line 21 in file "user.c"
  5239 ;; Parameters:    Size  Location     Type
  5240 ;;		None
  5241 ;; Auto vars:     Size  Location     Type
  5242 ;;		None
  5243 ;; Return value:  Size  Location     Type
  5244 ;;		None               void
  5245 ;; Registers used:
  5246 ;;		wreg, status,2, status,0
  5247 ;; Tracked objects:
  5248 ;;		On entry : 17F/20
  5249 ;;		On exit  : 17F/20
  5250 ;;		Unchanged: FFE80/0
  5251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5252 ;;      Params:         0       0       0       0
  5253 ;;      Locals:         0       0       0       0
  5254 ;;      Temps:          0       0       0       0
  5255 ;;      Totals:         0       0       0       0
  5256 ;;Total ram usage:        0 bytes
  5257 ;; Hardware stack levels used:    1
  5258 ;; Hardware stack levels required when called:    2
  5259 ;; This function calls:
  5260 ;;		Nothing
  5261 ;; This function is called by:
  5262 ;;		_main
  5263 ;; This function uses a non-reentrant model
  5264 ;;
  5265                           
  5266                           
  5267                           ;psect for function _InitApp
  5268  0A18                     _InitApp:	
  5269                           
  5270                           ;user.c: 23: ANSEL = 0b00000100;
  5271                           
  5272                           ; Regs used in _InitApp: [wreg+status,2+status,0]
  5273  0A18  3004               	movlw	4
  5274  0A19  1283               	bcf	3,5	;RP0=0, select bank2
  5275  0A1A  1703               	bsf	3,6	;RP1=1, select bank2
  5276  0A1B  009E               	movwf	30	;volatile
  5277                           
  5278                           ;user.c: 24: ANSELH = 0;
  5279  0A1C  019F               	clrf	31	;volatile
  5280                           
  5281                           ;user.c: 25: ADCON0bits.CHS = 0b0010;
  5282  0A1D  1303               	bcf	3,6	;RP1=0, select bank0
  5283  0A1E  081F               	movf	31,w	;volatile
  5284  0A1F  39C3               	andlw	-61
  5285  0A20  3808               	iorlw	8
  5286  0A21  009F               	movwf	31	;volatile
  5287                           
  5288                           ;user.c: 26: ADCON0bits.ADFM = 0;
  5289  0A22  139F               	bcf	31,7	;volatile
  5290                           
  5291                           ;user.c: 27: ADCON0bits.ADON = 1;
  5292  0A23  141F               	bsf	31,0	;volatile
  5293                           
  5294                           ;user.c: 29: CM1CON0 = 0;
  5295  0A24  1703               	bsf	3,6	;RP1=1, select bank2
  5296  0A25  0199               	clrf	25	;volatile
  5297                           
  5298                           ;user.c: 30: CM2CON0 = 0;
  5299  0A26  019A               	clrf	26	;volatile
  5300                           
  5301                           ;user.c: 32: TRISA = 0b00111111;
  5302  0A27  303F               	movlw	63
  5303  0A28  1683               	bsf	3,5	;RP0=1, select bank1
  5304  0A29  1303               	bcf	3,6	;RP1=0, select bank1
  5305  0A2A  0085               	movwf	5	;volatile
  5306                           
  5307                           ;user.c: 33: TRISB = 0;
  5308  0A2B  0186               	clrf	6	;volatile
  5309                           
  5310                           ;user.c: 34: TRISC = 0b00000000;
  5311  0A2C  0187               	clrf	7	;volatile
  5312                           
  5313                           ;user.c: 36: PORTA = 0x00;
  5314  0A2D  1283               	bcf	3,5	;RP0=0, select bank0
  5315  0A2E  0185               	clrf	5	;volatile
  5316                           
  5317                           ;user.c: 37: PORTB = 0x00;
  5318  0A2F  0186               	clrf	6	;volatile
  5319                           
  5320                           ;user.c: 38: PORTC = 0x00;
  5321  0A30  0187               	clrf	7	;volatile
  5322                           
  5323                           ;user.c: 41: OPTION_REGbits.nRABPU = 0;
  5324  0A31  1683               	bsf	3,5	;RP0=1, select bank1
  5325  0A32  1381               	bcf	1,7	;volatile
  5326                           
  5327                           ;user.c: 42: WPUAbits.WPUA4 = 1;
  5328  0A33  1615               	bsf	21,4	;volatile
  5329                           
  5330                           ;user.c: 43: WPUAbits.WPUA5 = 1;
  5331  0A34  1695               	bsf	21,5	;volatile
  5332                           
  5333                           ;user.c: 50: OPTION_REGbits.T0CS = 0;
  5334  0A35  1281               	bcf	1,5	;volatile
  5335                           
  5336                           ;user.c: 51: OPTION_REGbits.T0SE = 0;
  5337  0A36  1201               	bcf	1,4	;volatile
  5338                           
  5339                           ;user.c: 52: OPTION_REGbits.PSA = 0;
  5340  0A37  1181               	bcf	1,3	;volatile
  5341                           
  5342                           ;user.c: 53: OPTION_REGbits.PS2 = 1;
  5343  0A38  1501               	bsf	1,2	;volatile
  5344                           
  5345                           ;user.c: 54: OPTION_REGbits.PS1 = 0;
  5346  0A39  1081               	bcf	1,1	;volatile
  5347                           
  5348                           ;user.c: 55: OPTION_REGbits.PS0 = 0;
  5349  0A3A  1001               	bcf	1,0	;volatile
  5350                           
  5351                           ;user.c: 59: T1CONbits.T1CKPS1 = 0;
  5352  0A3B  1283               	bcf	3,5	;RP0=0, select bank0
  5353  0A3C  1290               	bcf	16,5	;volatile
  5354                           
  5355                           ;user.c: 60: T1CONbits.T1CKPS0 = 1;
  5356  0A3D  1610               	bsf	16,4	;volatile
  5357                           
  5358                           ;user.c: 61: T1CONbits.T1OSCEN = 0;
  5359  0A3E  1190               	bcf	16,3	;volatile
  5360                           
  5361                           ;user.c: 62: T1CONbits.nT1SYNC = 1;
  5362  0A3F  1510               	bsf	16,2	;volatile
  5363                           
  5364                           ;user.c: 63: T1CONbits.TMR1CS = 0;
  5365  0A40  1090               	bcf	16,1	;volatile
  5366                           
  5367                           ;user.c: 64: T1CONbits.TMR1ON = 1;
  5368  0A41  1410               	bsf	16,0	;volatile
  5369                           
  5370                           ;user.c: 65: TMR1H = 0x3C;
  5371  0A42  303C               	movlw	60
  5372  0A43  008F               	movwf	15	;volatile
  5373                           
  5374                           ;user.c: 66: TMR1L = 0xB0;
  5375  0A44  30B0               	movlw	176
  5376  0A45  008E               	movwf	14	;volatile
  5377                           
  5378                           ;user.c: 78: T2CON = 0b00011101;
  5379  0A46  301D               	movlw	29
  5380  0A47  0092               	movwf	18	;volatile
  5381                           
  5382                           ;user.c: 79: PR2 = 63;
  5383  0A48  303F               	movlw	63
  5384  0A49  1683               	bsf	3,5	;RP0=1, select bank1
  5385  0A4A  0092               	movwf	18	;volatile
  5386                           
  5387                           ;user.c: 83: SPBRGH = 0;
  5388  0A4B  019A               	clrf	26	;volatile
  5389                           
  5390                           ;user.c: 84: SPBRG = 12;
  5391  0A4C  300C               	movlw	12
  5392  0A4D  0099               	movwf	25	;volatile
  5393                           
  5394                           ;user.c: 86: BRGH = 0;
  5395  0A4E  1118               	bcf	24,2	;volatile
  5396                           
  5397                           ;user.c: 87: BRG16 = 0;
  5398  0A4F  119B               	bcf	27,3	;volatile
  5399                           
  5400                           ;user.c: 89: SYNC = 0;
  5401  0A50  1218               	bcf	24,4	;volatile
  5402                           
  5403                           ;user.c: 90: SPEN = 1;
  5404  0A51  1283               	bcf	3,5	;RP0=0, select bank0
  5405  0A52  1798               	bsf	24,7	;volatile
  5406                           
  5407                           ;user.c: 93: TXEN = 1;
  5408  0A53  1683               	bsf	3,5	;RP0=1, select bank1
  5409  0A54  1698               	bsf	24,5	;volatile
  5410                           
  5411                           ;user.c: 97: INTCONbits.GIE = 1;
  5412  0A55  178B               	bsf	11,7	;volatile
  5413                           
  5414                           ;user.c: 98: INTCONbits.PEIE = 1;
  5415  0A56  170B               	bsf	11,6	;volatile
  5416                           
  5417                           ;user.c: 99: INTCONbits.RABIE = 1;
  5418  0A57  158B               	bsf	11,3	;volatile
  5419                           
  5420                           ;user.c: 101: IOCAbits.IOCA0 = 0b00000001;
  5421  0A58  1416               	bsf	22,0	;volatile
  5422                           
  5423                           ;user.c: 102: PIE1bits.TMR1IE = 1;
  5424  0A59  140C               	bsf	12,0	;volatile
  5425                           
  5426                           ;user.c: 103: PIE1bits.T2IE = 1;
  5427  0A5A  148C               	bsf	12,1	;volatile
  5428                           
  5429                           ;user.c: 104: PIE1bits.ADIE = 1;
  5430  0A5B  170C               	bsf	12,6	;volatile
  5431  0A5C  0008               	return
  5432  0A5D                     __end_of_InitApp:	
  5433                           
  5434                           	psect	swtext1
  5435  07F2                     __pswtext1:	
  5436  07F2                     S3861:	
  5437  07F2  118A  2907         	ljmp	l3341
  5438  07F4  118A  2906         	ljmp	l370
  5439  07F6  118A  2906         	ljmp	l370
  5440  07F8  118A  2906         	ljmp	l370
  5441  07FA  118A  2906         	ljmp	l370
  5442  07FC  118A  290B         	ljmp	l3343
  5443                           
  5444                           	psect	swtext2
  5445  0800                     __pswtext2:	
  5446  0800                     S3863:	
  5447  0800  118A  2EA0         	ljmp	l2923
  5448  0802  118A  2C4A         	ljmp	l2697
  5449  0804  118A  2C4A         	ljmp	l2697
  5450  0806  118A  2C4A         	ljmp	l2697
  5451  0808  118A  2C4A         	ljmp	l2697
  5452  080A  118A  2C4A         	ljmp	l2697
  5453  080C  118A  2C4A         	ljmp	l2697
  5454  080E  118A  2C4A         	ljmp	l2697
  5455  0810  118A  2C4A         	ljmp	l2697
  5456  0812  118A  2C4A         	ljmp	l2697
  5457  0814  118A  2C4A         	ljmp	l2697
  5458  0816  118A  2C4A         	ljmp	l2697
  5459  0818  118A  2C4A         	ljmp	l2697
  5460  081A  118A  2C4A         	ljmp	l2697
  5461  081C  118A  2C4A         	ljmp	l2697
  5462  081E  118A  2C4A         	ljmp	l2697
  5463  0820  118A  2C4A         	ljmp	l2697
  5464  0822  118A  2C4A         	ljmp	l2697
  5465  0824  118A  2C4A         	ljmp	l2697
  5466  0826  118A  2C4A         	ljmp	l2697
  5467  0828  118A  2C4A         	ljmp	l2697
  5468  082A  118A  2C4A         	ljmp	l2697
  5469  082C  118A  2C4A         	ljmp	l2697
  5470  082E  118A  2C4A         	ljmp	l2697
  5471  0830  118A  2C4A         	ljmp	l2697
  5472  0832  118A  2C4A         	ljmp	l2697
  5473  0834  118A  2C4A         	ljmp	l2697
  5474  0836  118A  2C4A         	ljmp	l2697
  5475  0838  118A  2C4A         	ljmp	l2697
  5476  083A  118A  2C4A         	ljmp	l2697
  5477  083C  118A  2C4A         	ljmp	l2697
  5478  083E  118A  2C4A         	ljmp	l2697
  5479  0840  118A  2C4A         	ljmp	l2697
  5480  0842  118A  2C4A         	ljmp	l2697
  5481  0844  118A  2C4A         	ljmp	l2697
  5482  0846  118A  2C4A         	ljmp	l2697
  5483  0848  118A  2C4A         	ljmp	l2697
  5484  084A  118A  2C4A         	ljmp	l2697
  5485  084C  118A  2C4A         	ljmp	l2697
  5486  084E  118A  2C4A         	ljmp	l2697
  5487  0850  118A  2C4A         	ljmp	l2697
  5488  0852  118A  2C4A         	ljmp	l2697
  5489  0854  118A  2C4A         	ljmp	l2697
  5490  0856  118A  2C4A         	ljmp	l2697
  5491  0858  118A  2C4A         	ljmp	l2697
  5492  085A  118A  2C4A         	ljmp	l2697
  5493  085C  118A  2C4A         	ljmp	l2697
  5494  085E  118A  2C4A         	ljmp	l2697
  5495  0860  118A  2C4A         	ljmp	l2697
  5496  0862  118A  2C4A         	ljmp	l2697
  5497  0864  118A  2C4A         	ljmp	l2697
  5498  0866  118A  2C4A         	ljmp	l2697
  5499  0868  118A  2C4A         	ljmp	l2697
  5500  086A  118A  2C4A         	ljmp	l2697
  5501  086C  118A  2C4A         	ljmp	l2697
  5502  086E  118A  2C4A         	ljmp	l2697
  5503  0870  118A  2C4A         	ljmp	l2697
  5504  0872  118A  2C4A         	ljmp	l2697
  5505  0874  118A  2C4A         	ljmp	l2697
  5506  0876  118A  2C4A         	ljmp	l2697
  5507  0878  118A  2C4A         	ljmp	l2697
  5508  087A  118A  2C4A         	ljmp	l2697
  5509  087C  118A  2C4A         	ljmp	l2697
  5510  087E  118A  2C4A         	ljmp	l2697
  5511  0880  118A  2C4A         	ljmp	l2697
  5512  0882  118A  2C4A         	ljmp	l2697
  5513  0884  118A  2C4A         	ljmp	l2697
  5514  0886  118A  2C4A         	ljmp	l2697
  5515  0888  118A  2C4A         	ljmp	l2697
  5516  088A  118A  2C4A         	ljmp	l2697
  5517  088C  118A  2C4A         	ljmp	l2697
  5518  088E  118A  2C4A         	ljmp	l2697
  5519  0890  118A  2C4A         	ljmp	l2697
  5520  0892  118A  2C4A         	ljmp	l2697
  5521  0894  118A  2C4A         	ljmp	l2697
  5522  0896  118A  2C4A         	ljmp	l2697
  5523  0898  118A  2C4A         	ljmp	l2697
  5524  089A  118A  2C4A         	ljmp	l2697
  5525  089C  118A  2C4A         	ljmp	l2697
  5526  089E  118A  2C4A         	ljmp	l2697
  5527  08A0  118A  2C4A         	ljmp	l2697
  5528  08A2  118A  2C4A         	ljmp	l2697
  5529  08A4  118A  2C4A         	ljmp	l2697
  5530  08A6  118A  2C4A         	ljmp	l2697
  5531  08A8  118A  2C4A         	ljmp	l2697
  5532  08AA  118A  2C4A         	ljmp	l2697
  5533  08AC  118A  2C4A         	ljmp	l2697
  5534  08AE  118A  2C4A         	ljmp	l2697
  5535  08B0  118A  2BDE         	ljmp	l457
  5536  08B2  118A  2C4A         	ljmp	l2697
  5537  08B4  118A  2C4A         	ljmp	l2697
  5538  08B6  118A  2C4A         	ljmp	l2697
  5539  08B8  118A  2C4A         	ljmp	l2697
  5540  08BA  118A  2C4A         	ljmp	l2697
  5541  08BC  118A  2C4A         	ljmp	l2697
  5542  08BE  118A  2C4A         	ljmp	l2697
  5543  08C0  118A  2C4A         	ljmp	l2697
  5544  08C2  118A  2C4A         	ljmp	l2697
  5545  08C4  118A  2C4A         	ljmp	l2697
  5546  08C6  118A  2C43         	ljmp	l2693
  5547  08C8  118A  2C65         	ljmp	l2707
  5548  08CA  118A  2C4A         	ljmp	l2697
  5549  08CC  118A  2C4A         	ljmp	l2697
  5550  08CE  118A  2C4A         	ljmp	l2697
  5551  08D0  118A  2C4A         	ljmp	l2697
  5552  08D2  118A  2C65         	ljmp	l2707
  5553  08D4  118A  2C4A         	ljmp	l2697
  5554  08D6  118A  2C4A         	ljmp	l2697
  5555  08D8  118A  2C4A         	ljmp	l2697
  5556  08DA  118A  2C4A         	ljmp	l2697
  5557  08DC  118A  2C4A         	ljmp	l2697
  5558  08DE  118A  2BDC         	ljmp	l453
  5559  08E0  118A  2C4A         	ljmp	l2697
  5560  08E2  118A  2C4A         	ljmp	l2697
  5561  08E4  118A  2C4A         	ljmp	l2697
  5562  08E6  118A  2C4A         	ljmp	l2697
  5563  08E8  118A  2C4A         	ljmp	l2697
  5564  08EA  118A  2C50         	ljmp	l2701
  5565  08EC  118A  2C4A         	ljmp	l2697
  5566  08EE  118A  2C4A         	ljmp	l2697
  5567  08F0  118A  2BDF         	ljmp	l458
  5568                           
  5569                           	psect	text769
  5570  09B7                     __ptext769:	
  5571 ;; *************** function ___fttol *****************
  5572 ;; Defined at:
  5573 ;;		line 45 in file "C:\Program Files (x86)\Microchip\xc8\v1.12\sources\fttol.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;  f1              3   38[BANK0 ] float 
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;  lval            4   46[BANK0 ] unsigned long 
  5578 ;;  exp1            1   50[BANK0 ] unsigned char 
  5579 ;;  sign1           1   45[BANK0 ] unsigned char 
  5580 ;; Return value:  Size  Location     Type
  5581 ;;                  4   38[BANK0 ] long 
  5582 ;; Registers used:
  5583 ;;		wreg, status,2, status,0
  5584 ;; Tracked objects:
  5585 ;;		On entry : 60/0
  5586 ;;		On exit  : 60/0
  5587 ;;		Unchanged: FFF9F/0
  5588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5589 ;;      Params:         0       4       0       0
  5590 ;;      Locals:         0       6       0       0
  5591 ;;      Temps:          0       3       0       0
  5592 ;;      Totals:         0      13       0       0
  5593 ;;Total ram usage:       13 bytes
  5594 ;; Hardware stack levels used:    1
  5595 ;; Hardware stack levels required when called:    2
  5596 ;; This function calls:
  5597 ;;		Nothing
  5598 ;; This function is called by:
  5599 ;;		_main
  5600 ;; This function uses a non-reentrant model
  5601 ;;
  5602                           
  5603                           
  5604                           ;psect for function ___fttol
  5605  09B7                     ___fttol:	
  5606                           
  5607                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5608  09B7  0846               	movf	___fttol@f1,w
  5609  09B8  00CA               	movwf	??___fttol
  5610  09B9  0847               	movf	___fttol@f1+1,w
  5611  09BA  00CB               	movwf	??___fttol+1
  5612  09BB  0848               	movf	___fttol@f1+2,w
  5613  09BC  00CC               	movwf	??___fttol+2
  5614  09BD  1003               	clrc
  5615  09BE  0D4B               	rlf	??___fttol+1,w
  5616  09BF  0D4C               	rlf	??___fttol+2,w
  5617  09C0  00D2               	movwf	___fttol@exp1
  5618  09C1  08D2               	movf	___fttol@exp1,f
  5619  09C2  1D03               	skipz
  5620  09C3  29C9               	goto	l3629
  5621  09C4                     l3627:	
  5622  09C4  01C6               	clrf	?___fttol
  5623  09C5  01C7               	clrf	?___fttol+1
  5624  09C6  01C8               	clrf	?___fttol+2
  5625  09C7  01C9               	clrf	?___fttol+3
  5626  09C8  0008               	return
  5627  09C9                     l3629:	
  5628  09C9  0846               	movf	___fttol@f1,w
  5629  09CA  00CA               	movwf	??___fttol
  5630  09CB  0847               	movf	___fttol@f1+1,w
  5631  09CC  00CB               	movwf	??___fttol+1
  5632  09CD  0848               	movf	___fttol@f1+2,w
  5633  09CE  00CC               	movwf	??___fttol+2
  5634  09CF  3017               	movlw	23
  5635  09D0                     u3345:	
  5636  09D0  1003               	clrc
  5637  09D1  0CCC               	rrf	??___fttol+2,f
  5638  09D2  0CCB               	rrf	??___fttol+1,f
  5639  09D3  0CCA               	rrf	??___fttol,f
  5640  09D4  3EFF               	addlw	-1
  5641  09D5  1D03               	skipz
  5642  09D6  29D0               	goto	u3345
  5643  09D7  084A               	movf	??___fttol,w
  5644  09D8  00CD               	movwf	___fttol@sign1
  5645  09D9  17C7               	bsf	___fttol@f1+1,7
  5646  09DA  01C8               	clrf	___fttol@f1+2
  5647  09DB  0846               	movf	___fttol@f1,w
  5648  09DC  00CE               	movwf	___fttol@lval
  5649  09DD  0847               	movf	___fttol@f1+1,w
  5650  09DE  00CF               	movwf	___fttol@lval+1
  5651  09DF  0848               	movf	___fttol@f1+2,w
  5652  09E0  00D0               	movwf	___fttol@lval+2
  5653  09E1  308E               	movlw	142
  5654  09E2  01D1               	clrf	___fttol@lval+3
  5655  09E3  02D2               	subwf	___fttol@exp1,f
  5656  09E4  1FD2               	btfss	___fttol@exp1,7
  5657  09E5  29F3               	goto	l3649
  5658  09E6  0852               	movf	___fttol@exp1,w
  5659  09E7  3A80               	xorlw	128
  5660  09E8  3E8F               	addlw	143
  5661  09E9  1C03               	btfss	3,0
  5662  09EA  29C4               	goto	l3627
  5663  09EB                     l3645:	
  5664  09EB  1003               	clrc
  5665  09EC  0CD1               	rrf	___fttol@lval+3,f
  5666  09ED  0CD0               	rrf	___fttol@lval+2,f
  5667  09EE  0CCF               	rrf	___fttol@lval+1,f
  5668  09EF  0CCE               	rrf	___fttol@lval,f
  5669  09F0  0FD2               	incfsz	___fttol@exp1,f
  5670  09F1  29EB               	goto	l3645
  5671  09F2  2A01               	goto	l3655
  5672  09F3                     l3649:	
  5673  09F3  3018               	movlw	24
  5674  09F4  0252               	subwf	___fttol@exp1,w
  5675  09F5  1803               	btfsc	3,0
  5676  09F6  29C4               	goto	l3627
  5677  09F7                     l766:	
  5678  09F7  08D2               	movf	___fttol@exp1,f
  5679  09F8  1903               	btfsc	3,2
  5680  09F9  2A01               	goto	l3655
  5681  09FA  1003               	clrc
  5682  09FB  0DCE               	rlf	___fttol@lval,f
  5683  09FC  0DCF               	rlf	___fttol@lval+1,f
  5684  09FD  0DD0               	rlf	___fttol@lval+2,f
  5685  09FE  0DD1               	rlf	___fttol@lval+3,f
  5686  09FF  03D2               	decf	___fttol@exp1,f
  5687  0A00  29F7               	goto	l766
  5688  0A01                     l3655:	
  5689  0A01  084D               	movf	___fttol@sign1,w
  5690  0A02  1903               	btfsc	3,2
  5691  0A03  2A0F               	goto	l3659
  5692  0A04  09CE               	comf	___fttol@lval,f
  5693  0A05  09CF               	comf	___fttol@lval+1,f
  5694  0A06  09D0               	comf	___fttol@lval+2,f
  5695  0A07  09D1               	comf	___fttol@lval+3,f
  5696  0A08  0ACE               	incf	___fttol@lval,f
  5697  0A09  1903               	skipnz
  5698  0A0A  0ACF               	incf	___fttol@lval+1,f
  5699  0A0B  1903               	skipnz
  5700  0A0C  0AD0               	incf	___fttol@lval+2,f
  5701  0A0D  1903               	skipnz
  5702  0A0E  0AD1               	incf	___fttol@lval+3,f
  5703  0A0F                     l3659:	
  5704  0A0F  0851               	movf	___fttol@lval+3,w
  5705  0A10  00C9               	movwf	?___fttol+3
  5706  0A11  0850               	movf	___fttol@lval+2,w
  5707  0A12  00C8               	movwf	?___fttol+2
  5708  0A13  084F               	movf	___fttol@lval+1,w
  5709  0A14  00C7               	movwf	?___fttol+1
  5710  0A15  084E               	movf	___fttol@lval,w
  5711  0A16  00C6               	movwf	?___fttol
  5712  0A17  0008               	return
  5713  0A18                     __end_of___fttol:	
  5714                           
  5715                           	psect	text770
  5716  0E77                     __ptext770:	
  5717 ;; *************** function ___lwtoft *****************
  5718 ;; Defined at:
  5719 ;;		line 29 in file "C:\Program Files (x86)\Microchip\xc8\v1.12\sources\lwtoft.c"
  5720 ;; Parameters:    Size  Location     Type
  5721 ;;  c               2    8[BANK0 ] unsigned int 
  5722 ;; Auto vars:     Size  Location     Type
  5723 ;;		None
  5724 ;; Return value:  Size  Location     Type
  5725 ;;                  3    8[BANK0 ] float 
  5726 ;; Registers used:
  5727 ;;		wreg, status,2, status,0, pclath, cstack
  5728 ;; Tracked objects:
  5729 ;;		On entry : 60/0
  5730 ;;		On exit  : 60/0
  5731 ;;		Unchanged: FFF9F/0
  5732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5733 ;;      Params:         0       3       0       0
  5734 ;;      Locals:         0       0       0       0
  5735 ;;      Temps:          0       0       0       0
  5736 ;;      Totals:         0       3       0       0
  5737 ;;Total ram usage:        3 bytes
  5738 ;; Hardware stack levels used:    1
  5739 ;; Hardware stack levels required when called:    3
  5740 ;; This function calls:
  5741 ;;		___ftpack
  5742 ;; This function is called by:
  5743 ;;		_main
  5744 ;; This function uses a non-reentrant model
  5745 ;;
  5746                           
  5747                           
  5748                           ;psect for function ___lwtoft
  5749  0E77                     ___lwtoft:	
  5750                           
  5751                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  5752  0E77  0828               	movf	___lwtoft@c,w
  5753  0E78  00A0               	movwf	?___ftpack
  5754  0E79  0829               	movf	___lwtoft@c+1,w
  5755  0E7A  00A1               	movwf	?___ftpack+1
  5756  0E7B  308E               	movlw	142
  5757  0E7C  01A2               	clrf	?___ftpack+2
  5758  0E7D  00A3               	movwf	?___ftpack+3
  5759  0E7E  01A4               	clrf	?___ftpack+4
  5760  0E7F  27C2               	fcall	___ftpack
  5761  0E80  0820               	movf	?___ftpack,w
  5762  0E81  00A8               	movwf	?___lwtoft
  5763  0E82  0821               	movf	?___ftpack+1,w
  5764  0E83  00A9               	movwf	?___lwtoft+1
  5765  0E84  0822               	movf	?___ftpack+2,w
  5766  0E85  00AA               	movwf	?___lwtoft+2
  5767  0E86  0008               	return
  5768  0E87                     __end_of___lwtoft:	
  5769  0E87                     __ptext768:	
  5770 ;; *************** function ___ftmul *****************
  5771 ;; Defined at:
  5772 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.12\sources\ftmul.c"
  5773 ;; Parameters:    Size  Location     Type
  5774 ;;  f1              3   11[BANK0 ] float 
  5775 ;;  f2              3   14[BANK0 ] float 
  5776 ;; Auto vars:     Size  Location     Type
  5777 ;;  f3_as_produc    3   21[BANK0 ] unsigned um
  5778 ;;  sign            1   25[BANK0 ] unsigned char 
  5779 ;;  cntr            1   24[BANK0 ] unsigned char 
  5780 ;;  exp             1   20[BANK0 ] unsigned char 
  5781 ;; Return value:  Size  Location     Type
  5782 ;;                  3   11[BANK0 ] float 
  5783 ;; Registers used:
  5784 ;;		wreg, status,2, status,0, pclath, cstack
  5785 ;; Tracked objects:
  5786 ;;		On entry : 60/0
  5787 ;;		On exit  : 60/0
  5788 ;;		Unchanged: FFF9F/0
  5789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5790 ;;      Params:         0       6       0       0
  5791 ;;      Locals:         0       6       0       0
  5792 ;;      Temps:          0       3       0       0
  5793 ;;      Totals:         0      15       0       0
  5794 ;;Total ram usage:       15 bytes
  5795 ;; Hardware stack levels used:    1
  5796 ;; Hardware stack levels required when called:    3
  5797 ;; This function calls:
  5798 ;;		___ftpack
  5799 ;; This function is called by:
  5800 ;;		_main
  5801 ;; This function uses a non-reentrant model
  5802 ;;
  5803                           
  5804                           
  5805                           ;psect for function ___ftmul
  5806  0E87                     ___ftmul:	
  5807                           
  5808                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5809  0E87  082B               	movf	___ftmul@f1,w
  5810  0E88  00B1               	movwf	??___ftmul
  5811  0E89  082C               	movf	___ftmul@f1+1,w
  5812  0E8A  00B2               	movwf	??___ftmul+1
  5813  0E8B  082D               	movf	___ftmul@f1+2,w
  5814  0E8C  00B3               	movwf	??___ftmul+2
  5815  0E8D  1003               	clrc
  5816  0E8E  0D32               	rlf	??___ftmul+1,w
  5817  0E8F  0D33               	rlf	??___ftmul+2,w
  5818  0E90  00B4               	movwf	___ftmul@exp
  5819  0E91  08B4               	movf	___ftmul@exp,f
  5820  0E92  1D03               	skipz
  5821  0E93  2E98               	goto	l3575
  5822  0E94  01AB               	clrf	?___ftmul
  5823  0E95  01AC               	clrf	?___ftmul+1
  5824  0E96  01AD               	clrf	?___ftmul+2
  5825  0E97  0008               	return
  5826  0E98                     l3575:	
  5827  0E98  082E               	movf	___ftmul@f2,w
  5828  0E99  00B1               	movwf	??___ftmul
  5829  0E9A  082F               	movf	___ftmul@f2+1,w
  5830  0E9B  00B2               	movwf	??___ftmul+1
  5831  0E9C  0830               	movf	___ftmul@f2+2,w
  5832  0E9D  00B3               	movwf	??___ftmul+2
  5833  0E9E  1003               	clrc
  5834  0E9F  0D32               	rlf	??___ftmul+1,w
  5835  0EA0  0D33               	rlf	??___ftmul+2,w
  5836  0EA1  00B9               	movwf	___ftmul@sign
  5837  0EA2  08B9               	movf	___ftmul@sign,f
  5838  0EA3  1D03               	skipz
  5839  0EA4  2EA9               	goto	l3581
  5840  0EA5  01AB               	clrf	?___ftmul
  5841  0EA6  01AC               	clrf	?___ftmul+1
  5842  0EA7  01AD               	clrf	?___ftmul+2
  5843  0EA8  0008               	return
  5844  0EA9                     l3581:	
  5845  0EA9  0839               	movf	___ftmul@sign,w
  5846  0EAA  3E7B               	addlw	123
  5847  0EAB  07B4               	addwf	___ftmul@exp,f
  5848  0EAC  082D               	movf	___ftmul@f1+2,w
  5849  0EAD  00B9               	movwf	___ftmul@sign
  5850  0EAE  0830               	movf	___ftmul@f2+2,w
  5851  0EAF  06B9               	xorwf	___ftmul@sign,f
  5852  0EB0  3080               	movlw	128
  5853  0EB1  05B9               	andwf	___ftmul@sign,f
  5854  0EB2  3007               	movlw	7
  5855  0EB3  17AC               	bsf	___ftmul@f1+1,7
  5856  0EB4  17AF               	bsf	___ftmul@f2+1,7
  5857  0EB5  01B0               	clrf	___ftmul@f2+2
  5858  0EB6  01B5               	clrf	___ftmul@f3_as_product
  5859  0EB7  01B6               	clrf	___ftmul@f3_as_product+1
  5860  0EB8  01B7               	clrf	___ftmul@f3_as_product+2
  5861  0EB9  00B8               	movwf	___ftmul@cntr
  5862  0EBA                     l3599:	
  5863  0EBA  1C2B               	btfss	___ftmul@f1,0
  5864  0EBB  2ECA               	goto	l3603
  5865  0EBC  082E               	movf	___ftmul@f2,w
  5866  0EBD  07B5               	addwf	___ftmul@f3_as_product,f
  5867  0EBE  082F               	movf	___ftmul@f2+1,w
  5868  0EBF  1103               	clrz
  5869  0EC0  1803               	skipnc
  5870  0EC1  0A2F               	incf	___ftmul@f2+1,w
  5871  0EC2  1D03               	btfss	3,2
  5872  0EC3  07B6               	addwf	___ftmul@f3_as_product+1,f
  5873  0EC4  0830               	movf	___ftmul@f2+2,w
  5874  0EC5  1103               	clrz
  5875  0EC6  1803               	skipnc
  5876  0EC7  0A30               	incf	___ftmul@f2+2,w
  5877  0EC8  1D03               	btfss	3,2
  5878  0EC9  07B7               	addwf	___ftmul@f3_as_product+2,f
  5879  0ECA                     l3603:	
  5880  0ECA  1003               	clrc
  5881  0ECB  0CAD               	rrf	___ftmul@f1+2,f
  5882  0ECC  0CAC               	rrf	___ftmul@f1+1,f
  5883  0ECD  0CAB               	rrf	___ftmul@f1,f
  5884  0ECE  1003               	clrc
  5885  0ECF  0DAE               	rlf	___ftmul@f2,f
  5886  0ED0  0DAF               	rlf	___ftmul@f2+1,f
  5887  0ED1  0DB0               	rlf	___ftmul@f2+2,f
  5888  0ED2  0BB8               	decfsz	___ftmul@cntr,f
  5889  0ED3  2EBA               	goto	l3599
  5890  0ED4  3009               	movlw	9
  5891  0ED5  00B8               	movwf	___ftmul@cntr
  5892  0ED6                     l3611:	
  5893  0ED6  1C2B               	btfss	___ftmul@f1,0
  5894  0ED7  2EE6               	goto	l3615
  5895  0ED8  082E               	movf	___ftmul@f2,w
  5896  0ED9  07B5               	addwf	___ftmul@f3_as_product,f
  5897  0EDA  082F               	movf	___ftmul@f2+1,w
  5898  0EDB  1103               	clrz
  5899  0EDC  1803               	skipnc
  5900  0EDD  0A2F               	incf	___ftmul@f2+1,w
  5901  0EDE  1D03               	btfss	3,2
  5902  0EDF  07B6               	addwf	___ftmul@f3_as_product+1,f
  5903  0EE0  0830               	movf	___ftmul@f2+2,w
  5904  0EE1  1103               	clrz
  5905  0EE2  1803               	skipnc
  5906  0EE3  0A30               	incf	___ftmul@f2+2,w
  5907  0EE4  1D03               	btfss	3,2
  5908  0EE5  07B7               	addwf	___ftmul@f3_as_product+2,f
  5909  0EE6                     l3615:	
  5910  0EE6  1003               	clrc
  5911  0EE7  0CAD               	rrf	___ftmul@f1+2,f
  5912  0EE8  0CAC               	rrf	___ftmul@f1+1,f
  5913  0EE9  0CAB               	rrf	___ftmul@f1,f
  5914  0EEA  1003               	clrc
  5915  0EEB  0CB7               	rrf	___ftmul@f3_as_product+2,f
  5916  0EEC  0CB6               	rrf	___ftmul@f3_as_product+1,f
  5917  0EED  0CB5               	rrf	___ftmul@f3_as_product,f
  5918  0EEE  0BB8               	decfsz	___ftmul@cntr,f
  5919  0EEF  2ED6               	goto	l3611
  5920  0EF0  0835               	movf	___ftmul@f3_as_product,w
  5921  0EF1  00A0               	movwf	?___ftpack
  5922  0EF2  0836               	movf	___ftmul@f3_as_product+1,w
  5923  0EF3  00A1               	movwf	?___ftpack+1
  5924  0EF4  0837               	movf	___ftmul@f3_as_product+2,w
  5925  0EF5  00A2               	movwf	?___ftpack+2
  5926  0EF6  0834               	movf	___ftmul@exp,w
  5927  0EF7  00A3               	movwf	?___ftpack+3
  5928  0EF8  0839               	movf	___ftmul@sign,w
  5929  0EF9  00A4               	movwf	?___ftpack+4
  5930  0EFA  27C2               	fcall	___ftpack
  5931  0EFB  0820               	movf	?___ftpack,w
  5932  0EFC  00AB               	movwf	?___ftmul
  5933  0EFD  0821               	movf	?___ftpack+1,w
  5934  0EFE  00AC               	movwf	?___ftmul+1
  5935  0EFF  0822               	movf	?___ftpack+2,w
  5936  0F00  00AD               	movwf	?___ftmul+2
  5937  0F01  0008               	return
  5938  0F02                     __end_of___ftmul:	
  5939  0F02                     __ptext767:	
  5940 ;; *************** function ___ftadd *****************
  5941 ;; Defined at:
  5942 ;;		line 87 in file "C:\Program Files (x86)\Microchip\xc8\v1.12\sources\ftadd.c"
  5943 ;; Parameters:    Size  Location     Type
  5944 ;;  f1              3   26[BANK0 ] float 
  5945 ;;  f2              3   29[BANK0 ] float 
  5946 ;; Auto vars:     Size  Location     Type
  5947 ;;  exp1            1   37[BANK0 ] unsigned char 
  5948 ;;  exp2            1   36[BANK0 ] unsigned char 
  5949 ;;  sign            1   35[BANK0 ] unsigned char 
  5950 ;; Return value:  Size  Location     Type
  5951 ;;                  3   26[BANK0 ] float 
  5952 ;; Registers used:
  5953 ;;		wreg, status,2, status,0, pclath, cstack
  5954 ;; Tracked objects:
  5955 ;;		On entry : 60/0
  5956 ;;		On exit  : 60/0
  5957 ;;		Unchanged: FFF9F/0
  5958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5959 ;;      Params:         0       6       0       0
  5960 ;;      Locals:         0       3       0       0
  5961 ;;      Temps:          0       3       0       0
  5962 ;;      Totals:         0      12       0       0
  5963 ;;Total ram usage:       12 bytes
  5964 ;; Hardware stack levels used:    1
  5965 ;; Hardware stack levels required when called:    3
  5966 ;; This function calls:
  5967 ;;		___ftpack
  5968 ;; This function is called by:
  5969 ;;		_main
  5970 ;; This function uses a non-reentrant model
  5971 ;;
  5972                           
  5973                           
  5974                           ;psect for function ___ftadd
  5975  0F02                     ___ftadd:	
  5976                           
  5977                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5978  0F02  083A               	movf	___ftadd@f1,w
  5979  0F03  00C0               	movwf	??___ftadd
  5980  0F04  083B               	movf	___ftadd@f1+1,w
  5981  0F05  00C1               	movwf	??___ftadd+1
  5982  0F06  083C               	movf	___ftadd@f1+2,w
  5983  0F07  00C2               	movwf	??___ftadd+2
  5984  0F08  1003               	clrc
  5985  0F09  0D41               	rlf	??___ftadd+1,w
  5986  0F0A  0D42               	rlf	??___ftadd+2,w
  5987  0F0B  00C5               	movwf	___ftadd@exp1
  5988  0F0C  083D               	movf	___ftadd@f2,w
  5989  0F0D  00C0               	movwf	??___ftadd
  5990  0F0E  083E               	movf	___ftadd@f2+1,w
  5991  0F0F  00C1               	movwf	??___ftadd+1
  5992  0F10  083F               	movf	___ftadd@f2+2,w
  5993  0F11  00C2               	movwf	??___ftadd+2
  5994  0F12  1003               	clrc
  5995  0F13  0D41               	rlf	??___ftadd+1,w
  5996  0F14  0D42               	rlf	??___ftadd+2,w
  5997  0F15  00C4               	movwf	___ftadd@exp2
  5998  0F16  0845               	movf	___ftadd@exp1,w
  5999  0F17  1903               	btfsc	3,2
  6000  0F18  2F25               	goto	l3471
  6001  0F19  0844               	movf	___ftadd@exp2,w
  6002  0F1A  0245               	subwf	___ftadd@exp1,w
  6003  0F1B  0844               	movf	___ftadd@exp2,w
  6004  0F1C  1803               	skipnc
  6005  0F1D  2F2D               	goto	L23
  6006  0F1E  00C0               	movwf	??___ftadd
  6007  0F1F  0845               	movf	___ftadd@exp1,w
  6008  0F20  02C0               	subwf	??___ftadd,f
  6009  0F21  3019               	movlw	25
  6010  0F22  0240               	subwf	??___ftadd,w
  6011  0F23  1C03               	skipc
  6012  0F24  2F2C               	goto	l3475
  6013  0F25                     l3471:	
  6014  0F25  083D               	movf	___ftadd@f2,w
  6015  0F26  00BA               	movwf	?___ftadd
  6016  0F27  083E               	movf	___ftadd@f2+1,w
  6017  0F28  00BB               	movwf	?___ftadd+1
  6018  0F29  083F               	movf	___ftadd@f2+2,w
  6019  0F2A  00BC               	movwf	?___ftadd+2
  6020  0F2B  0008               	return
  6021  0F2C                     l3475:	
  6022  0F2C  0844               	movf	___ftadd@exp2,w
  6023  0F2D                     L23:	
  6024  0F2D  1903               	btfsc	3,2
  6025  0F2E  0008               	return
  6026  0F2F  0845               	movf	___ftadd@exp1,w
  6027  0F30  0244               	subwf	___ftadd@exp2,w
  6028  0F31  1803               	skipnc
  6029  0F32  2F3B               	goto	l3481
  6030  0F33  0845               	movf	___ftadd@exp1,w
  6031  0F34  00C0               	movwf	??___ftadd
  6032  0F35  0844               	movf	___ftadd@exp2,w
  6033  0F36  02C0               	subwf	??___ftadd,f
  6034  0F37  3019               	movlw	25
  6035  0F38  0240               	subwf	??___ftadd,w
  6036  0F39  1803               	btfsc	3,0
  6037  0F3A  0008               	return
  6038  0F3B                     l3481:	
  6039  0F3B  3006               	movlw	6
  6040  0F3C  00C3               	movwf	___ftadd@sign
  6041  0F3D  1BBC               	btfsc	___ftadd@f1+2,7
  6042  0F3E  17C3               	bsf	___ftadd@sign,7
  6043  0F3F  1BBF               	btfsc	___ftadd@f2+2,7
  6044  0F40  1743               	bsf	___ftadd@sign,6
  6045  0F41  17BB               	bsf	___ftadd@f1+1,7
  6046  0F42  01BC               	clrf	___ftadd@f1+2
  6047  0F43  17BE               	bsf	___ftadd@f2+1,7
  6048  0F44  01BF               	clrf	___ftadd@f2+2
  6049  0F45  0844               	movf	___ftadd@exp2,w
  6050  0F46  0245               	subwf	___ftadd@exp1,w
  6051  0F47  1803               	skipnc
  6052  0F48  2F62               	goto	l3503
  6053  0F49                     l3493:	
  6054  0F49  1003               	clrc
  6055  0F4A  0DBD               	rlf	___ftadd@f2,f
  6056  0F4B  0DBE               	rlf	___ftadd@f2+1,f
  6057  0F4C  0DBF               	rlf	___ftadd@f2+2,f
  6058  0F4D  03C4               	decf	___ftadd@exp2,f
  6059  0F4E  0844               	movf	___ftadd@exp2,w
  6060  0F4F  0645               	xorwf	___ftadd@exp1,w
  6061  0F50  1903               	skipnz
  6062  0F51  2F5D               	goto	l3501
  6063  0F52  03C3               	decf	___ftadd@sign,f
  6064  0F53  0843               	movf	___ftadd@sign,w
  6065  0F54  3907               	andlw	7
  6066  0F55  1903               	btfsc	3,2
  6067  0F56  2F5D               	goto	l3501
  6068  0F57  2F49               	goto	l3493
  6069  0F58                     l3499:	
  6070  0F58  1003               	clrc
  6071  0F59  0CBC               	rrf	___ftadd@f1+2,f
  6072  0F5A  0CBB               	rrf	___ftadd@f1+1,f
  6073  0F5B  0CBA               	rrf	___ftadd@f1,f
  6074  0F5C  0AC5               	incf	___ftadd@exp1,f
  6075  0F5D                     l3501:	
  6076  0F5D  0845               	movf	___ftadd@exp1,w
  6077  0F5E  0644               	xorwf	___ftadd@exp2,w
  6078  0F5F  1903               	btfsc	3,2
  6079  0F60  2F7E               	goto	l710
  6080  0F61  2F58               	goto	l3499
  6081  0F62                     l3503:	
  6082  0F62  0845               	movf	___ftadd@exp1,w
  6083  0F63  0244               	subwf	___ftadd@exp2,w
  6084  0F64  1803               	skipnc
  6085  0F65  2F7E               	goto	l710
  6086  0F66                     l3505:	
  6087  0F66  1003               	clrc
  6088  0F67  0DBA               	rlf	___ftadd@f1,f
  6089  0F68  0DBB               	rlf	___ftadd@f1+1,f
  6090  0F69  0DBC               	rlf	___ftadd@f1+2,f
  6091  0F6A  03C5               	decf	___ftadd@exp1,f
  6092  0F6B  0844               	movf	___ftadd@exp2,w
  6093  0F6C  0645               	xorwf	___ftadd@exp1,w
  6094  0F6D  1903               	skipnz
  6095  0F6E  2F7A               	goto	l3513
  6096  0F6F  03C3               	decf	___ftadd@sign,f
  6097  0F70  0843               	movf	___ftadd@sign,w
  6098  0F71  3907               	andlw	7
  6099  0F72  1903               	btfsc	3,2
  6100  0F73  2F7A               	goto	l3513
  6101  0F74  2F66               	goto	l3505
  6102  0F75                     l3511:	
  6103  0F75  1003               	clrc
  6104  0F76  0CBF               	rrf	___ftadd@f2+2,f
  6105  0F77  0CBE               	rrf	___ftadd@f2+1,f
  6106  0F78  0CBD               	rrf	___ftadd@f2,f
  6107  0F79  0AC4               	incf	___ftadd@exp2,f
  6108  0F7A                     l3513:	
  6109  0F7A  0845               	movf	___ftadd@exp1,w
  6110  0F7B  0644               	xorwf	___ftadd@exp2,w
  6111  0F7C  1D03               	skipz
  6112  0F7D  2F75               	goto	l3511
  6113  0F7E                     l710:	
  6114  0F7E  1FC3               	btfss	___ftadd@sign,7
  6115  0F7F  2F89               	goto	l3519
  6116  0F80  30FF               	movlw	255
  6117  0F81  06BA               	xorwf	___ftadd@f1,f
  6118  0F82  06BB               	xorwf	___ftadd@f1+1,f
  6119  0F83  06BC               	xorwf	___ftadd@f1+2,f
  6120  0F84  0ABA               	incf	___ftadd@f1,f
  6121  0F85  1903               	skipnz
  6122  0F86  0ABB               	incf	___ftadd@f1+1,f
  6123  0F87  1903               	skipnz
  6124  0F88  0ABC               	incf	___ftadd@f1+2,f
  6125  0F89                     l3519:	
  6126  0F89  1F43               	btfss	___ftadd@sign,6
  6127  0F8A  2F94               	goto	l3525
  6128  0F8B  30FF               	movlw	255
  6129  0F8C  06BD               	xorwf	___ftadd@f2,f
  6130  0F8D  06BE               	xorwf	___ftadd@f2+1,f
  6131  0F8E  06BF               	xorwf	___ftadd@f2+2,f
  6132  0F8F  0ABD               	incf	___ftadd@f2,f
  6133  0F90  1903               	skipnz
  6134  0F91  0ABE               	incf	___ftadd@f2+1,f
  6135  0F92  1903               	skipnz
  6136  0F93  0ABF               	incf	___ftadd@f2+2,f
  6137  0F94                     l3525:	
  6138  0F94  01C3               	clrf	___ftadd@sign
  6139  0F95  083A               	movf	___ftadd@f1,w
  6140  0F96  07BD               	addwf	___ftadd@f2,f
  6141  0F97  083B               	movf	___ftadd@f1+1,w
  6142  0F98  1103               	clrz
  6143  0F99  1803               	skipnc
  6144  0F9A  0A3B               	incf	___ftadd@f1+1,w
  6145  0F9B  1D03               	btfss	3,2
  6146  0F9C  07BE               	addwf	___ftadd@f2+1,f
  6147  0F9D  083C               	movf	___ftadd@f1+2,w
  6148  0F9E  1103               	clrz
  6149  0F9F  1803               	skipnc
  6150  0FA0  0A3C               	incf	___ftadd@f1+2,w
  6151  0FA1  1D03               	btfss	3,2
  6152  0FA2  07BF               	addwf	___ftadd@f2+2,f
  6153  0FA3  1FBF               	btfss	___ftadd@f2+2,7
  6154  0FA4  2FB0               	goto	l3537
  6155  0FA5  30FF               	movlw	255
  6156  0FA6  06BD               	xorwf	___ftadd@f2,f
  6157  0FA7  06BE               	xorwf	___ftadd@f2+1,f
  6158  0FA8  06BF               	xorwf	___ftadd@f2+2,f
  6159  0FA9  0ABD               	incf	___ftadd@f2,f
  6160  0FAA  1903               	skipnz
  6161  0FAB  0ABE               	incf	___ftadd@f2+1,f
  6162  0FAC  1903               	skipnz
  6163  0FAD  0ABF               	incf	___ftadd@f2+2,f
  6164  0FAE  01C3               	clrf	___ftadd@sign
  6165  0FAF  0AC3               	incf	___ftadd@sign,f
  6166  0FB0                     l3537:	
  6167  0FB0  083D               	movf	___ftadd@f2,w
  6168  0FB1  00A0               	movwf	?___ftpack
  6169  0FB2  083E               	movf	___ftadd@f2+1,w
  6170  0FB3  00A1               	movwf	?___ftpack+1
  6171  0FB4  083F               	movf	___ftadd@f2+2,w
  6172  0FB5  00A2               	movwf	?___ftpack+2
  6173  0FB6  0845               	movf	___ftadd@exp1,w
  6174  0FB7  00A3               	movwf	?___ftpack+3
  6175  0FB8  0843               	movf	___ftadd@sign,w
  6176  0FB9  00A4               	movwf	?___ftpack+4
  6177  0FBA  27C2               	fcall	___ftpack
  6178  0FBB  0820               	movf	?___ftpack,w
  6179  0FBC  00BA               	movwf	?___ftadd
  6180  0FBD  0821               	movf	?___ftpack+1,w
  6181  0FBE  00BB               	movwf	?___ftadd+1
  6182  0FBF  0822               	movf	?___ftpack+2,w
  6183  0FC0  00BC               	movwf	?___ftadd+2
  6184  0FC1  0008               	return
  6185  0FC2                     __end_of___ftadd:	
  6186  0FC2                     __ptext771:	
  6187 ;; *************** function ___ftpack *****************
  6188 ;; Defined at:
  6189 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.12\sources\float.c"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;  arg             3    0[BANK0 ] unsigned um
  6192 ;;  exp             1    3[BANK0 ] unsigned char 
  6193 ;;  sign            1    4[BANK0 ] unsigned char 
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;		None
  6196 ;; Return value:  Size  Location     Type
  6197 ;;                  3    0[BANK0 ] float 
  6198 ;; Registers used:
  6199 ;;		wreg, status,2, status,0
  6200 ;; Tracked objects:
  6201 ;;		On entry : 60/0
  6202 ;;		On exit  : 60/0
  6203 ;;		Unchanged: FFF9F/0
  6204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6205 ;;      Params:         0       5       0       0
  6206 ;;      Locals:         0       0       0       0
  6207 ;;      Temps:          0       3       0       0
  6208 ;;      Totals:         0       8       0       0
  6209 ;;Total ram usage:        8 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    2
  6212 ;; This function calls:
  6213 ;;		Nothing
  6214 ;; This function is called by:
  6215 ;;		___ftadd
  6216 ;;		___ftmul
  6217 ;;		___lwtoft
  6218 ;; This function uses a non-reentrant model
  6219 ;;
  6220                           
  6221                           
  6222                           ;psect for function ___ftpack
  6223  0FC2                     ___ftpack:	
  6224                           
  6225                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6226  0FC2  0823               	movf	___ftpack@exp,w
  6227  0FC3  1903               	btfsc	3,2
  6228  0FC4  2FCA               	goto	l3545
  6229  0FC5  0822               	movf	___ftpack@arg+2,w
  6230  0FC6  0421               	iorwf	___ftpack@arg+1,w
  6231  0FC7  0420               	iorwf	___ftpack@arg,w
  6232  0FC8  1D03               	skipz
  6233  0FC9  2FD3               	goto	l3551
  6234  0FCA                     l3545:	
  6235  0FCA  01A0               	clrf	?___ftpack
  6236  0FCB  01A1               	clrf	?___ftpack+1
  6237  0FCC  01A2               	clrf	?___ftpack+2
  6238  0FCD  0008               	return
  6239  0FCE                     l3549:	
  6240  0FCE  0AA3               	incf	___ftpack@exp,f
  6241  0FCF  1003               	clrc
  6242  0FD0  0CA2               	rrf	___ftpack@arg+2,f
  6243  0FD1  0CA1               	rrf	___ftpack@arg+1,f
  6244  0FD2  0CA0               	rrf	___ftpack@arg,f
  6245  0FD3                     l3551:	
  6246  0FD3  30FE               	movlw	254
  6247  0FD4  0522               	andwf	___ftpack@arg+2,w
  6248  0FD5  1903               	btfsc	3,2
  6249  0FD6  2FE2               	goto	l3555
  6250  0FD7  2FCE               	goto	l3549
  6251  0FD8                     l3553:	
  6252  0FD8  0AA3               	incf	___ftpack@exp,f
  6253  0FD9  0AA0               	incf	___ftpack@arg,f
  6254  0FDA  1903               	skipnz
  6255  0FDB  0AA1               	incf	___ftpack@arg+1,f
  6256  0FDC  1903               	skipnz
  6257  0FDD  0AA2               	incf	___ftpack@arg+2,f
  6258  0FDE  1003               	clrc
  6259  0FDF  0CA2               	rrf	___ftpack@arg+2,f
  6260  0FE0  0CA1               	rrf	___ftpack@arg+1,f
  6261  0FE1  0CA0               	rrf	___ftpack@arg,f
  6262  0FE2                     l3555:	
  6263  0FE2  30FF               	movlw	255
  6264  0FE3  0522               	andwf	___ftpack@arg+2,w
  6265  0FE4  1903               	btfsc	3,2
  6266  0FE5  2FEC               	goto	l3559
  6267  0FE6  2FD8               	goto	l3553
  6268  0FE7                     l3557:	
  6269  0FE7  03A3               	decf	___ftpack@exp,f
  6270  0FE8  1003               	clrc
  6271  0FE9  0DA0               	rlf	___ftpack@arg,f
  6272  0FEA  0DA1               	rlf	___ftpack@arg+1,f
  6273  0FEB  0DA2               	rlf	___ftpack@arg+2,f
  6274  0FEC                     l3559:	
  6275  0FEC  1FA1               	btfss	___ftpack@arg+1,7
  6276  0FED  2FE7               	goto	l3557
  6277  0FEE  1C23               	btfss	___ftpack@exp,0
  6278  0FEF  13A1               	bcf	___ftpack@arg+1,7
  6279  0FF0  1003               	clrc
  6280  0FF1  0CA3               	rrf	___ftpack@exp,f
  6281  0FF2  0823               	movf	___ftpack@exp,w
  6282  0FF3  00A7               	movwf	??___ftpack+2
  6283  0FF4  01A6               	clrf	??___ftpack+1
  6284  0FF5  01A5               	clrf	??___ftpack
  6285  0FF6  0825               	movf	??___ftpack,w
  6286  0FF7  04A0               	iorwf	___ftpack@arg,f
  6287  0FF8  0826               	movf	??___ftpack+1,w
  6288  0FF9  04A1               	iorwf	___ftpack@arg+1,f
  6289  0FFA  0827               	movf	??___ftpack+2,w
  6290  0FFB  04A2               	iorwf	___ftpack@arg+2,f
  6291  0FFC  0824               	movf	___ftpack@sign,w
  6292  0FFD  1D03               	skipz
  6293  0FFE  17A2               	bsf	___ftpack@arg+2,7
  6294  0FFF  0008               	return
  6295  1000                     __end_of___ftpack:	
  6296                           
  6297                           	psect	text772
  6298  0D5B                     __ptext772:	
  6299 ;; *************** function _isr *****************
  6300 ;; Defined at:
  6301 ;;		line 194 in file "main.c"
  6302 ;; Parameters:    Size  Location     Type
  6303 ;;		None
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;  timer           1   10[COMMON] unsigned char 
  6306 ;; Return value:  Size  Location     Type
  6307 ;;		None               void
  6308 ;; Registers used:
  6309 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6310 ;; Tracked objects:
  6311 ;;		On entry : 0/0
  6312 ;;		On exit  : 40/0
  6313 ;;		Unchanged: FFE9F/0
  6314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6315 ;;      Params:         0       0       0       0
  6316 ;;      Locals:         1       0       0       0
  6317 ;;      Temps:          4       0       0       0
  6318 ;;      Totals:         5       0       0       0
  6319 ;;Total ram usage:        5 bytes
  6320 ;; Hardware stack levels used:    1
  6321 ;; Hardware stack levels required when called:    1
  6322 ;; This function calls:
  6323 ;;		_resetBuffer
  6324 ;;		i1___wmul
  6325 ;; This function is called by:
  6326 ;;		Interrupt level 1
  6327 ;; This function uses a non-reentrant model
  6328 ;;
  6329                           
  6330                           
  6331                           ;psect for function _isr
  6332  0D5B                     _isr:	
  6333                           
  6334                           ;main.c: 196: uint8_t timer = TMR0;
  6335  0D5B  1283               	bcf	3,5	;RP0=0, select bank0
  6336  0D5C  1303               	bcf	3,6	;RP1=0, select bank0
  6337  0D5D  0801               	movf	1,w	;volatile
  6338  0D5E  00FA               	movwf	isr@timer
  6339                           
  6340                           ;main.c: 197: if (PIR1bits.ADIF) {
  6341  0D5F  1F0C               	btfss	12,6	;volatile
  6342  0D60  2D78               	goto	i1l3695
  6343                           
  6344                           ;main.c: 198: PIR1bits.ADIF = 0;
  6345  0D61  130C               	bcf	12,6	;volatile
  6346                           
  6347                           ;main.c: 200: systemStatus.sun = ADRESH;
  6348  0D62  081E               	movf	30,w	;volatile
  6349  0D63  1683               	bsf	3,5	;RP0=1, select bank1
  6350  0D64  00A4               	movwf	(_systemStatus^(0+128)+4)
  6351  0D65  01A5               	clrf	((_systemStatus+1)^(0+128)+4)
  6352                           
  6353                           ;main.c: 201: systemStatus.sun <<= 2;
  6354  0D66  1003               	clrc
  6355  0D67  0DA4               	rlf	(_systemStatus^(0+128)+4),f
  6356  0D68  0DA5               	rlf	((_systemStatus+1)^(0+128)+4),f
  6357  0D69  1003               	clrc
  6358  0D6A  0DA4               	rlf	(_systemStatus^(0+128)+4),f
  6359  0D6B  0DA5               	rlf	((_systemStatus+1)^(0+128)+4),f
  6360                           
  6361                           ;main.c: 202: systemStatus.sun |= (ADRESL >> 6);
  6362  0D6C  081E               	movf	30,w	;volatile
  6363  0D6D  00F6               	movwf	??_isr
  6364  0D6E  3006               	movlw	6
  6365  0D6F                     u344_25:	
  6366  0D6F  1003               	clrc
  6367  0D70  0CF6               	rrf	??_isr,f
  6368  0D71  3EFF               	addlw	-1
  6369  0D72  1D03               	skipz
  6370  0D73  2D6F               	goto	u344_25
  6371  0D74  0876               	movf	??_isr,w
  6372  0D75  04A4               	iorwf	(_systemStatus^(0+128)+4),f
  6373                           
  6374                           ;main.c: 203: systemStatus.valueChanged = 1;
  6375  0D76  01A6               	clrf	(_systemStatus^(0+128)+6)
  6376  0D77  0AA6               	incf	(_systemStatus^(0+128)+6),f
  6377  0D78                     i1l3695:	
  6378                           
  6379                           ;main.c: 204: }
  6380                           ;main.c: 205: if (PIR1bits.TMR2IF) {
  6381  0D78  1283               	bcf	3,5	;RP0=0, select bank0
  6382  0D79  1C8C               	btfss	12,1	;volatile
  6383  0D7A  2DB7               	goto	i1l3735
  6384                           
  6385                           ;main.c: 207: if ((!PORTAbits.RA5) && (encoder_A_prev)) {
  6386  0D7B  1A85               	btfsc	5,5	;volatile
  6387  0D7C  2D89               	goto	i1l3705
  6388  0D7D  087D               	movf	_encoder_A_prev,w
  6389  0D7E  1903               	btfsc	3,2
  6390  0D7F  2D89               	goto	i1l3705
  6391                           
  6392                           ;main.c: 210: if (PORTAbits.RA4) {
  6393  0D80  1E05               	btfss	5,4	;volatile
  6394  0D81  2D86               	goto	i1l125
  6395                           
  6396                           ;main.c: 211: systemStatus.buttonUp = 1;
  6397  0D82  1683               	bsf	3,5	;RP0=1, select bank1
  6398  0D83  01B1               	clrf	(_systemStatus^(0+128)+17)
  6399  0D84  0AB1               	incf	(_systemStatus^(0+128)+17),f
  6400                           
  6401                           ;main.c: 212: } else {
  6402  0D85  2D89               	goto	i1l3705
  6403  0D86                     i1l125:	
  6404                           
  6405                           ;main.c: 214: systemStatus.buttonDown = 1;
  6406  0D86  1683               	bsf	3,5	;RP0=1, select bank1
  6407  0D87  01B2               	clrf	(_systemStatus^(0+128)+18)
  6408  0D88  0AB2               	incf	(_systemStatus^(0+128)+18),f
  6409  0D89                     i1l3705:	
  6410                           
  6411                           ;main.c: 215: }
  6412                           ;main.c: 217: }
  6413                           ;main.c: 218: encoder_A_prev = PORTAbits.RA5;
  6414  0D89  3000               	movlw	0
  6415  0D8A  1283               	bcf	3,5	;RP0=0, select bank0
  6416  0D8B  1A85               	btfsc	5,5	;volatile
  6417  0D8C  3001               	movlw	1
  6418  0D8D  00FD               	movwf	_encoder_A_prev
  6419                           
  6420                           ;main.c: 220: if(!PORTAbits.RA3 && !systemStatus.buttonPush)
  6421  0D8E  1985               	btfsc	5,3	;volatile
  6422  0D8F  2D96               	goto	i1l127
  6423  0D90  1683               	bsf	3,5	;RP0=1, select bank1
  6424  0D91  08B3               	movf	(_systemStatus^(0+128)+19),f
  6425  0D92  1D03               	skipz
  6426  0D93  2D96               	goto	i1l127
  6427                           
  6428                           ;main.c: 221: {
  6429                           ;main.c: 222: systemStatus.buttonPush = 1;
  6430  0D94  01B3               	clrf	(_systemStatus^(0+128)+19)
  6431  0D95  0AB3               	incf	(_systemStatus^(0+128)+19),f
  6432  0D96                     i1l127:	
  6433                           
  6434                           ;main.c: 223: }
  6435                           ;main.c: 225: if (PORTAbits.RA1 && lastWindPulse == 0) {
  6436  0D96  1283               	bcf	3,5	;RP0=0, select bank0
  6437  0D97  1C85               	btfss	5,1	;volatile
  6438  0D98  2DA0               	goto	i1l128
  6439  0D99  08E6               	movf	_lastWindPulse,f
  6440  0D9A  1D03               	skipz
  6441  0D9B  2DA0               	goto	i1l128
  6442                           
  6443                           ;main.c: 226: lastWindPulse = 1;
  6444  0D9C  01E6               	clrf	_lastWindPulse
  6445  0D9D  0AE6               	incf	_lastWindPulse,f
  6446                           
  6447                           ;main.c: 227: windCounter++;
  6448  0D9E  0AE8               	incf	_windCounter,f
  6449                           
  6450                           ;main.c: 228: } else if (PORTAbits.RA1 == 0) {
  6451  0D9F  2DA3               	goto	i1l3721
  6452  0DA0                     i1l128:	
  6453  0DA0  1885               	btfsc	5,1	;volatile
  6454  0DA1  2DA3               	goto	i1l3721
  6455                           
  6456                           ;main.c: 229: lastWindPulse = 0;
  6457  0DA2  01E6               	clrf	_lastWindPulse
  6458  0DA3                     i1l3721:	
  6459                           
  6460                           ;main.c: 230: }
  6461                           ;main.c: 232: if(systemStatus.backlight > systemStatus.backlightPWMCounter)
  6462  0DA3  1683               	bsf	3,5	;RP0=1, select bank1
  6463  0DA4  0834               	movf	(_systemStatus^(0+128)+20),w
  6464  0DA5  0236               	subwf	(_systemStatus^(0+128)+22),w
  6465  0DA6  1803               	skipnc
  6466  0DA7  2DAB               	goto	i1l131
  6467                           
  6468                           ;main.c: 233: PORTCbits.RC2 = 1; else PORTCbits.RC2 =0;
  6469  0DA8  1283               	bcf	3,5	;RP0=0, select bank0
  6470  0DA9  1507               	bsf	7,2	;volatile
  6471  0DAA  2DAD               	goto	i1l3725
  6472  0DAB                     i1l131:	
  6473  0DAB  1283               	bcf	3,5	;RP0=0, select bank0
  6474  0DAC  1107               	bcf	7,2	;volatile
  6475  0DAD                     i1l3725:	
  6476                           
  6477                           ;main.c: 235: systemStatus.backlightPWMCounter++;
  6478  0DAD  1683               	bsf	3,5	;RP0=1, select bank1
  6479  0DAE  3010               	movlw	16
  6480  0DAF  0AB6               	incf	(_systemStatus^(0+128)+22),f
  6481                           
  6482                           ;main.c: 236: if(systemStatus.backlightPWMCounter > 15)
  6483  0DB0  0236               	subwf	(_systemStatus^(0+128)+22),w
  6484  0DB1  1803               	btfsc	3,0
  6485                           
  6486                           ;main.c: 237: systemStatus.backlightPWMCounter = 0;
  6487  0DB2  01B6               	clrf	(_systemStatus^(0+128)+22)
  6488                           
  6489                           ;main.c: 239: PR2 = 63;
  6490  0DB3  303F               	movlw	63
  6491  0DB4  0092               	movwf	18	;volatile
  6492                           
  6493                           ;main.c: 240: PIR1bits.TMR2IF = 0;
  6494  0DB5  1283               	bcf	3,5	;RP0=0, select bank0
  6495  0DB6  108C               	bcf	12,1	;volatile
  6496  0DB7                     i1l3735:	
  6497                           
  6498                           ;main.c: 241: }
  6499                           ;main.c: 242: if (INTCONbits.T0IF) {
  6500  0DB7  1D0B               	btfss	11,2	;volatile
  6501  0DB8  2DBF               	goto	i1l3745
  6502                           
  6503                           ;main.c: 244: resetBuffer();
  6504  0DB9  2657  158A         	fcall	_resetBuffer
  6505                           
  6506                           ;main.c: 248: INTCONbits.T0IF = 0;
  6507  0DBB  110B               	bcf	11,2	;volatile
  6508                           
  6509                           ;main.c: 249: INTCONbits.T0IE = 0;
  6510  0DBC  128B               	bcf	11,5	;volatile
  6511                           
  6512                           ;main.c: 250: TMR0 = 87;
  6513  0DBD  3057               	movlw	87
  6514  0DBE  0081               	movwf	1	;volatile
  6515  0DBF                     i1l3745:	
  6516                           
  6517                           ;main.c: 253: }
  6518                           ;main.c: 254: if (PIR1bits.T1IF == 1) {
  6519  0DBF  1C0C               	btfss	12,0	;volatile
  6520  0DC0  2DF1               	goto	i1l3777
  6521                           
  6522                           ;main.c: 256: PIR1bits.T1IF = 0;
  6523  0DC1  100C               	bcf	12,0	;volatile
  6524                           
  6525                           ;main.c: 258: TMR1H = 0x3C;
  6526  0DC2  303C               	movlw	60
  6527  0DC3  008F               	movwf	15	;volatile
  6528                           
  6529                           ;main.c: 259: TMR1L = 0xB0;
  6530  0DC4  30B0               	movlw	176
  6531  0DC5  008E               	movwf	14	;volatile
  6532                           
  6533                           ;main.c: 261: if (timer1Overload == 19) {
  6534  0DC6  0867               	movf	_timer1Overload,w
  6535  0DC7  3A13               	xorlw	19
  6536  0DC8  1D03               	skipz
  6537  0DC9  2DDC               	goto	i1l3759
  6538                           
  6539                           ;main.c: 262: systemStatus.wind = windCounter * 60;
  6540  0DCA  0868               	movf	_windCounter,w
  6541  0DCB  00F0               	movwf	?i1___wmul
  6542  0DCC  303C               	movlw	60
  6543  0DCD  01F1               	clrf	?i1___wmul+1
  6544  0DCE  00F2               	movwf	?i1___wmul+2
  6545  0DCF  01F3               	clrf	?i1___wmul+3
  6546  0DD0  265E  158A         	fcall	i1___wmul
  6547  0DD2  0871               	movf	?i1___wmul+1,w
  6548  0DD3  1683               	bsf	3,5	;RP0=1, select bank1
  6549  0DD4  00A3               	movwf	((_systemStatus+1)^(0+128)+2)
  6550  0DD5  0870               	movf	?i1___wmul,w
  6551  0DD6  00A2               	movwf	(_systemStatus^(0+128)+2)
  6552                           
  6553                           ;main.c: 263: timer1Overload = 0;
  6554  0DD7  1283               	bcf	3,5	;RP0=0, select bank0
  6555  0DD8  01E7               	clrf	_timer1Overload
  6556                           
  6557                           ;main.c: 264: windCounter = 0;
  6558  0DD9  01E8               	clrf	_windCounter
  6559                           
  6560                           ;main.c: 267: ADCON0bits.GO = 1;
  6561  0DDA  149F               	bsf	31,1	;volatile
  6562                           
  6563                           ;main.c: 271: } else {
  6564  0DDB  2DDD               	goto	i1l3761
  6565  0DDC                     i1l3759:	
  6566                           
  6567                           ;main.c: 272: timer1Overload++;
  6568  0DDC  0AE7               	incf	_timer1Overload,f
  6569  0DDD                     i1l3761:	
  6570                           
  6571                           ;main.c: 273: }
  6572                           ;main.c: 275: if(systemStatus.backlightOn && systemStatus.backlight != systemStatus.desi
      +                          redBacklight)
  6573  0DDD  1683               	bsf	3,5	;RP0=1, select bank1
  6574  0DDE  0835               	movf	(_systemStatus^(0+128)+21),w
  6575  0DDF  1903               	btfsc	3,2
  6576  0DE0  2DE7               	goto	i1l3767
  6577  0DE1  0834               	movf	(_systemStatus^(0+128)+20),w
  6578  0DE2  0630               	xorwf	(_systemStatus^(0+128)+16),w
  6579  0DE3  1903               	skipnz
  6580  0DE4  2DE7               	goto	i1l3767
  6581                           
  6582                           ;main.c: 276: {
  6583                           ;main.c: 277: systemStatus.backlight++;
  6584  0DE5  0AB4               	incf	(_systemStatus^(0+128)+20),f
  6585                           
  6586                           ;main.c: 278: }
  6587  0DE6  2DEE               	goto	i1l3773
  6588  0DE7                     i1l3767:	
  6589                           
  6590                           ;main.c: 279: else if(!systemStatus.backlightOn && systemStatus.backlight != 0)
  6591  0DE7  08B5               	movf	(_systemStatus^(0+128)+21),f
  6592  0DE8  1D03               	skipz
  6593  0DE9  2DEE               	goto	i1l3773
  6594  0DEA  0834               	movf	(_systemStatus^(0+128)+20),w
  6595  0DEB  1903               	btfsc	3,2
  6596  0DEC  2DEE               	goto	i1l3773
  6597                           
  6598                           ;main.c: 280: {
  6599                           ;main.c: 281: systemStatus.backlight--;
  6600  0DED  03B4               	decf	(_systemStatus^(0+128)+20),f
  6601  0DEE                     i1l3773:	
  6602                           
  6603                           ;main.c: 282: }
  6604                           ;main.c: 284: if(systemStatus.backlightOn)
  6605  0DEE  0835               	movf	(_systemStatus^(0+128)+21),w
  6606  0DEF  1D03               	skipz
  6607                           
  6608                           ;main.c: 285: systemStatus.backlightOn--;
  6609  0DF0  03B5               	decf	(_systemStatus^(0+128)+21),f
  6610  0DF1                     i1l3777:	
  6611                           
  6612                           ;main.c: 287: }
  6613                           ;main.c: 288: if (INTCONbits.RABIE == 1 & INTCONbits.RABIF == 1) {
  6614  0DF1  1C0B               	btfss	11,0	;volatile
  6615  0DF2  2DF5               	goto	u364_20
  6616  0DF3  3001               	movlw	1
  6617  0DF4  2DF6               	goto	u364_22
  6618  0DF5                     u364_20:	
  6619  0DF5  3000               	movlw	0
  6620  0DF6                     u364_22:	
  6621  0DF6  00F6               	movwf	??_isr
  6622  0DF7  1D8B               	btfss	11,3	;volatile
  6623  0DF8  2DFB               	goto	u365_20
  6624  0DF9  3001               	movlw	1
  6625  0DFA  2DFC               	goto	u365_22
  6626  0DFB                     u365_20:	
  6627  0DFB  3000               	movlw	0
  6628  0DFC                     u365_22:	
  6629  0DFC  0576               	andwf	??_isr,w
  6630  0DFD  1903               	skipnz
  6631  0DFE  2E4E               	goto	i1l155
  6632                           
  6633                           ;main.c: 290: if (PORTAbits.RA0 == 1) {
  6634  0DFF  1283               	bcf	3,5	;RP0=0, select bank0
  6635  0E00  1C05               	btfss	5,0	;volatile
  6636  0E01  2E4C               	goto	i1l3817
  6637                           
  6638                           ;main.c: 292: TMR0 = 87;
  6639  0E02  3057               	movlw	87
  6640  0E03  0081               	movwf	1	;volatile
  6641                           
  6642                           ;main.c: 293: if (bitsReceived == 9) {
  6643  0E04  087B               	movf	_bitsReceived,w
  6644  0E05  3A09               	xorlw	9
  6645  0E06  1D03               	skipz
  6646  0E07  2E0B               	goto	i1l3785
  6647                           
  6648                           ;main.c: 294: dataBlock = 1;
  6649  0E08  01FC               	clrf	_dataBlock
  6650  0E09  0AFC               	incf	_dataBlock,f
  6651                           
  6652                           ;main.c: 295: } else if (bitsReceived == 17) {
  6653  0E0A  2E0F               	goto	i1l3789
  6654  0E0B                     i1l3785:	
  6655  0E0B  087B               	movf	_bitsReceived,w
  6656  0E0C  3A11               	xorlw	17
  6657  0E0D  1903               	btfsc	3,2
  6658                           
  6659                           ;main.c: 296: dataBlock = 0;
  6660  0E0E  01FC               	clrf	_dataBlock
  6661  0E0F                     i1l3789:	
  6662                           
  6663                           ;main.c: 297: }
  6664                           ;main.c: 300: if (bitsReceived >= 1) {
  6665  0E0F  087B               	movf	_bitsReceived,w
  6666  0E10  1903               	btfsc	3,2
  6667  0E11  2E4B               	goto	i1l3815
  6668                           
  6669                           ;main.c: 303: busBuffer.rawData[dataBlock] = busBuffer.rawData[dataBlock] >> 1;
  6670  0E12  087C               	movf	_dataBlock,w
  6671  0E13  3E69               	addlw	_busBuffer& (0+255)
  6672  0E14  0084               	movwf	4
  6673  0E15  1383               	bcf	3,7	;select IRP bank0
  6674  0E16  1003               	clrc
  6675  0E17  0C00               	rrf	0,w
  6676  0E18  00F6               	movwf	??_isr
  6677  0E19  087C               	movf	_dataBlock,w
  6678  0E1A  3E69               	addlw	_busBuffer& (0+255)
  6679  0E1B  0084               	movwf	4
  6680  0E1C  0876               	movf	??_isr,w
  6681  0E1D  0080               	movwf	0
  6682                           
  6683                           ;main.c: 305: if ((timer > 149) && (timer < 193)) {
  6684  0E1E  3096               	movlw	150
  6685  0E1F  027A               	subwf	isr@timer,w
  6686  0E20  1C03               	skipc
  6687  0E21  2E26               	goto	i1l3799
  6688  0E22  30C1               	movlw	193
  6689  0E23  027A               	subwf	isr@timer,w
  6690  0E24  1C03               	btfss	3,0
  6691  0E25  2E3C               	goto	i1l3807
  6692  0E26                     i1l3799:	
  6693  0E26  3077               	movlw	119
  6694  0E27  027A               	subwf	isr@timer,w
  6695  0E28  1C03               	skipc
  6696  0E29  2E3A               	goto	i1l3805
  6697  0E2A  3095               	movlw	149
  6698  0E2B  027A               	subwf	isr@timer,w
  6699  0E2C  1803               	skipnc
  6700  0E2D  2E3A               	goto	i1l3805
  6701                           
  6702                           ;main.c: 309: busBuffer.rawData[dataBlock] = busBuffer.rawData[dataBlock] | 0b10000000;
  6703  0E2E  087C               	movf	_dataBlock,w
  6704  0E2F  3E69               	addlw	_busBuffer& (0+255)
  6705  0E30  0084               	movwf	4
  6706  0E31  0800               	movf	0,w
  6707  0E32  3880               	iorlw	128
  6708  0E33  00F6               	movwf	??_isr
  6709  0E34  087C               	movf	_dataBlock,w
  6710  0E35  3E69               	addlw	_busBuffer& (0+255)
  6711  0E36  0084               	movwf	4
  6712  0E37  0876               	movf	??_isr,w
  6713  0E38  0080               	movwf	0
  6714                           
  6715                           ;main.c: 310: } else {
  6716  0E39  2E3C               	goto	i1l3807
  6717  0E3A                     i1l3805:	
  6718                           
  6719                           ;main.c: 311: resetBuffer();
  6720  0E3A  2657  158A         	fcall	_resetBuffer
  6721  0E3C                     i1l3807:	
  6722                           
  6723                           ;main.c: 312: }
  6724                           ;main.c: 314: if (bitsReceived == 24) {
  6725  0E3C  087B               	movf	_bitsReceived,w
  6726  0E3D  3A18               	xorlw	24
  6727  0E3E  1D03               	skipz
  6728  0E3F  2E4B               	goto	i1l3815
  6729                           
  6730                           ;main.c: 315: if (PORTCbits.RC3 == 1) {
  6731  0E40  1D87               	btfss	7,3	;volatile
  6732  0E41  2E44               	goto	i1l153
  6733                           
  6734                           ;main.c: 316: PORTCbits.RC3 = 0;
  6735  0E42  1187               	bcf	7,3	;volatile
  6736                           
  6737                           ;main.c: 317: } else {
  6738  0E43  2E45               	goto	i1l3813
  6739  0E44                     i1l153:	
  6740                           
  6741                           ;main.c: 318: PORTCbits.RC3 = 1;
  6742  0E44  1587               	bsf	7,3	;volatile
  6743  0E45                     i1l3813:	
  6744                           
  6745                           ;main.c: 319: }
  6746                           ;main.c: 320: busMessage.rawData[0] = busBuffer.rawData[0];
  6747  0E45  0869               	movf	_busBuffer,w
  6748  0E46  00EC               	movwf	_busMessage
  6749                           
  6750                           ;main.c: 321: busMessage.rawData[1] = busBuffer.rawData[1];
  6751  0E47  086A               	movf	_busBuffer+1,w
  6752  0E48  00ED               	movwf	_busMessage+1
  6753                           
  6754                           ;main.c: 322: busMessage.rawData[2] = busBuffer.rawData[2];
  6755  0E49  086B               	movf	_busBuffer+2,w
  6756  0E4A  00EE               	movwf	_busMessage+2
  6757  0E4B                     i1l3815:	
  6758                           
  6759                           ;main.c: 323: }
  6760                           ;main.c: 324: }
  6761                           ;main.c: 326: bitsReceived++;
  6762  0E4B  0AFB               	incf	_bitsReceived,f
  6763  0E4C                     i1l3817:	
  6764                           
  6765                           ;main.c: 327: }
  6766                           ;main.c: 329: INTCONbits.RABIF = 0;
  6767  0E4C  100B               	bcf	11,0	;volatile
  6768                           
  6769                           ;main.c: 330: INTCONbits.T0IE = 1;
  6770  0E4D  168B               	bsf	11,5	;volatile
  6771  0E4E                     i1l155:	
  6772  0E4E  0879               	movf	??_isr+3,w
  6773  0E4F  008A               	movwf	10
  6774  0E50  0878               	movf	??_isr+2,w
  6775  0E51  0084               	movwf	4
  6776  0E52  0E77               	swapf	(??_isr+1)^(0+-128),w
  6777  0E53  0083               	movwf	3
  6778  0E54  0EFE               	swapf	126,f
  6779  0E55  0E7E               	swapf	126,w
  6780  0E56  0009               	retfie
  6781  0E57                     __end_of_isr:	
  6782  0E57                     __ptext773:	
  6783 ;; *************** function _resetBuffer *****************
  6784 ;; Defined at:
  6785 ;;		line 185 in file "main.c"
  6786 ;; Parameters:    Size  Location     Type
  6787 ;;		None
  6788 ;; Auto vars:     Size  Location     Type
  6789 ;;		None
  6790 ;; Return value:  Size  Location     Type
  6791 ;;		None               void
  6792 ;; Registers used:
  6793 ;;		wreg, status,2
  6794 ;; Tracked objects:
  6795 ;;		On entry : 60/0
  6796 ;;		On exit  : 60/0
  6797 ;;		Unchanged: FFF9F/0
  6798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6799 ;;      Params:         0       0       0       0
  6800 ;;      Locals:         0       0       0       0
  6801 ;;      Temps:          0       0       0       0
  6802 ;;      Totals:         0       0       0       0
  6803 ;;Total ram usage:        0 bytes
  6804 ;; Hardware stack levels used:    1
  6805 ;; This function calls:
  6806 ;;		Nothing
  6807 ;; This function is called by:
  6808 ;;		_isr
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           
  6813                           ;psect for function _resetBuffer
  6814  0E57                     _resetBuffer:	
  6815  0E57  3002               	movlw	2
  6816                           
  6817                           ;main.c: 186: busBuffer.rawData[0] = 0;
  6818                           
  6819                           ; Regs used in _resetBuffer: [wreg+status,2]
  6820  0E58  01E9               	clrf	_busBuffer
  6821                           
  6822                           ;main.c: 187: busBuffer.rawData[1] = 0;
  6823  0E59  01EA               	clrf	_busBuffer+1
  6824                           
  6825                           ;main.c: 188: busBuffer.rawData[2] = 0;
  6826  0E5A  01EB               	clrf	_busBuffer+2
  6827                           
  6828                           ;main.c: 190: bitsReceived = 0;
  6829  0E5B  01FB               	clrf	_bitsReceived
  6830                           
  6831                           ;main.c: 191: dataBlock = 2;
  6832  0E5C  00FC               	movwf	_dataBlock
  6833  0E5D  0008               	return
  6834  0E5E                     __end_of_resetBuffer:	
  6835  0E5E                     __ptext774:	
  6836 ;; *************** function i1___wmul *****************
  6837 ;; Defined at:
  6838 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.12\sources\wmul.c"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;  __wmul          2    0[COMMON] unsigned int 
  6841 ;;  __wmul          2    2[COMMON] unsigned int 
  6842 ;; Auto vars:     Size  Location     Type
  6843 ;;  __wmul          2    4[COMMON] unsigned int 
  6844 ;; Return value:  Size  Location     Type
  6845 ;;                  2    0[COMMON] unsigned int 
  6846 ;; Registers used:
  6847 ;;		wreg, status,2, status,0
  6848 ;; Tracked objects:
  6849 ;;		On entry : 60/0
  6850 ;;		On exit  : 60/0
  6851 ;;		Unchanged: FFF9F/0
  6852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6853 ;;      Params:         4       0       0       0
  6854 ;;      Locals:         2       0       0       0
  6855 ;;      Temps:          0       0       0       0
  6856 ;;      Totals:         6       0       0       0
  6857 ;;Total ram usage:        6 bytes
  6858 ;; Hardware stack levels used:    1
  6859 ;; This function calls:
  6860 ;;		Nothing
  6861 ;; This function is called by:
  6862 ;;		_isr
  6863 ;; This function uses a non-reentrant model
  6864 ;;
  6865                           
  6866                           
  6867                           ;psect for function i1___wmul
  6868  0E5E                     i1___wmul:	
  6869                           
  6870                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  6871  0E5E  01F4               	clrf	i1___wmul@product
  6872  0E5F  01F5               	clrf	i1___wmul@product+1
  6873  0E60                     i1l3669:	
  6874  0E60  1C70               	btfss	i1___wmul@multiplier,0
  6875  0E61  2E68               	goto	i1l3673
  6876  0E62  0872               	movf	i1___wmul@multiplicand,w
  6877  0E63  07F4               	addwf	i1___wmul@product,f
  6878  0E64  1803               	skipnc
  6879  0E65  0AF5               	incf	i1___wmul@product+1,f
  6880  0E66  0873               	movf	i1___wmul@multiplicand+1,w
  6881  0E67  07F5               	addwf	i1___wmul@product+1,f
  6882  0E68                     i1l3673:	
  6883  0E68  1003               	clrc
  6884  0E69  0DF2               	rlf	i1___wmul@multiplicand,f
  6885  0E6A  0DF3               	rlf	i1___wmul@multiplicand+1,f
  6886  0E6B  1003               	clrc
  6887  0E6C  0CF1               	rrf	i1___wmul@multiplier+1,f
  6888  0E6D  0CF0               	rrf	i1___wmul@multiplier,f
  6889  0E6E  0871               	movf	i1___wmul@multiplier+1,w
  6890  0E6F  0470               	iorwf	i1___wmul@multiplier,w
  6891  0E70  1D03               	skipz
  6892  0E71  2E60               	goto	i1l3669
  6893  0E72  0875               	movf	i1___wmul@product+1,w
  6894  0E73  00F1               	movwf	?i1___wmul+1
  6895  0E74  0874               	movf	i1___wmul@product,w
  6896  0E75  00F0               	movwf	?i1___wmul
  6897  0E76  0008               	return
  6898  0E77                     __end_ofi1___wmul:	
  6899                           
  6900                           	psect	intentry
  6901  0004                     __pintentry:	
  6902                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6903                           
  6904  0004                     interrupt_function:	
  6905  007E                     saved_w	set	btemp
  6906  0004  00FE               	movwf	btemp
  6907  0005  0E03               	swapf	3,w
  6908  0006  00F7               	movwf	??_isr+1
  6909  0007  0804               	movf	4,w
  6910  0008  00F8               	movwf	??_isr+2
  6911  0009  080A               	movf	10,w
  6912  000A  00F9               	movwf	??_isr+3
  6913  000B  158A  2D5B         	ljmp	_isr
  6914                           
  6915                           	psect	text775
  6916  0000                     __ptext775:	
  6917                           
  6918                           ;psect for function i1___wmul
  6919  007E                     btemp	set	126	;btemp
  6920  007E                     wtemp0	set	126


Data Sizes:
    Strings     60
    Constant    117
    Data        0
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     70      79
    BANK1            80      0      30
    BANK2            80      0       0

Pointer List with Targets:

    ?___ftpack	float  size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?___fttol	long  size(1) Largest target is 0

    ?___ftmul	float  size(1) Largest target is 0

    ?___lwtoft	float  size(1) Largest target is 0

    ?___ftadd	float  size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    sprintf$1134	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_5(CODE[17]), STR_4(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 20
		 -> statusString2(CODE[20]), statusString1(CODE[16]), STR_1(CODE[14]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 18
		 -> updateStatus@textBuffer(BANK0[17]), sendSeriotData@text(BANK0[18]), 

    ?_sprintf	int  size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1114$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    updateStatus@systemStatus.west	PTR struct Awning size(1) Largest target is 0

    updateStatus@systemStatus.south	PTR struct Awning size(1) Largest target is 0

    updateStatus@systemStatus.east	PTR struct Awning size(1) Largest target is 0

    updateStatus@systemStatus	PTR struct SystemStatus size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    updateStatus@menuStatus.changeValue	PTR unsigned char  size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    updateStatus@menuStatus	PTR struct MenuStatus size(1) Largest target is 8
		 -> menuStatus(BANK1[7]), 

    pressButton@menuStatus.changeValue	PTR unsigned char  size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    pressButton@menuStatus	PTR struct MenuStatus size(1) Largest target is 8
		 -> menuStatus(BANK1[7]), 

    pressButton@systemStatus	PTR struct SystemStatus size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    turnLeft@menuStatus.changeValue	PTR unsigned char  size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    turnLeft@menuStatus	PTR struct MenuStatus size(1) Largest target is 8
		 -> menuStatus(BANK1[7]), 

    turnLeft@systemStatus	PTR struct SystemStatus size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    turnRight@menuStatus.changeValue	PTR unsigned char  size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    turnRight@menuStatus	PTR struct MenuStatus size(1) Largest target is 8
		 -> menuStatus(BANK1[7]), 

    turnRight@systemStatus	PTR struct SystemStatus size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    handleMainMenu@systemStatus.west	PTR struct Awning size(1) Largest target is 0

    handleMainMenu@systemStatus.south	PTR struct Awning size(1) Largest target is 0

    handleMainMenu@systemStatus.east	PTR struct Awning size(1) Largest target is 0

    handleMainMenu@systemStatus	PTR struct SystemStatus size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    handleMainMenu@menuStatus.changeValue	PTR unsigned char  size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    handleMainMenu@menuStatus	PTR struct MenuStatus size(1) Largest target is 8
		 -> menuStatus(BANK1[7]), 

    updateCurrentScreen@menuStatus.changeValue	PTR unsigned char  size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    updateCurrentScreen@menuStatus	PTR struct MenuStatus size(1) Largest target is 8
		 -> menuStatus(BANK1[7]), 

    updateCurrentScreen@systemStatus	PTR struct SystemStatus size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    controlBacklight@systemStatus.west	PTR struct Awning size(1) Largest target is 0

    controlBacklight@systemStatus.south	PTR struct Awning size(1) Largest target is 0

    controlBacklight@systemStatus.east	PTR struct Awning size(1) Largest target is 0

    controlBacklight@systemStatus	PTR struct SystemStatus size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    showMainMenu@menuStatus.changeValue	PTR unsigned char  size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    showMainMenu@menuStatus	PTR struct MenuStatus size(1) Largest target is 8
		 -> menuStatus(BANK1[7]), 

    showConfigureBacklight@systemStatus.west	PTR struct Awning size(1) Largest target is 0

    showConfigureBacklight@systemStatus.south	PTR struct Awning size(1) Largest target is 0

    showConfigureBacklight@systemStatus.east	PTR struct Awning size(1) Largest target is 0

    showConfigureBacklight@systemStatus	PTR struct SystemStatus size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    showConfigureBacklight@menuStatus.changeValue	PTR unsigned char  size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    showConfigureBacklight@menuStatus	PTR struct MenuStatus size(1) Largest target is 8
		 -> menuStatus(BANK1[7]), 

    putrsXLCDElement@data	PTR const unsigned char  size(1) Largest target is 51
		 -> menuString(CODE[51]), 

    putrsXLCD@data	PTR const unsigned char  size(1) Largest target is 51
		 -> STR_3(CODE[10]), STR_2(CODE[2]), menuString(CODE[51]), 

    putsXLCD@data	PTR unsigned char  size(1) Largest target is 17
		 -> updateStatus@textBuffer(BANK0[17]), 

    sendSerial@text	PTR const unsigned char  size(1) Largest target is 18
		 -> sendSeriotData@text(BANK0[18]), 

    S47SystemStatus$west	PTR struct Awning size(1) Largest target is 0

    systemStatus.west	PTR struct Awning size(1) Largest target is 0

    S47SystemStatus$south	PTR struct Awning size(1) Largest target is 0

    systemStatus.south	PTR struct Awning size(1) Largest target is 0

    S47SystemStatus$east	PTR struct Awning size(1) Largest target is 0

    systemStatus.east	PTR struct Awning size(1) Largest target is 0

    S21MenuStatus$changeValue	PTR unsigned char  size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 

    menuStatus.changeValue	PTR unsigned char  size(1) Largest target is 23
		 -> systemStatus(BANK1[23]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1___wmul

Critical Paths under _main in BANK0

    _main->_turnLeft
    _main->_turnRight
    _sendSeriotData->_sprintf
    _init_lcd->_writeCmdXLCD
    _init_lcd->_setDDRamAddr
    _turnLeft->_updateCurrentScreen
    _turnRight->_updateCurrentScreen
    _pressButton->_handleMainMenu
    _showMainMenu->_putrsXLCDElement
    _updateCurrentScreen->_updateStatus
    _handleMainMenu->_updateStatus
    _updateStatus->_sprintf
    _sprintf->___lwmod
    _putsXLCD->_writeDataXLCD
    _showConfigureBacklight->_putrsXLCDElement
    _clearLCD->_writeCmdXLCD
    _putrsXLCDElement->_putrsXLCD
    _putrsXLCD->_writeDataXLCD
    ___lwmod->___lwdiv
    ___ftadd->___ftmul
    ___ftmul->___lwtoft
    ___fttol->___ftadd
    ___lwtoft->___ftpack

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   24324
                _ConfigureOscillator
                            _InitApp
                           _init_lcd
                           _turnLeft
                          _turnRight
                        _pressButton
                           ___lwtoft
                            ___ftmul
                            ___ftadd
                            ___fttol
                     _sendSeriotData
                       _updateStatus
 ---------------------------------------------------------------------------------
 (1) _sendSeriotData                                      18    18      0    3529
                                             45 BANK0     18    18      0
                            _sprintf
                         _sendSerial
 ---------------------------------------------------------------------------------
 (2) _sendSerial                                           1     1      0      45
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             2     2      0     132
                                              2 BANK0      2     2      0
                       _writeCmdXLCD
                           _busyXLCD
                           _clearLCD
                       _setDDRamAddr
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             4     3      1    5083
                                             66 BANK0      4     3      1
                   _controlBacklight
                       _showMainMenu
                _updateCurrentScreen
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            4     3      1    5061
                                             66 BANK0      4     3      1
                   _controlBacklight
                       _showMainMenu
                _updateCurrentScreen
 ---------------------------------------------------------------------------------
 (1) _pressButton                                          2     1      1    4615
                                             66 BANK0      2     1      1
                   _controlBacklight
                     _handleMainMenu
 ---------------------------------------------------------------------------------
 (2) _showMainMenu                                         1     1      0     380
                                              6 BANK0      1     1      0
                           _clearLCD
                          _putrsXLCD
                       _setDDRamAddr
                   _putrsXLCDElement
 ---------------------------------------------------------------------------------
 (2) _controlBacklight                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _updateCurrentScreen                                  2     1      1    4373
                                             64 BANK0      2     1      1
                       _updateStatus
             _showConfigureBacklight
 ---------------------------------------------------------------------------------
 (2) _handleMainMenu                                       2     1      1    4505
                                             64 BANK0      2     1      1
             _showConfigureBacklight
                       _updateStatus
 ---------------------------------------------------------------------------------
 (1) _updateStatus                                        19    18      1    3837
                                             45 BANK0     19    18      1
                            _sprintf
                       _setDDRamAddr
                           _putsXLCD
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             33    20     13    3402
                                             12 BANK0     33    20     13
                            _isdigit
                             ___wmul
                             ___bmul
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) _putsXLCD                                             1     1      0      89
                                              2 BANK0      1     1      0
                           _busyXLCD
                      _writeDataXLCD
 ---------------------------------------------------------------------------------
 (3) _showConfigureBacklight                               3     2      1     426
                                              6 BANK0      3     2      1
                           _clearLCD
                   _putrsXLCDElement
                       _setDDRamAddr
                          _putrsXLCD
 ---------------------------------------------------------------------------------
 (4) _clearLCD                                             0     0      0      44
                           _busyXLCD
                       _writeCmdXLCD
 ---------------------------------------------------------------------------------
 (5) _writeCmdXLCD                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setDDRamAddr                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _putrsXLCDElement                                     3     2      1     181
                                              3 BANK0      3     2      1
                          _putrsXLCD
 ---------------------------------------------------------------------------------
 (4) _putrsXLCD                                            1     1      0      89
                                              2 BANK0      1     1      0
                           _busyXLCD
                      _writeDataXLCD
 ---------------------------------------------------------------------------------
 (3) _busyXLCD                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _writeDataXLCD                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1      92
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4      92
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     162
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     159
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftadd                                             12     6      6    1049
                                             26 BANK0     12     6      6
                           ___ftpack
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             15     9      6     535
                                             11 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             13     9      4     252
                                             38 BANK0     13     9      4
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3     231
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5     209
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  5     5      0     389
                                              6 COMMON     5     5      0
                        _resetBuffer
                           i1___wmul
 ---------------------------------------------------------------------------------
 (8) _resetBuffer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1___wmul                                             6     2      4     300
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _init_lcd
     _writeCmdXLCD
     _busyXLCD
     _clearLCD
       _busyXLCD
       _writeCmdXLCD
     _setDDRamAddr
   _turnLeft
     _controlBacklight
     _showMainMenu
       _clearLCD
         _busyXLCD
         _writeCmdXLCD
       _putrsXLCD
         _busyXLCD
         _writeDataXLCD
       _setDDRamAddr
       _putrsXLCDElement
         _putrsXLCD
           _busyXLCD
           _writeDataXLCD
     _updateCurrentScreen
       _updateStatus
         _sprintf
           _isdigit
           ___wmul
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
         _setDDRamAddr
         _putsXLCD
           _busyXLCD
           _writeDataXLCD
       _showConfigureBacklight
         _clearLCD
           _busyXLCD
           _writeCmdXLCD
         _putrsXLCDElement
           _putrsXLCD
             _busyXLCD
             _writeDataXLCD
         _setDDRamAddr
         _putrsXLCD
           _busyXLCD
           _writeDataXLCD
   _turnRight
     _controlBacklight
     _showMainMenu
       _clearLCD
         _busyXLCD
         _writeCmdXLCD
       _putrsXLCD
         _busyXLCD
         _writeDataXLCD
       _setDDRamAddr
       _putrsXLCDElement
         _putrsXLCD
           _busyXLCD
           _writeDataXLCD
     _updateCurrentScreen
       _updateStatus
         _sprintf
           _isdigit
           ___wmul
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
         _setDDRamAddr
         _putsXLCD
           _busyXLCD
           _writeDataXLCD
       _showConfigureBacklight
         _clearLCD
           _busyXLCD
           _writeCmdXLCD
         _putrsXLCDElement
           _putrsXLCD
             _busyXLCD
             _writeDataXLCD
         _setDDRamAddr
         _putrsXLCD
           _busyXLCD
           _writeDataXLCD
   _pressButton
     _controlBacklight
     _handleMainMenu
       _showConfigureBacklight
         _clearLCD
           _busyXLCD
           _writeCmdXLCD
         _putrsXLCDElement
           _putrsXLCD
             _busyXLCD
             _writeDataXLCD
         _setDDRamAddr
         _putrsXLCD
           _busyXLCD
           _writeDataXLCD
       _updateStatus
         _sprintf
           _isdigit
           ___wmul
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
         _setDDRamAddr
         _putsXLCD
           _busyXLCD
           _writeDataXLCD
   ___lwtoft
     ___ftpack
   ___ftmul
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___ftadd
     ___ftpack
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
     ___ftadd (ARG)
       ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   _sendSeriotData
     _sprintf
       _isdigit
       ___wmul
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _sendSerial
   _updateStatus
     _sprintf
       _isdigit
       ___wmul
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _setDDRamAddr
     _putsXLCD
       _busyXLCD
       _writeDataXLCD

 _isr (ROOT)
   _resetBuffer
   i1___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       A       2        0.0%
BANK0               50     46      4F       3       98.8%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0      1E       5       37.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0      7B       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0      85      10        0.0%


Microchip Technology PIC Macro Assembler V1.12 build 49521 
Symbol Table                                                                                   Tue Apr 23 02:08:48 2013

                                 pc 0002                      ___bmul@product 0021  
                       __CFG_CP$OFF 0000                                  l94 073D  
                                l96 0742                                  fsr 0004  
               ___wmul@multiplicand 0022                    i1___wmul@product 0074  
                      ___ftadd@exp1 0045                        ___ftadd@exp2 0044  
                      ___ftadd@sign 0043                                 l110 077B  
                               l430 0343                                 l512 0591  
                               l432 0345                                 l433 0347  
                               l434 0349                                 l370 0106  
                               l276 02F5                                 l436 035D  
                               l453 03DC                                 l381 0071  
                               l710 0F7E                                 l528 05DF  
                               l457 03DE                                 l458 03DF  
                               l483 0490                                 l492 04C4  
                               l488 04AA                                 l497 0500  
                               l766 09F7                                 _PR2 0092  
                      __CFG_CPD$OFF 0000          handleMainMenu@systemStatus 0061  
                               _isr 0D5B             pressButton@systemStatus 0063  
                               fsr0 0004                                 indf 0000  
                              S3861 07F2                                S3863 0800  
                              l3103 0281                                l3121 00CB  
                              l3123 00CE                                l3125 00D0  
                              l3303 030D                                l3143 008A  
                              l3119 00C6                                l3313 0728  
                              l3233 021D                                l3403 0703  
                              l3307 071D                                l2611 0360  
                              l3147 008F                                l3091 0267  
                              l3501 0F5D                                l3309 071E  
                              l3237 0225                                l2701 0450  
                              l3341 0107                                l3085 025A  
                              l3511 0F75                                l3503 0F62  
                              l3407 070B                                l3271 01CD  
                              l2631 03A6                                l2615 036B  
                              l2623 0393                                l2607 034B  
                              l3343 010B                                l3095 026F  
                              l3087 025F                                l3513 0F7A  
                              l3505 0F66                                l3329 0130  
                              l3265 01D3                                l2801 0560  
                              l2705 0453                                l3611 0ED6  
                              l3603 0ECA                                l3451 06E9  
                              l3427 06B3                                l2803 0564  
                              l2723 0487                                l2707 0465  
                              l2651 03C2                                l3355 0052  
                              l3099 0279                                l3525 0F94  
                              l3381 06DB                                l2901 0654  
                              l2821 0597                                l2661 03F6  
                              l2645 03C1                                l2653 03DA  
                              l3365 006A                                l3551 0FD3  
                              l3615 0EE6                                l3519 0F89  
                              l3471 0F25                                l3439 06CA  
                              l2911 067F                                l2831 05AD  
                              l2807 0582                                l2719 047D  
                              l2671 040A                                l2655 03E1  
                              l3553 0FD8                                l3545 0FCA  
                              l3537 0FB0                                l3481 0F3B  
                              l3297 0315                                l2905 066B  
                              l2809 0586                                l2665 0405  
                              l2921 0327                                l3555 0FE2  
                              l3627 09C4                                l3475 0F2C  
                              l3459 06FC                                l3387 0730  
                              l2915 068F                                l2907 0679  
                              l2923 06A0                                l2691 0439  
                              l2675 0410                                l2683 0425  
                              l2667 0407                                l2595 033E  
                              l3557 0FE7                                l3549 0FCE  
                              l3645 09EB                                l3629 09C9  
                              l3581 0EA9                                l3493 0F49  
                              l2837 05B5                                l2845 05C4  
                              l2781 050C                                l2693 0443  
                              l2677 041A                                l2597 034A  
                              l2941 0759                                l3559 0FEC  
                              l3655 0A01                                l3575 0E98  
                              l2871 05F7                                l2855 05D7  
                              l2767 04DE                                l2687 0433  
                              l3649 09F3                                l2881 060D  
                              l2865 05E7                                l2849 05C9  
                              l2769 04EC                                l2697 044A  
                              l2953 0771                                l3659 0A0F  
                              l3499 0F58                                l2795 0542  
                              l2787 052C                                l2947 0765  
                              l2789 0530                                l3599 0EBA  
                              l2887 0614                                l2959 077F  
                              l2897 064B                                l2889 0631  
                              ?_isr 0070                                STR_1 099D  
                              STR_2 09B5                                STR_3 09AB  
                              STR_4 097B                                STR_5 098C  
                              _BRGH 04C2                                u2015 03EF  
                              u2025 03FC                                u2135 04A7  
                              u2235 051D                                u2155 04C1  
                              u2175 04DB                                u2275 0557  
                              u2285 0573                                u3345 09D0  
                              u2475 068D                                u2925 06BC  
                              u3807 0297                                u3817 02A1  
                              u3907 02E1                                u3827 02B0  
                              u2965 06EF                                u3917 02EB  
                              u3837 02BA                                u3927 02F8  
                              u3847 019C                                u3937 0302  
                              u3857 01A6                                u3777 023B  
                              u3947 01EE                                u3867 01B5  
                              u3787 0247                                u3957 01F8  
                              u3877 01BF                                u3797 0252  
                              u3967 0207                                u3887 02CB  
                              u3977 0211                                u3897 02D5  
                              _TMR0 0001                                _SPEN 00C7  
                              _TRMT 04C1                                _TXEN 04C5  
                              _SYNC 04C4                                _main 074C  
                      ___ftpack@arg 0020                        ___ftpack@exp 0023  
                              btemp 007E              updateStatus@menuStatus 004D  
                              start 000D                       __CFG_IESO$OFF 0000  
      __size_of_updateCurrentScreen 0018                        _sprintf$1134 0041  
                      _sprintf$1127 003C                        _sprintf$1128 003E  
                 ___bmul@multiplier 0022                        ___ftmul@cntr 0038  
                      ___ftmul@sign 0039                     __end_of_InitApp 0A5D  
                      ___fttol@exp1 0052                        ___fttol@lval 004E  
                             ??_isr 0076                               ?_main 0070  
                   __end_of___ftadd 0FC2                               _BRG16 04DB  
                     __CFG_WDTE$OFF 0000                               _ANSEL 011E  
                   __end_of___ftmul 0F02                     __end_of___fttol 0A18  
                             _T2CON 0012                     __end_of___lwdiv 06CF  
                             i1l131 0DAB                               i1l125 0D86  
                             i1l127 0D96                               i1l128 0DA0  
                             i1l153 0E44                               i1l155 0E4E  
                   __end_of___lwmod 0701                               _TMR1H 000F  
                             _TMR1L 000E                               _SPBRG 0099  
                             _PORTA 0005                               _PORTB 0006  
                             _PORTC 0007                               _TRISA 0085  
                             _TRISB 0086                               _TRISC 0087  
                             _TXREG 0019                 _ConfigureOscillator 0A65  
                    __CFG_FCMEN$OFF 0000                     __end_of_dpowers 091C  
                   __end_of_isdigit 06DD                       ___ftpack@sign 0024  
             __size_of_writeCmdXLCD 003E                      __CFG_BOREN$OFF 0000  
                             pclath 000A                    __end_ofi1___wmul 0E77  
          ??_showConfigureBacklight 0027                               status 0003  
               i1___wmul@multiplier 0070                               wtemp0 007E  
                   __end_of_sprintf 06A5              updateStatus@textBuffer 004E  
              ?_ConfigureOscillator 0070                      __CFG_MCLRE$OFF 0000  
                   __initialization 07E0                        __end_of_main 07E0  
         __size_of_putrsXLCDElement 0014                       _statusString1 096B  
                     _statusString2 0957                              ??_main 0066  
                    _sendSeriotData 000F                       ___fttol@sign1 004D  
                      _writeCmdXLCD 0288                        putsXLCD@data 0022  
                     ?_setDDRamAddr 0070                              _ADRESH 001E  
                            _ADRESL 009E                    __end_of___ftpack 1000  
                            _ANSELH 011F                              i1l3721 0DA3  
                            i1l3705 0D89                              i1l3813 0E45  
                            i1l3805 0E3A                              i1l3725 0DAD  
                            i1l3807 0E3C                              i1l3815 0E4B  
                            i1l3735 0DB7                              i1l3673 0E68  
                            i1l3817 0E4C                              i1l3761 0DDD  
                            i1l3745 0DBF                              i1l3669 0E60  
                            i1l3773 0DEE                              i1l3767 0DE7  
                            i1l3759 0DDC                              i1l3695 0D78  
                            i1l3785 0E0B                              i1l3777 0DF1  
                            i1l3789 0E0F                              i1l3799 0E26  
                            u344_25 0D6F                    __end_of___lwtoft 0E87  
                            u364_20 0DF5                              u364_22 0DF6  
                            u365_20 0DFB                              u365_22 0DFC  
                      ?_resetBuffer 0070                              _SPBRGH 009A  
                  __end_of_clearLCD 022B                           ??_InitApp 0020  
             ??_ConfigureOscillator 0020                      __CFG_PWRTE$OFF 0000  
                     _lastWindPulse 0066                              ___bmul 072E  
                            ___wmul 0701                           ??___ftadd 0040  
                  __end_of_busyXLCD 030C                           ??___ftmul 0031  
                         ??___fttol 004A                           ??___lwdiv 0024  
                         ??___lwmod 002B              __end_of_sendSeriotData 002F  
                  __end_of_init_lcd 0288                   ?_controlBacklight 0070  
                            clrloop 0A5E                 turnRight@menuStatus 0062  
             ___ftmul@f3_as_product 0035              __size_of_writeDataXLCD 003C  
                         ??_isdigit 0020                  ??_controlBacklight 0020  
                            saved_w 007E                        ?_pressButton 0062  
                setDDRamAddr@DDaddr 0021                      ??_setDDRamAddr 0020  
                  __end_of_putsXLCD 01E1                           ??_sprintf 0039  
                  __end_of_turnLeft 00F0             __end_of__initialization 07EF  
   __size_of_showConfigureBacklight 001D                          ___ftadd@f1 003A  
                        ___ftadd@f2 003D                 ___bmul@multiplicand 0020  
                turnLeft@menuStatus 0062                          ___ftmul@f1 002B  
                        ___ftmul@f2 002E                          ___fttol@f1 0046  
                    __pcstackCOMMON 0070                        _systemStatus 00A0  
                   ?_sendSeriotData 0070                          ___lwtoft@c 0028  
                         ?i1___wmul 0070                      _OPTION_REGbits 0081  
               _updateCurrentScreen 00F7                        sprintf@width 0044  
                        __pbssBANK0 0066                          __pbssBANK1 00A0  
           __size_of_handleMainMenu 0037                       _writeDataXLCD 01E1  
              ?_updateCurrentScreen 0060             putrsXLCDElement@element 0023  
                        __pmaintext 074C                             ?___bmul 0020  
                           ?___wmul 0020                          __pintentry 0004  
                  _putrsXLCDElement 071A                             _CM1CON0 0119  
                           _CM2CON0 011A              _showConfigureBacklight 0120  
                         ?___ftpack 0020                          ??i1___wmul 0074  
                         ?___lwtoft 0028                           ?_clearLCD 0070  
                        _busMessage 006C                          __stringtab 0900  
                __size_of_putrsXLCD 0018                           ?_busyXLCD 0070  
                      _bitsReceived 007B                           ?_init_lcd 0070  
                    ?_writeDataXLCD 0070                  __size_of_turnRight 003D  
             ??_updateCurrentScreen 0061                             _InitApp 0A18  
              __size_of_resetBuffer 0007                __end_of_setDDRamAddr 01CB  
                   __size_of___bmul 000E                             ___ftadd 0F02  
                   __size_of___wmul 0019                             ___ftmul 0E87  
                           ___fttol 09B7                           ?_putsXLCD 0070  
                           ___lwdiv 06A5                             ___lwmod 06DD  
                        ??___ftpack 0025                          _menuStatus 00B7  
                         ?_turnLeft 0062                          _menuString 0924  
                        ??___lwtoft 002B                   __end_of_hexpowers 0924  
                         _T1CONbits 0010                             _dpowers 0912  
                           _isdigit 06CF                        __size_of_isr 00FC  
                        ??_clearLCD 0022                       ?_showMainMenu 0070  
                           _sprintf 0324                __size_of_pressButton 000C  
              end_of_initialization 07EF                   __end_of_octpowers 0912  
            showMainMenu@menuStatus 0026                          _sendSerial 073C  
                        ??_busyXLCD 0020                          ??_init_lcd 0022  
                        ??_putsXLCD 0022               i1___wmul@multiplicand 0072  
                 __end_of_putrsXLCD 0324                          ??_turnLeft 0063  
             turnRight@systemStatus 0065                           _PORTAbits 0005  
                         _PORTBbits 0006                           _PORTCbits 0007  
                 __end_of_turnRight 00AF                      ??_showMainMenu 0026  
                         _TRISBbits 0086                           _TRISCbits 0087  
       __end_of_ConfigureOscillator 0A69                     ??_writeDataXLCD 0020  
                    _handleMainMenu 003B           __size_of_controlBacklight 0007  
      controlBacklight@systemStatus 0020                      _timer1Overload 0067  
                  ??_sendSeriotData 004D                  sendSeriotData@text 004D  
                     ?_updateStatus 004D                         ___ftmul@exp 0034  
              putrsXLCDElement@data 0025                      __end_of___bmul 073C  
   updateCurrentScreen@systemStatus 0061                      __end_of___wmul 071A  
               start_initialization 07E0                   __size_ofi1___wmul 0019  
                       __end_of_isr 0E57              __end_of_handleMainMenu 0072  
          __end_of_putrsXLCDElement 072E                         ?_sendSerial 0070  
             __size_of_setDDRamAddr 003D                      ??_updateStatus 004E  
                     putrsXLCD@data 0022                            ??___bmul 0021  
           ?_showConfigureBacklight 0026                            ??___wmul 0024  
                 __size_of___ftpack 003E                         __pbssCOMMON 007B  
                 __size_of___lwtoft 0010                       __pcstackBANK0 0020  
               __end_of__stringdata 09B7                        _setDDRamAddr 018E  
                      _isdigit$1192 0020                   __size_of_clearLCD 000E  
                   ?_handleMainMenu 0060                     writeCmdXLCD@cmd 0021  
                       sprintf@_val 0046                         sprintf@flag 004B  
                         _dataBlock 007C                         sprintf@prec 0043  
                 __size_of_busyXLCD 0046                            ?_InitApp 0070  
              turnLeft@systemStatus 0065                   __size_of_init_lcd 005D  
          handleMainMenu@menuStatus 0060      __end_of_showConfigureBacklight 013D  
                  ___lwdiv@dividend 0022                __end_of_showMainMenu 0120  
                 writeDataXLCD@data 0021                            ?___ftadd 003A  
                         __ptext740 073C                           __ptext741 0A65  
                         __ptext750 003B                           __ptext742 0A18  
                         __ptext751 013D                           __ptext743 022B  
                         __ptext760 02C6                           __ptext752 0324  
                         __ptext744 00AF                           __ptext761 01E1  
                         __ptext753 01CB                           __ptext745 0072  
                         __ptext770 0E77                           __ptext762 06CF  
                         __ptext754 0120                           __ptext746 002F  
                         __ptext771 0FC2                           __ptext763 072E  
                         __ptext755 021D                           __ptext747 010F  
                         __ptext739 000F                           __ptext772 0D5B  
                         __ptext764 0701                           __ptext756 0288  
                         __ptext748 00F0                           __ptext773 0E57  
                         __ptext765 06A5                           __ptext757 018E  
                         __ptext749 00F7                           __ptext774 0E5E  
                         __ptext766 06DD                           __ptext758 071A  
                         __ptext775 0000                           __ptext767 0F02  
                         __ptext759 030C                           __ptext768 0E87  
                         __ptext769 09B7                            ?___ftmul 002B  
                          ?___fttol 0046                            ?___lwdiv 0020  
             __end_of_statusString1 097B               __end_of_statusString2 096B  
                          ?___lwmod 0027                           _busBuffer 0069  
               __size_of_sendSerial 0010                           __pstrings 0900  
                 __size_of_putsXLCD 0016                           __pswtext1 07F2  
                         __pswtext2 0800                       ?_writeCmdXLCD 0070  
                          ?_isdigit 0070                   __size_of_turnLeft 0041  
                         _hexpowers 091C                    ___lwdiv@quotient 0024  
                          ?_sprintf 002C         __end_of_updateCurrentScreen 010F  
                     ??_resetBuffer 0070                    _controlBacklight 00F0  
                 interrupt_function 0004                      ___wmul@product 0024  
                          _IOCAbits 0096                           _octpowers 0906  
                          _PIE1bits 008C                            _PIR1bits 000C  
    putrsXLCDElement@currentElement 0024                          _ADCON0bits 001F  
                       __stringbase 0905                         __stringdata 097B  
                 ___wmul@multiplier 0020                            i1___wmul 0E5E  
                    ??_writeCmdXLCD 0020                            _WPUAbits 0095  
                         _putrsXLCD 030C                       ??_pressButton 0063  
              __end_of_updateStatus 018E                           _turnRight 0072  
  showConfigureBacklight@menuStatus 0026                      _encoder_A_prev 007D  
     updateCurrentScreen@menuStatus 0060                    __size_of_InitApp 0045  
               __end_of_resetBuffer 0E5E                    __size_of___ftadd 00C0  
                  __size_of___ftmul 007B                    __size_of___fttol 0061  
                  __size_of___lwdiv 002A                    __size_of___lwmod 0024  
                          ___ftpack 0FC2                  __end_of__stringtab 0906  
                          ___lwtoft 0E77                          sprintf@idx 0040  
                        ?_putrsXLCD 0070            updateStatus@systemStatus 005F  
                    sendSerial@text 0020                            _clearLCD 021D  
                  __size_of_isdigit 000E                     ___lwdiv@divisor 0020  
                   ___lwdiv@counter 0026                          ?_turnRight 0062  
                  __size_of_sprintf 0381                        ??_sendSerial 0020  
                 ?_putrsXLCDElement 0023                            _busyXLCD 02C6  
               __end_of_pressButton 003B               __end_of_writeDataXLCD 021D  
                          _init_lcd 022B                       __size_of_main 0094  
             __size_of_showMainMenu 0011                  ??_putrsXLCDElement 0024  
             pressButton@menuStatus 0062                  __end_of_menuString 0957  
      __size_of_ConfigureOscillator 0004                            clear_ram 0A5D  
                          _putsXLCD 01CB                            _turnLeft 00AF  
                __end_of_sendSerial 074C                    ??_handleMainMenu 0061  
                        _INTCONbits 000B                            isr@timer 007A  
                          isdigit@c 0021                        _showMainMenu 010F  
                          intlevel1 0000                           sprintf@ap 0042  
                         sprintf@sp 004A                         _resetBuffer 0E57  
                  ___lwmod@dividend 0029                __end_of_writeCmdXLCD 02C6  
                         stringcode 0900                          _OSCCONbits 008F  
showConfigureBacklight@systemStatus 0027            __end_of_controlBacklight 00F7  
             __size_of_updateStatus 0051             showConfigureBacklight@i 0028  
           __size_of_sendSeriotData 0020                            sprintf@c 0049  
                          sprintf@f 002C                         ??_putrsXLCD 0022  
                   ___lwmod@divisor 0027                     ___lwmod@counter 002B  
                          stringdir 0900                            stringtab 0900  
                       _pressButton 002F                         ??_turnRight 0063  
                       _windCounter 0068                   __CFG_FOSC$INTRCIO 0000  
                      _updateStatus 013D  
