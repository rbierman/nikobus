Version 3.2 HI-TECH Software Intermediate Code
"10 C:\Program Files (x86)\Microchip\xc8\v1.12\include\stdarg.h
[v ___va_start `(*v ~T0 @X0 0 ef ]
[p i ___va_start ]
"7 C:\Program Files (x86)\Microchip\xc8\v1.12\include\ctype.h
[v _isdigit `(b ~T0 @X0 0 ef1`uc ]
"13 C:\Program Files (x86)\Microchip\xc8\v1.12\include\stdarg.h
[v ___va_arg `(*v ~T0 @X0 0 ev`*v ]
[p i ___va_arg ]
[; ;stdio.h: 8: typedef int ptrdiff_t;
[; ;stdio.h: 9: typedef unsigned size_t;
[; ;stdio.h: 10: typedef unsigned short wchar_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 23: extern int errno;
[; ;stdio.h: 54: struct __prbuf
[; ;stdio.h: 55: {
[; ;stdio.h: 56: char * ptr;
[; ;stdio.h: 57: void (* func)(char);
[; ;stdio.h: 58: };
[; ;conio.h: 17: extern int errno;
[; ;conio.h: 20: extern void init_uart(void);
[; ;conio.h: 22: extern char getch(void);
[; ;conio.h: 23: extern char getche(void);
[; ;conio.h: 24: extern void putch(char);
[; ;conio.h: 25: extern void ungetch(char);
[; ;conio.h: 27: extern __bit kbhit(void);
[; ;conio.h: 31: extern char * cgets(char *);
[; ;conio.h: 32: extern void cputs(const char *);
[; ;stdio.h: 99: extern int cprintf(char *, ...);
[; ;stdio.h: 104: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 194: extern char * gets(char *);
[; ;stdio.h: 195: extern int puts(const char *);
[; ;stdio.h: 196: extern int scanf(const char *, ...);
[; ;stdio.h: 197: extern int sscanf(const char *, const char *, ...);
[; ;stdio.h: 198: extern int vprintf(const char *, va_list);
[; ;stdio.h: 199: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 200: extern int vscanf(const char *, va_list ap);
[; ;stdio.h: 201: extern int vsscanf(const char *, const char *, va_list);
[; ;stdio.h: 205: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 206: extern int printf(const char *, ...);
[; ;ctype.h: 4: extern __bit isalpha(char);
[; ;ctype.h: 5: extern __bit isupper(char);
[; ;ctype.h: 6: extern __bit islower(char);
[; ;ctype.h: 7: extern __bit isdigit(char);
[; ;ctype.h: 8: extern __bit isxdigit(char);
[; ;ctype.h: 9: extern __bit isspace(char);
[; ;ctype.h: 10: extern __bit ispunct(char);
[; ;ctype.h: 11: extern __bit isalnum(char);
[; ;ctype.h: 12: extern __bit isprint(char);
[; ;ctype.h: 13: extern __bit isgraph(char);
[; ;ctype.h: 14: extern __bit iscntrl(char);
[; ;ctype.h: 17: extern char toupper(char);
[; ;ctype.h: 18: extern char tolower(char);
[; ;stdlib.h: 27: typedef struct {
[; ;stdlib.h: 28: int rem;
[; ;stdlib.h: 29: int quot;
[; ;stdlib.h: 30: } div_t;
[; ;stdlib.h: 31: typedef struct {
[; ;stdlib.h: 32: unsigned rem;
[; ;stdlib.h: 33: unsigned quot;
[; ;stdlib.h: 34: } udiv_t;
[; ;stdlib.h: 35: typedef struct {
[; ;stdlib.h: 36: long quot;
[; ;stdlib.h: 37: long rem;
[; ;stdlib.h: 38: } ldiv_t;
[; ;stdlib.h: 39: typedef struct {
[; ;stdlib.h: 40: unsigned long quot;
[; ;stdlib.h: 41: unsigned long rem;
[; ;stdlib.h: 42: } uldiv_t;
[; ;stdlib.h: 65: extern double atof(const char *);
[; ;stdlib.h: 66: extern double strtod(const char *, const char **);
[; ;stdlib.h: 67: extern int atoi(const char *);
[; ;stdlib.h: 68: extern unsigned xtoi(const char *);
[; ;stdlib.h: 69: extern long atol(const char *);
[; ;stdlib.h: 70: extern long strtol(const char *, char **, int);
[; ;stdlib.h: 72: extern int rand(void);
[; ;stdlib.h: 73: extern void srand(unsigned int);
[; ;stdlib.h: 74: extern void * calloc(size_t, size_t);
[; ;stdlib.h: 75: extern div_t div(int numer, int denom);
[; ;stdlib.h: 76: extern udiv_t udiv(unsigned numer, unsigned denom);
[; ;stdlib.h: 77: extern ldiv_t ldiv(long numer, long denom);
[; ;stdlib.h: 78: extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
[; ;stdlib.h: 79: extern unsigned long _lrotl(unsigned long value, unsigned int shift);
[; ;stdlib.h: 80: extern unsigned long _lrotr(unsigned long value, unsigned int shift);
[; ;stdlib.h: 81: extern unsigned int _rotl(unsigned int value, unsigned int shift);
[; ;stdlib.h: 82: extern unsigned int _rotr(unsigned int value, unsigned int shift);
[; ;stdlib.h: 87: extern void * malloc(size_t);
[; ;stdlib.h: 88: extern void free(void *);
[; ;stdlib.h: 89: extern void * realloc(void *, size_t);
[; ;stdlib.h: 91: extern void abort(void);
[; ;stdlib.h: 92: extern void exit(int);
[; ;stdlib.h: 93: extern int atexit(void (*)(void));
[; ;stdlib.h: 94: extern char * getenv(const char *);
[; ;stdlib.h: 95: extern char ** environ;
[; ;stdlib.h: 96: extern int system(char *);
[; ;stdlib.h: 97: extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
[; ;stdlib.h: 98: extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
[; ;stdlib.h: 99: extern int abs(int);
[; ;stdlib.h: 100: extern long labs(long);
[; ;stdlib.h: 103: extern char * itoa(char * buf, int val, int base);
[; ;stdlib.h: 104: extern char * utoa(char * buf, unsigned val, int base);
[; ;stdlib.h: 109: extern char * ltoa(char * buf, long val, int base);
[; ;stdlib.h: 110: extern char * ultoa(char * buf, unsigned long val, int base);
[; ;stdlib.h: 112: extern char * ftoa(float f, int * status);
[; ;string.h: 22: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 23: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 24: extern void * memset(void *, int, size_t);
[; ;string.h: 35: extern char * strcat(char *, const char *);
[; ;string.h: 36: extern char * strcpy(char *, const char *);
[; ;string.h: 37: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 38: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 39: extern char * strdup(const char *);
[; ;string.h: 40: extern char * strtok(char *, const char *);
[; ;string.h: 43: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 44: extern int strcmp(const char *, const char *);
[; ;string.h: 45: extern int stricmp(const char *, const char *);
[; ;string.h: 46: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 47: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 48: extern void * memchr(const void *, int, size_t);
[; ;string.h: 49: extern size_t strcspn(const char *, const char *);
[; ;string.h: 50: extern char * strpbrk(const char *, const char *);
[; ;string.h: 51: extern size_t strspn(const char *, const char *);
[; ;string.h: 52: extern char * strstr(const char *, const char *);
[; ;string.h: 53: extern char * stristr(const char *, const char *);
[; ;string.h: 54: extern char * strerror(int);
[; ;string.h: 55: extern size_t strlen(const char *);
[; ;string.h: 56: extern char * strchr(const char *, int);
[; ;string.h: 57: extern char * strichr(const char *, int);
[; ;string.h: 58: extern char * strrchr(const char *, int);
[; ;string.h: 59: extern char * strrichr(const char *, int);
[; ;conio.h: 17: extern int errno;
[; ;conio.h: 20: extern void init_uart(void);
[; ;conio.h: 22: extern char getch(void);
[; ;conio.h: 23: extern char getche(void);
[; ;conio.h: 24: extern void putch(char);
[; ;conio.h: 25: extern void ungetch(char);
[; ;conio.h: 27: extern __bit kbhit(void);
[; ;conio.h: 31: extern char * cgets(char *);
[; ;conio.h: 32: extern void cputs(const char *);
[; ;sys.h: 17: extern int errno;
[; ;sys.h: 30: extern int execl(char *, char *, ...);
[; ;sys.h: 31: extern int execv(char *, char **);
[; ;sys.h: 32: extern int execve(char *, char **, char **);
[; ;sys.h: 33: extern int execle(char *, char *, ...);
[; ;sys.h: 34: extern int execvp(char *, char **);
[; ;sys.h: 35: extern int execlp(char *, char *, ...);
[; ;sys.h: 36: extern int getpid(void);
[; ;sys.h: 37: extern char * mktemp(char *);
[; ;sys.h: 51: extern int spawnl(char *, char *, ...);
[; ;sys.h: 52: extern int spawnv(char *, char **);
[; ;sys.h: 53: extern int spawnle(char *, char *, ...);
[; ;sys.h: 54: extern int spawnve(char *, char **, char **);
[; ;sys.h: 55: extern int spawnlp(char *, char *, ...);
[; ;sys.h: 56: extern int spawnvp(char *, char **);
[; ;sys.h: 58: extern int chdir(char *);
[; ;sys.h: 59: extern int chdrv(char *);
[; ;sys.h: 60: extern int mkdir(char *);
[; ;sys.h: 61: extern int rmdir(char *);
[; ;sys.h: 62: extern char * getcwd(char *);
[; ;sys.h: 63: extern void persist_validate(void);
[; ;sys.h: 64: extern int persist_check(int);
[; ;sys.h: 65: extern char * getdrv(void);
[; ;sys.h: 66: extern char ** _getargs(char *, char *);
[; ;sys.h: 67: extern int _argc_;
[; ;sys.h: 78: extern void * sbrk(size_t);
[; ;sys.h: 79: extern void brk(void *);
[; ;sys.h: 85: extern int _pnum(unsigned long, signed char, signed char, unsigned char, unsigned char, struct __prbuf *, unsigned char);
[; ;sys.h: 86: extern int _fnum(double, short, short, short, struct __prbuf *, short);
[; ;math.h: 3: extern double fabs(double);
[; ;math.h: 4: extern double floor(double);
[; ;math.h: 5: extern double ceil(double);
[; ;math.h: 6: extern double modf(double, double *);
[; ;math.h: 7: extern double sqrt(double);
[; ;math.h: 8: extern double atof(const char *);
[; ;math.h: 9: extern double sin(double);
[; ;math.h: 10: extern double cos(double);
[; ;math.h: 11: extern double tan(double);
[; ;math.h: 12: extern double asin(double);
[; ;math.h: 13: extern double acos(double);
[; ;math.h: 14: extern double atan(double);
[; ;math.h: 15: extern double atan2(double, double);
[; ;math.h: 16: extern double log(double);
[; ;math.h: 17: extern double log10(double);
[; ;math.h: 18: extern double pow(double, double);
[; ;math.h: 19: extern double exp(double);
[; ;math.h: 20: extern double sinh(double);
[; ;math.h: 21: extern double cosh(double);
[; ;math.h: 22: extern double tanh(double);
[; ;math.h: 23: extern double eval_poly(double, const double *, int);
[; ;math.h: 24: extern double frexp(double, int *);
[; ;math.h: 25: extern double ldexp(double, int);
[; ;math.h: 26: extern double fmod(double, double);
[; ;math.h: 27: extern double trunc(double);
[; ;math.h: 28: extern double round(double);
"13 C:\Program Files (x86)\Microchip\xc8\v1.12\sources\doprnt.c
[p n 350 ]
"354
[v _dpowers `Cui ~T0 @X0 -> 0 `x s ]
[i _dpowers
:U ..
-> -> 1 `i `ui
-> -> 10 `i `ui
-> -> 100 `i `ui
-> -> 1000 `i `ui
-> -> 10000 `i `ui
..
]
[; ;doprnt.c: 354: const static unsigned int dpowers[] = {1, 10, 100, 1000, 10000,
[; ;doprnt.c: 359: };
"362
[v _hexpowers `Cui ~T0 @X0 -> 0 `x s ]
[i _hexpowers
:U ..
-> -> 1 `i `ui
-> -> 16 `i `ui
-> -> 256 `i `ui
-> -> 4096 `i `ui
..
]
[; ;doprnt.c: 362: const static unsigned int hexpowers[] = {1, 0x10, 0x100, 0x1000,
[; ;doprnt.c: 366: };
"369
[v _octpowers `Cui ~T0 @X0 -> 0 `x s ]
[i _octpowers
:U ..
-> -> 1 `i `ui
-> -> 8 `i `ui
-> -> 64 `i `ui
-> -> 512 `i `ui
-> -> 4096 `i `ui
-> 32768 `ui
..
]
[; ;doprnt.c: 369: const static unsigned int octpowers[] = {1, 010, 0100, 01000, 010000, 0100000,
[; ;doprnt.c: 375: };
"493
[v _sprintf `(i ~T0 @X0 1 e1v`*uc`*Cuc ]
{
[; ;doprnt.c: 455: int
[; ;doprnt.c: 492: sprintf(char * sp, const char * f, ...)
[; ;doprnt.c: 493: {
[e :U _sprintf ]
[v _sp `*uc ~T0 @X0 1 r1 ]
[v _f `*Cuc ~T0 @X0 1 r0 ]
[f ]
"494
[v _ap `*v ~T0 @X0 -> -> 1 `i `ux a ]
"499
[v _c `c ~T0 @X0 1 a ]
"501
[v _width `i ~T0 @X0 1 a ]
"506
[v _prec `c ~T0 @X0 1 a ]
"508
[v _flag `us ~T0 @X0 1 a ]
"533
[s S7 `*Cuc 1 `ui 1 ]
[n S7 . _cp _len ]
[u S6 `ui 1 `S7 1 ]
[n S6 . _val _str ]
[v __val `S6 ~T0 @X0 1 a ]
[; ;doprnt.c: 494: va_list ap;
[; ;doprnt.c: 499: signed char c;
[; ;doprnt.c: 501: int width;
[; ;doprnt.c: 506: signed char prec;
[; ;doprnt.c: 508: unsigned short flag;
[; ;doprnt.c: 527: union {
[; ;doprnt.c: 528: unsigned int _val;
[; ;doprnt.c: 529: struct {
[; ;doprnt.c: 530: const char * _cp;
[; ;doprnt.c: 531: unsigned _len;
[; ;doprnt.c: 532: } _str;
[; ;doprnt.c: 533: } _val;
[; ;doprnt.c: 542: *ap = __va_start();
"542
[e = *U &U _ap ( ___va_start ..  ]
[; ;doprnt.c: 545: while(c = *f++) {
"545
[e $U 9  ]
[e :U 10 ]
{
[; ;doprnt.c: 547: if(c != '%')
"547
[e $ ! != -> -> _c `i `ui -> 37 `ui 12  ]
[; ;doprnt.c: 549: {
"549
{
[; ;doprnt.c: 550: ((*sp++ = (c)));
"550
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> _c `uc ]
[; ;doprnt.c: 551: continue;
"551
[e $U 9  ]
"552
}
[e :U 12 ]
[; ;doprnt.c: 552: }
[; ;doprnt.c: 555: width = 0;
"555
[e = _width -> 0 `i ]
[; ;doprnt.c: 557: flag = 0;
"557
[e = _flag -> -> 0 `i `us ]
[; ;doprnt.c: 559: for(;;) {
"559
{
[e :U 13 ]
{
[; ;doprnt.c: 560: switch(*f) {
"560
[e $U 17  ]
{
[; ;doprnt.c: 562: case '-':
"562
[e :U 18 ]
[; ;doprnt.c: 563: flag |= 0x08;
"563
[e =| _flag -> -> 8 `i `us ]
[; ;doprnt.c: 564: f++;
"564
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 565: continue;
"565
[e $U 15  ]
[; ;doprnt.c: 569: case ' ':
"569
[e :U 19 ]
[; ;doprnt.c: 570: flag |= 0x01;
"570
[e =| _flag -> -> 1 `i `us ]
[; ;doprnt.c: 571: f++;
"571
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 572: continue;
"572
[e $U 15  ]
[; ;doprnt.c: 582: case '#':
"582
[e :U 20 ]
[; ;doprnt.c: 583: flag |= 0x800;
"583
[e =| _flag -> -> 2048 `i `us ]
[; ;doprnt.c: 584: f++;
"584
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 585: continue;
"585
[e $U 15  ]
[; ;doprnt.c: 588: case '0':
"588
[e :U 21 ]
[; ;doprnt.c: 589: flag |= 0x04;
"589
[e =| _flag -> -> 4 `i `us ]
[; ;doprnt.c: 590: f++;
"590
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 591: continue;
"591
[e $U 15  ]
"593
}
[; ;doprnt.c: 593: }
[e $U 16  ]
"560
[e :U 17 ]
[e [\ *U _f , $ -> -> 45 `ui `uc 18
 , $ -> -> 32 `ui `uc 19
 , $ -> -> 35 `ui `uc 20
 , $ -> -> 48 `ui `uc 21
 16 ]
"593
[e :U 16 ]
[; ;doprnt.c: 594: break;
"594
[e $U 14  ]
"595
}
[e :U 15 ]
[; ;doprnt.c: 595: }
[e $U 13  ]
[e :U 14 ]
}
[; ;doprnt.c: 602: if(flag & 0x08)
"602
[e $ ! != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui 22  ]
[; ;doprnt.c: 603: flag &= ~0x04;
"603
[e =& _flag -> ~ -> 4 `i `us ]
[e :U 22 ]
[; ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
"606
[e $ ! ( _isdigit (1 -> -> *U _f `ui `uc 23  ]
{
[; ;doprnt.c: 607: width = 0;
"607
[e = _width -> 0 `i ]
[; ;doprnt.c: 608: do {
"608
[e :U 26 ]
{
[; ;doprnt.c: 609: width *= 10;
"609
[e =* _width -> 10 `i ]
[; ;doprnt.c: 610: width += *f++ - '0';
"610
[e =+ _width -> - -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `ui -> 48 `ui `i ]
"611
}
[; ;doprnt.c: 611: } while(isdigit((unsigned)*f));
[e $ ( _isdigit (1 -> -> *U _f `ui `uc 26  ]
[e :U 25 ]
"613
}
[; ;doprnt.c: 613: } else if(*f == '*') {
[e $U 27  ]
[e :U 23 ]
[e $ ! == -> *U _f `ui -> 42 `ui 28  ]
{
[; ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
"614
[e = _width *U -> ( ___va_arg , (. -> *U -> &U _ap `**i `*v -> 0 `i `*i ]
[; ;doprnt.c: 615: f++;
"615
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
"617
}
[e :U 28 ]
"620
[e :U 27 ]
[; ;doprnt.c: 617: }
[; ;doprnt.c: 620: if(*f == '.') {
[e $ ! == -> *U _f `ui -> 46 `ui 29  ]
{
[; ;doprnt.c: 621: flag |= 0x4000;
"621
[e =| _flag -> -> 16384 `i `us ]
[; ;doprnt.c: 622: f++;
"622
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 624: if(*f == '*') {
"624
[e $ ! == -> *U _f `ui -> 42 `ui 30  ]
{
[; ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
"625
[e = _prec -> *U -> ( ___va_arg , (. -> *U -> &U _ap `**i `*v -> 0 `i `*i `c ]
[; ;doprnt.c: 626: f++;
"626
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
"627
}
[; ;doprnt.c: 627: } else
[e $U 31  ]
[e :U 30 ]
[; ;doprnt.c: 629: {
"629
{
[; ;doprnt.c: 630: prec = 0;
"630
[e = _prec -> -> 0 `i `c ]
[; ;doprnt.c: 631: while(isdigit((unsigned)*f))
"631
[e $U 32  ]
[e :U 33 ]
[; ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
"632
[e = _prec -> - -> + * -> _prec `i -> 10 `i -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `i `ui -> 48 `ui `c ]
[e :U 32 ]
"631
[e $ ( _isdigit (1 -> -> *U _f `ui `uc 33  ]
[e :U 34 ]
"633
}
[e :U 31 ]
"634
}
[; ;doprnt.c: 633: }
[; ;doprnt.c: 634: } else {
[e $U 35  ]
[e :U 29 ]
{
[; ;doprnt.c: 635: prec = 0;
"635
[e = _prec -> -> 0 `i `c ]
"639
}
[e :U 35 ]
[; ;doprnt.c: 639: }
[; ;doprnt.c: 644: switch(c = *f++) {
"644
[e $U 37  ]
{
[; ;doprnt.c: 646: case 0:
"646
[e :U 38 ]
[; ;doprnt.c: 647: goto alldone;
"647
[e $U 39  ]
[; ;doprnt.c: 698: case 'o':
"698
[e :U 40 ]
[; ;doprnt.c: 700: flag |= 0x40;
"700
[e =| _flag -> -> 64 `i `us ]
[; ;doprnt.c: 702: break;
"702
[e $U 36  ]
[; ;doprnt.c: 706: case 'd':
"706
[e :U 41 ]
"707
[e :U 42 ]
[; ;doprnt.c: 707: case 'i':
[; ;doprnt.c: 708: break;
"708
[e $U 36  ]
[; ;doprnt.c: 721: case 'X':
"721
[e :U 43 ]
[; ;doprnt.c: 723: flag |= 0x20;
"723
[e =| _flag -> -> 32 `i `us ]
[; ;doprnt.c: 727: case 'x':
"727
[e :U 44 ]
[; ;doprnt.c: 730: flag |= 0x80;
"730
[e =| _flag -> -> 128 `i `us ]
[; ;doprnt.c: 732: break;
"732
[e $U 36  ]
[; ;doprnt.c: 759: dostring:
"759
[e :U 45 ]
[; ;doprnt.c: 762: if(prec && prec < _val._str._len)
"762
[e $ ! && != -> _prec `i -> -> -> 0 `i `c `i < -> -> _prec `i `ui . . __val 1 1 46  ]
[; ;doprnt.c: 763: _val._str._len = prec;
"763
[e = . . __val 1 1 -> -> _prec `i `ui ]
[e :U 46 ]
[; ;doprnt.c: 766: if(width > _val._str._len)
"766
[e $ ! > -> _width `ui . . __val 1 1 47  ]
[; ;doprnt.c: 767: width -= _val._str._len;
"767
[e =- _width -> . . __val 1 1 `i ]
[e $U 48  ]
"768
[e :U 47 ]
[; ;doprnt.c: 768: else
[; ;doprnt.c: 769: width = 0;
"769
[e = _width -> 0 `i ]
[e :U 48 ]
[; ;doprnt.c: 771: if(!(flag & 0x08))
"771
[e $ ! ! != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui 49  ]
[; ;doprnt.c: 773: while(width--)
"773
[e $U 50  ]
[e :U 51 ]
[; ;doprnt.c: 774: ((*sp++ = (' ')));
"774
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 32 `ui `uc ]
[e :U 50 ]
"773
[e $ != -- _width -> 1 `i -> 0 `i 51  ]
[e :U 52 ]
"774
[e :U 49 ]
[; ;doprnt.c: 776: while(_val._str._len--)
"776
[e $U 53  ]
[e :U 54 ]
[; ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
"777
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x *U ++ . . __val 1 0 * -> -> 1 `i `x -> -> # *U . . __val 1 0 `i `x ]
[e :U 53 ]
"776
[e $ != -- . . __val 1 1 -> -> 1 `i `ui -> -> 0 `i `ui 54  ]
[e :U 55 ]
[; ;doprnt.c: 779: if(flag & 0x08)
"779
[e $ ! != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui 56  ]
[; ;doprnt.c: 780: while(width--)
"780
[e $U 57  ]
[e :U 58 ]
[; ;doprnt.c: 781: ((*sp++ = (' ')));
"781
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 32 `ui `uc ]
[e :U 57 ]
"780
[e $ != -- _width -> 1 `i -> 0 `i 58  ]
[e :U 59 ]
"781
[e :U 56 ]
[; ;doprnt.c: 783: continue;
"783
[e $U 9  ]
[; ;doprnt.c: 793: case 'c':
"793
[e :U 60 ]
[; ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
"808
[e = _c -> *U -> ( ___va_arg , (. -> *U -> &U _ap `**i `*v -> 0 `i `*i `c ]
[; ;doprnt.c: 811: default:
"811
[e :U 61 ]
[; ;doprnt.c: 814: _val._str._cp = (char *)&c;
"814
[e = . . __val 1 0 -> -> &U _c `*uc `*Cuc ]
[; ;doprnt.c: 815: _val._str._len = 1;
"815
[e = . . __val 1 1 -> -> 1 `i `ui ]
[; ;doprnt.c: 816: goto dostring;
"816
[e $U 45  ]
[; ;doprnt.c: 826: case 'u':
"826
[e :U 62 ]
[; ;doprnt.c: 827: flag |= 0xC0;
"827
[e =| _flag -> -> 192 `i `us ]
[; ;doprnt.c: 828: break;
"828
[e $U 36  ]
"831
}
[; ;doprnt.c: 831: }
[e $U 36  ]
"644
[e :U 37 ]
[e [\ = _c -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `c , $ -> -> 0 `i `c 38
 , $ -> -> 111 `ui `c 40
 , $ -> -> 100 `ui `c 41
 , $ -> -> 105 `ui `c 42
 , $ -> -> 88 `ui `c 43
 , $ -> -> 120 `ui `c 44
 , $ -> -> 99 `ui `c 60
 , $ -> -> 117 `ui `c 62
 61 ]
"831
[e :U 36 ]
[; ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
"1258
[e $ ! == & -> _flag `ui -> -> 192 `i `ui -> -> 0 `i `ui 63  ]
[; ;doprnt.c: 1260: {
"1260
{
[; ;doprnt.c: 1266: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
"1266
[e = . __val 0 -> *U -> ( ___va_arg , (. -> *U -> &U _ap `**i `*v -> 0 `i `*i `ui ]
[; ;doprnt.c: 1268: if((int)_val._val < 0) {
"1268
[e $ ! < -> . __val 0 `i -> 0 `i 64  ]
{
[; ;doprnt.c: 1269: flag |= 0x03;
"1269
[e =| _flag -> -> 3 `i `us ]
[; ;doprnt.c: 1270: _val._val = -_val._val;
"1270
[e = . __val 0 -U . __val 0 ]
"1271
}
[e :U 64 ]
"1273
}
[; ;doprnt.c: 1271: }
[; ;doprnt.c: 1273: }
[e $U 65  ]
"1275
[e :U 63 ]
[; ;doprnt.c: 1275: else
[; ;doprnt.c: 1280: {
"1280
{
[; ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
"1293
[e = . __val 0 *U -> ( ___va_arg , (. -> *U -> &U _ap `**ui `*v -> -> 0 `i `ui `*ui ]
"1294
}
[e :U 65 ]
[; ;doprnt.c: 1294: }
[; ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
"1297
[e $ ! && == -> _prec `i -> 0 `i == . __val 0 -> -> 0 `i `ui 66  ]
[; ;doprnt.c: 1298: prec++;
"1298
[e ++ _prec -> -> 1 `i `c ]
[e :U 66 ]
[; ;doprnt.c: 1301: switch((unsigned char)(flag & (0xC0))) {
"1301
[e $U 68  ]
{
[; ;doprnt.c: 1306: case 0x00:
"1306
[e :U 69 ]
"1309
[e :U 70 ]
[; ;doprnt.c: 1309: case 0xC0:
[; ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
"1312
{
[e = _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 71  ]
[e $U 72  ]
"1313
[e :U 71 ]
[; ;doprnt.c: 1313: if(_val._val < dpowers[c])
[e $ ! < . __val 0 *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux 74  ]
[; ;doprnt.c: 1314: break;
"1314
[e $U 72  ]
[e :U 74 ]
"1312
[e ++ _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 71  ]
[e :U 72 ]
"1316
}
[; ;doprnt.c: 1316: break;
[e $U 67  ]
[; ;doprnt.c: 1321: case 0x80:
"1321
[e :U 75 ]
[; ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
"1323
{
[e = _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _hexpowers `ui -> # *U + &U _hexpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _hexpowers `ui `ux `ui 76  ]
[e $U 77  ]
"1324
[e :U 76 ]
[; ;doprnt.c: 1324: if(_val._val < hexpowers[c])
[e $ ! < . __val 0 *U + &U _hexpowers * -> -> _c `uc `ux -> -> # *U &U _hexpowers `ui `ux 79  ]
[; ;doprnt.c: 1325: break;
"1325
[e $U 77  ]
[e :U 79 ]
"1323
[e ++ _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _hexpowers `ui -> # *U + &U _hexpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _hexpowers `ui `ux `ui 76  ]
[e :U 77 ]
"1327
}
[; ;doprnt.c: 1327: break;
[e $U 67  ]
[; ;doprnt.c: 1333: case 0x40:
"1333
[e :U 80 ]
[; ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
"1335
{
[e = _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _octpowers `ui -> # *U + &U _octpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _octpowers `ui `ux `ui 81  ]
[e $U 82  ]
"1336
[e :U 81 ]
[; ;doprnt.c: 1336: if(_val._val < octpowers[c])
[e $ ! < . __val 0 *U + &U _octpowers * -> -> _c `uc `ux -> -> # *U &U _octpowers `ui `ux 84  ]
[; ;doprnt.c: 1337: break;
"1337
[e $U 82  ]
[e :U 84 ]
"1335
[e ++ _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _octpowers `ui -> # *U + &U _octpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _octpowers `ui `ux `ui 81  ]
[e :U 82 ]
"1339
}
[; ;doprnt.c: 1339: break;
[e $U 67  ]
"1343
}
[; ;doprnt.c: 1343: }
[e $U 67  ]
"1301
[e :U 68 ]
[e [\ -> & -> _flag `ui -> -> 192 `i `ui `uc , $ -> -> 0 `i `uc 69
 , $ -> -> 192 `i `uc 70
 , $ -> -> 128 `i `uc 75
 , $ -> -> 64 `i `uc 80
 67 ]
"1343
[e :U 67 ]
[; ;doprnt.c: 1346: if(c < prec)
"1346
[e $ ! < -> _c `i -> _prec `i 85  ]
[; ;doprnt.c: 1347: c = prec;
"1347
[e = _c _prec ]
[e $U 86  ]
"1348
[e :U 85 ]
[; ;doprnt.c: 1348: else if(prec < c)
[e $ ! < -> _prec `i -> _c `i 87  ]
[; ;doprnt.c: 1349: prec = c;
"1349
[e = _prec _c ]
[e :U 87 ]
"1352
[e :U 86 ]
[; ;doprnt.c: 1352: if(width && flag & 0x03)
[e $ ! && != _width -> 0 `i != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 88  ]
[; ;doprnt.c: 1353: width--;
"1353
[e -- _width -> 1 `i ]
[e :U 88 ]
[; ;doprnt.c: 1355: if(flag & 0x4000) {
"1355
[e $ ! != & -> _flag `ui -> -> 16384 `i `ui -> -> 0 `i `ui 89  ]
{
[; ;doprnt.c: 1356: if(width > prec)
"1356
[e $ ! > _width -> _prec `i 90  ]
[; ;doprnt.c: 1357: width -= prec;
"1357
[e =- _width -> _prec `i ]
[e $U 91  ]
"1358
[e :U 90 ]
[; ;doprnt.c: 1358: else
[; ;doprnt.c: 1359: width = 0;
"1359
[e = _width -> 0 `i ]
[e :U 91 ]
"1360
}
[e :U 89 ]
[; ;doprnt.c: 1360: }
[; ;doprnt.c: 1364: if((flag & (
[; ;doprnt.c: 1366: 0x04|
[; ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
"1368
[e $ ! == & -> _flag `ui -> | | -> 4 `i -> 192 `i -> 2048 `i `ui -> | -> 64 `i -> 2048 `i `ui 92  ]
{
[; ;doprnt.c: 1369: if(width)
"1369
[e $ ! != _width -> 0 `i 93  ]
[; ;doprnt.c: 1370: width--;
"1370
[e -- _width -> 1 `i ]
[e :U 93 ]
"1371
}
[; ;doprnt.c: 1371: } else
[e $U 94  ]
[e :U 92 ]
[; ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
"1375
[e $ ! == & -> _flag `ui -> | -> 192 `i -> 2048 `i `ui -> | -> 128 `i -> 2048 `i `ui 95  ]
{
[; ;doprnt.c: 1379: if(width > 2)
"1379
[e $ ! > _width -> 2 `i 96  ]
[; ;doprnt.c: 1380: width -= 2;
"1380
[e =- _width -> 2 `i ]
[e $U 97  ]
"1381
[e :U 96 ]
[; ;doprnt.c: 1381: else
[; ;doprnt.c: 1382: width = 0;
"1382
[e = _width -> 0 `i ]
[e :U 97 ]
"1383
}
[e :U 95 ]
"1388
[e :U 94 ]
[; ;doprnt.c: 1383: }
[; ;doprnt.c: 1388: if(width > c)
[e $ ! > _width -> _c `i 98  ]
[; ;doprnt.c: 1389: width -= c;
"1389
[e =- _width -> _c `i ]
[e $U 99  ]
"1390
[e :U 98 ]
[; ;doprnt.c: 1390: else
[; ;doprnt.c: 1391: width = 0;
"1391
[e = _width -> 0 `i ]
[e :U 99 ]
[; ;doprnt.c: 1394: if(flag & 0x04) {
"1394
[e $ ! != & -> _flag `ui -> -> 4 `i `ui -> -> 0 `i `ui 100  ]
{
[; ;doprnt.c: 1399: if(flag & 0x03)
"1399
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 101  ]
[; ;doprnt.c: 1400: ((*sp++ = ('-')));
"1400
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 45 `ui `uc ]
[e $U 102  ]
"1403
[e :U 101 ]
[; ;doprnt.c: 1403: else
[; ;doprnt.c: 1406: if(flag & 0x01)
"1406
[e $ ! != & -> _flag `ui -> -> 1 `i `ui -> -> 0 `i `ui 103  ]
[; ;doprnt.c: 1407: ((*sp++ = (' ')));
"1407
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 32 `ui `uc ]
[e $U 104  ]
"1410
[e :U 103 ]
[; ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
[e $ ! == & -> _flag `ui -> | -> 192 `i -> 2048 `i `ui -> | -> 128 `i -> 2048 `i `ui 105  ]
{
[; ;doprnt.c: 1411: ((*sp++ = ('0')));
"1411
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 48 `ui `uc ]
[; ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
"1413
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> ? != & -> _flag `ui -> -> 32 `i `ui -> -> 0 `i `ui : -> 88 `ui -> 120 `ui `uc ]
"1419
}
[e :U 105 ]
"1422
[e :U 104 ]
[e :U 102 ]
[; ;doprnt.c: 1419: }
[; ;doprnt.c: 1422: if(width)
[e $ ! != _width -> 0 `i 106  ]
[; ;doprnt.c: 1423: do
"1423
[e :U 109 ]
[; ;doprnt.c: 1424: ((*sp++ = ('0')));
"1424
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 48 `ui `uc ]
[; ;doprnt.c: 1425: while(--width);
"1425
[e $ != =- _width -> 1 `i -> 0 `i 109  ]
[e :U 108 ]
[e :U 106 ]
"1427
}
[; ;doprnt.c: 1427: } else
[e $U 110  ]
[e :U 100 ]
[; ;doprnt.c: 1429: {
"1429
{
[; ;doprnt.c: 1431: if(width
[; ;doprnt.c: 1433: && !(flag & 0x08)
[; ;doprnt.c: 1435: )
"1435
[e $ ! && != _width -> 0 `i ! != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui 111  ]
[; ;doprnt.c: 1436: do
"1436
[e :U 114 ]
[; ;doprnt.c: 1437: ((*sp++ = (' ')));
"1437
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 32 `ui `uc ]
[; ;doprnt.c: 1438: while(--width);
"1438
[e $ != =- _width -> 1 `i -> 0 `i 114  ]
[e :U 113 ]
[e :U 111 ]
[; ;doprnt.c: 1445: if(flag & 0x03)
"1445
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 115  ]
[; ;doprnt.c: 1446: ((*sp++ = ('-')));
"1446
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 45 `ui `uc ]
[e $U 116  ]
"1450
[e :U 115 ]
[; ;doprnt.c: 1450: else if(flag & 0x01)
[e $ ! != & -> _flag `ui -> -> 1 `i `ui -> -> 0 `i `ui 117  ]
[; ;doprnt.c: 1451: ((*sp++ = (' ')));
"1451
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 32 `ui `uc ]
[e :U 117 ]
"1455
[e :U 116 ]
[; ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
[e $ ! == & -> _flag `ui -> | -> 192 `i -> 2048 `i `ui -> | -> 64 `i -> 2048 `i `ui 118  ]
[; ;doprnt.c: 1456: ((*sp++ = ('0')));
"1456
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 48 `ui `uc ]
[e $U 119  ]
"1457
[e :U 118 ]
[; ;doprnt.c: 1457: else
[; ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
"1461
[e $ ! == & -> _flag `ui -> | -> 192 `i -> 2048 `i `ui -> | -> 128 `i -> 2048 `i `ui 120  ]
{
[; ;doprnt.c: 1465: ((*sp++ = ('0')));
"1465
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 48 `ui `uc ]
[; ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
"1467
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> ? != & -> _flag `ui -> -> 32 `i `ui -> -> 0 `i `ui : -> 88 `ui -> 120 `ui `uc ]
"1473
}
[e :U 120 ]
"1476
[e :U 119 ]
}
[e :U 110 ]
[; ;doprnt.c: 1473: }
[; ;doprnt.c: 1476: }
[; ;doprnt.c: 1481: while(prec--) {
"1481
[e $U 121  ]
[e :U 122 ]
{
[; ;doprnt.c: 1483: switch((unsigned char)(flag & (0xC0)))
"1483
[e $U 125  ]
[; ;doprnt.c: 1485: {
"1485
{
[; ;doprnt.c: 1490: case 0x00:
"1490
[e :U 126 ]
"1493
[e :U 127 ]
[; ;doprnt.c: 1493: case 0xC0:
[; ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
"1496
[e = _c -> + % / . __val 0 *U + &U _dpowers * -> -> _prec `uc `ux -> -> # *U &U _dpowers `ui `ux -> -> 10 `i `ui -> 48 `ui `c ]
[; ;doprnt.c: 1498: break;
"1498
[e $U 124  ]
[; ;doprnt.c: 1504: case 0x80:
"1504
[e :U 128 ]
[; ;doprnt.c: 1506: {
"1506
{
"1507
[v _idx `uc ~T0 @X0 1 a ]
[; ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
[e = _idx -> & / . __val 0 *U + &U _hexpowers * -> -> _prec `uc `ux -> -> # *U &U _hexpowers `ui `ux -> -> 15 `i `ui `uc ]
[; ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
"1509
[e = _c -> *U + ? != & -> _flag `ui -> -> 32 `i `ui -> -> 0 `i `ui : :s 1C :s 2C * -> _idx `ux -> -> # *U ? != & -> _flag `ui -> -> 32 `i `ui -> -> 0 `i `ui : :s 1C :s 2C `ui `ux `c ]
"1515
}
[; ;doprnt.c: 1515: }
[; ;doprnt.c: 1517: break;
"1517
[e $U 124  ]
[; ;doprnt.c: 1523: case 0x40:
"1523
[e :U 129 ]
[; ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
"1525
[e = _c -> + & / . __val 0 *U + &U _octpowers * -> -> _prec `uc `ux -> -> # *U &U _octpowers `ui `ux -> -> 7 `i `ui -> 48 `ui `c ]
[; ;doprnt.c: 1527: break;
"1527
[e $U 124  ]
"1530
}
[; ;doprnt.c: 1530: }
[e $U 124  ]
"1483
[e :U 125 ]
[e [\ -> & -> _flag `ui -> -> 192 `i `ui `uc , $ -> -> 0 `i `uc 126
 , $ -> -> 192 `i `uc 127
 , $ -> -> 128 `i `uc 128
 , $ -> -> 64 `i `uc 129
 124 ]
"1530
[e :U 124 ]
[; ;doprnt.c: 1531: ((*sp++ = (c)));
"1531
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> _c `uc ]
"1532
}
[e :U 121 ]
"1481
[e $ != -> -- _prec -> -> 1 `i `c `i -> -> -> 0 `i `c `i 122  ]
[e :U 123 ]
[; ;doprnt.c: 1532: }
[; ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
"1535
[e $ ! && != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui > _width -> 0 `i 130  ]
[; ;doprnt.c: 1536: do
"1536
[e :U 133 ]
[; ;doprnt.c: 1537: ((*sp++ = (' ')));
"1537
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 32 `ui `uc ]
[; ;doprnt.c: 1538: while(--width);
"1538
[e $ != =- _width -> 1 `i -> 0 `i 133  ]
[e :U 132 ]
[e :U 130 ]
"1540
}
[e :U 9 ]
"545
[e $ != -> = _c -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `c `i -> -> -> 0 `i `c `i 10  ]
[e :U 11 ]
[; ;doprnt.c: 1540: }
[; ;doprnt.c: 1542: alldone:
"1542
[e :U 39 ]
[; ;doprnt.c: 1545: *sp = 0;
"1545
[e = *U _sp -> -> 0 `i `uc ]
[; ;doprnt.c: 1547: return 0;
"1547
[e ) -> 0 `i ]
[e $UE 8  ]
[; ;doprnt.c: 1548: }
"1548
[e :UE 8 ]
}
[a 2C 48 49 50 51 52 53 54 55 56 57 97 98 99 100 101 102 0 ]
[a 1C 48 49 50 51 52 53 54 55 56 57 65 66 67 68 69 70 0 ]
