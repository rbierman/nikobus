Version 3.2 HI-TECH Software Intermediate Code
[s S5 `uc -> 3 `i ]
[n S5 BusMessage rawData ]
[s S4 `uc -> 3 `i `uc 1 ]
[n S4 Address address button ]
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef signed short long int int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 43: typedef unsigned char uint8_t;
[; ;stdint.h: 49: typedef unsigned int uint16_t;
[; ;stdint.h: 56: typedef unsigned short long int uint24_t;
[; ;stdint.h: 63: typedef unsigned long int uint32_t;
[; ;stdint.h: 71: typedef signed char int_least8_t;
[; ;stdint.h: 78: typedef signed int int_least16_t;
[; ;stdint.h: 90: typedef signed short long int int_least24_t;
[; ;stdint.h: 98: typedef signed long int int_least32_t;
[; ;stdint.h: 105: typedef unsigned char uint_least8_t;
[; ;stdint.h: 111: typedef unsigned int uint_least16_t;
[; ;stdint.h: 121: typedef unsigned short long int uint_least24_t;
[; ;stdint.h: 128: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 137: typedef signed char int_fast8_t;
[; ;stdint.h: 144: typedef signed int int_fast16_t;
[; ;stdint.h: 156: typedef signed short long int int_fast24_t;
[; ;stdint.h: 164: typedef signed long int int_fast32_t;
[; ;stdint.h: 171: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 177: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 187: typedef unsigned short long int uint_fast24_t;
[; ;stdint.h: 194: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 200: typedef int32_t intmax_t;
[; ;stdint.h: 205: typedef uint32_t uintmax_t;
[; ;stdint.h: 210: typedef int16_t intptr_t;
[; ;stdint.h: 215: typedef uint16_t uintptr_t;
[; ;stdio.h: 8: typedef int ptrdiff_t;
[; ;stdio.h: 9: typedef unsigned size_t;
[; ;stdio.h: 10: typedef unsigned short wchar_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 23: extern int errno;
[; ;stdio.h: 54: struct __prbuf
[; ;stdio.h: 55: {
[; ;stdio.h: 56: char * ptr;
[; ;stdio.h: 57: void (* func)(char);
[; ;stdio.h: 58: };
[; ;conio.h: 17: extern int errno;
[; ;conio.h: 20: extern void init_uart(void);
[; ;conio.h: 22: extern char getch(void);
[; ;conio.h: 23: extern char getche(void);
[; ;conio.h: 24: extern void putch(char);
[; ;conio.h: 25: extern void ungetch(char);
[; ;conio.h: 27: extern __bit kbhit(void);
[; ;conio.h: 31: extern char * cgets(char *);
[; ;conio.h: 32: extern void cputs(const char *);
[; ;stdio.h: 99: extern int cprintf(char *, ...);
[; ;stdio.h: 104: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 194: extern char * gets(char *);
[; ;stdio.h: 195: extern int puts(const char *);
[; ;stdio.h: 196: extern int scanf(const char *, ...);
[; ;stdio.h: 197: extern int sscanf(const char *, const char *, ...);
[; ;stdio.h: 198: extern int vprintf(const char *, va_list);
[; ;stdio.h: 199: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 200: extern int vscanf(const char *, va_list ap);
[; ;stdio.h: 201: extern int vsscanf(const char *, const char *, va_list);
[; ;stdio.h: 205: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 206: extern int printf(const char *, ...);
[; ;stdbool.h: 12: typedef unsigned char bool;
[; ;system.h: 20: void ConfigureOscillator(void);
[; ;lcd.h: 30: void init_lcd(void);
[; ;lcd.h: 31: uint8_t busyXLCD(void);
[; ;lcd.h: 32: void writeCmdXLCD(uint8_t cmd);
[; ;lcd.h: 33: void putsXLCD(char *data);
[; ;lcd.h: 34: void putrsXLCD(const char *buffer);
[; ;lcd.h: 35: void putrsXLCDElement(const char *data, uint8_t element);
[; ;lcd.h: 36: void writeDataXLCD(char data);
[; ;lcd.h: 37: void setDDRamAddr(unsigned char DDaddr);
[; ;lcd.h: 38: void clearLCD();
[; ;main.h: 18: struct Awning {
[; ;main.h: 19: uint8_t buttonAddress[3];
[; ;main.h: 20: uint8_t buttonUp;
[; ;main.h: 21: uint8_t buttonDown;
[; ;main.h: 23: uint16_t upWindPeak;
[; ;main.h: 24: uint16_t upWindAvg;
[; ;main.h: 25: uint8_t upWindDelay;
[; ;main.h: 27: uint8_t upZonAvg;
[; ;main.h: 28: uint8_t upZonDelay;
[; ;main.h: 29: uint8_t downWindAvg;
[; ;main.h: 30: uint8_t downWindDelay;
[; ;main.h: 31: uint8_t downZonAvg;
[; ;main.h: 32: uint8_t downZonDelay;
[; ;main.h: 34: uint8_t upWindCounter;
[; ;main.h: 35: uint8_t upZonCounter;
[; ;main.h: 36: uint8_t downWindCounter;
[; ;main.h: 37: uint8_t downZonCounter;
[; ;main.h: 38: uint8_t status;
[; ;main.h: 39: };
[; ;main.h: 41: struct SystemStatus {
[; ;main.h: 42: uint16_t windAvg;
[; ;main.h: 43: uint16_t wind;
[; ;main.h: 44: uint16_t sun;
[; ;main.h: 45: bool valueChanged;
[; ;main.h: 46: bool day;
[; ;main.h: 47: bool summer;
[; ;main.h: 48: bool alarm;
[; ;main.h: 49: struct Awning *east;
[; ;main.h: 50: struct Awning *south;
[; ;main.h: 51: struct Awning *west;
[; ;main.h: 52: uint8_t desiredBacklight;
[; ;main.h: 54: bool buttonUp;
[; ;main.h: 55: bool buttonDown;
[; ;main.h: 56: bool buttonPush;
[; ;main.h: 57: uint8_t backlight;
[; ;main.h: 58: uint8_t backlightOn;
[; ;main.h: 59: uint8_t backlightPWMCounter;
[; ;main.h: 60: };
[; ;busmessage.h: 13: struct Address{
[; ;busmessage.h: 14: uint8_t address[3];
[; ;busmessage.h: 15: uint8_t button;
[; ;busmessage.h: 16: };
[; ;busmessage.h: 17: struct BusMessage {
[; ;busmessage.h: 18: uint8_t rawData[3];
[; ;busmessage.h: 19: };
[; ;busmessage.h: 21: struct BusMessage encodeAddress(struct Address *address);
[; ;busmessage.h: 22: struct Address decodeMessage(struct BusMessage *busMessage);
"3 busmessage.c
[v _decodeMessage `(S4 ~T0 @X0 1 ef1`*S5 ]
{
[; ;busmessage.c: 3: struct Address decodeMessage(struct BusMessage *busMessage) {
[e :U _decodeMessage ]
[v _busMessage `*S5 ~T0 @X0 1 r1 ]
[f ]
"4
[v _address `S4 ~T0 @X0 1 a ]
[; ;busmessage.c: 4: struct Address address;
[; ;busmessage.c: 5: address.address[0] = busMessage->rawData[0] >> 2;
"5
[e = *U + &U . _address 0 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _address 0 `ui `ux -> >> -> *U + &U . *U _busMessage 0 * -> -> -> 0 `i `ui `ux -> -> # *U &U . *U _busMessage 0 `ui `ux `i -> 2 `i `uc ]
[; ;busmessage.c: 6: address.address[1] = ((busMessage->rawData[0] & 0b00000011) << 6) | (busMessage->rawData[1] >> 2);
"6
[e = *U + &U . _address 0 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _address 0 `ui `ux -> | << & -> *U + &U . *U _busMessage 0 * -> -> -> 0 `i `ui `ux -> -> # *U &U . *U _busMessage 0 `ui `ux `i -> 3 `i -> 6 `i >> -> *U + &U . *U _busMessage 0 * -> -> -> 1 `i `ui `ux -> -> # *U &U . *U _busMessage 0 `ui `ux `i -> 2 `i `uc ]
[; ;busmessage.c: 7: address.address[2] = ((busMessage->rawData[1] & 0b00000011) << 6) | (busMessage->rawData[2] >> 2);
"7
[e = *U + &U . _address 0 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _address 0 `ui `ux -> | << & -> *U + &U . *U _busMessage 0 * -> -> -> 1 `i `ui `ux -> -> # *U &U . *U _busMessage 0 `ui `ux `i -> 3 `i -> 6 `i >> -> *U + &U . *U _busMessage 0 * -> -> -> 2 `i `ui `ux -> -> # *U &U . *U _busMessage 0 `ui `ux `i -> 2 `i `uc ]
[; ;busmessage.c: 9: address.button = busMessage->rawData[2] & 0b00000011;
"9
[e = . _address 1 -> & -> *U + &U . *U _busMessage 0 * -> -> -> 2 `i `ui `ux -> -> # *U &U . *U _busMessage 0 `ui `ux `i -> 3 `i `uc ]
[; ;busmessage.c: 10: return address;
"10
[e ) _address ]
[e $UE 6  ]
[; ;busmessage.c: 11: }
"11
[e :UE 6 ]
}
"13
[v _encodeAddress `(S5 ~T0 @X0 1 ef1`*S4 ]
{
[; ;busmessage.c: 13: struct BusMessage encodeAddress(struct Address *address) {
[e :U _encodeAddress ]
[v _address `*S4 ~T0 @X0 1 r1 ]
[f ]
"14
[v _busMessage `S5 ~T0 @X0 1 a ]
[; ;busmessage.c: 14: struct BusMessage busMessage;
[; ;busmessage.c: 15: busMessage.rawData[0] = (address->address[0] << 2) | (address->address[1] >> 6);
"15
[e = *U + &U . _busMessage 0 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _busMessage 0 `ui `ux -> | << -> *U + &U . *U _address 0 * -> -> -> 0 `i `ui `ux -> -> # *U &U . *U _address 0 `ui `ux `i -> 2 `i >> -> *U + &U . *U _address 0 * -> -> -> 1 `i `ui `ux -> -> # *U &U . *U _address 0 `ui `ux `i -> 6 `i `uc ]
[; ;busmessage.c: 16: busMessage.rawData[1] = (address->address[1] << 2) | (address->address[2] >> 6);
"16
[e = *U + &U . _busMessage 0 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _busMessage 0 `ui `ux -> | << -> *U + &U . *U _address 0 * -> -> -> 1 `i `ui `ux -> -> # *U &U . *U _address 0 `ui `ux `i -> 2 `i >> -> *U + &U . *U _address 0 * -> -> -> 2 `i `ui `ux -> -> # *U &U . *U _address 0 `ui `ux `i -> 6 `i `uc ]
[; ;busmessage.c: 17: busMessage.rawData[2] = (address->address[2] << 2) | (address->button);
"17
[e = *U + &U . _busMessage 0 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _busMessage 0 `ui `ux -> | << -> *U + &U . *U _address 0 * -> -> -> 2 `i `ui `ux -> -> # *U &U . *U _address 0 `ui `ux `i -> 2 `i -> . *U _address 1 `i `uc ]
[; ;busmessage.c: 18: return busMessage;
"18
[e ) _busMessage ]
[e $UE 7  ]
[; ;busmessage.c: 19: }
"19
[e :UE 7 ]
}
